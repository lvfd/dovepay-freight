/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AgentPages.js":
/*!*****************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\AgentPages.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Age_table": () => (/* binding */ Age_table),
/* harmony export */   "initAgent_consumerQueryBillDetails_new": () => (/* binding */ initAgent_consumerQueryBillDetails_new),
/* harmony export */   "initAgent_consumerQueryBill_new": () => (/* binding */ initAgent_consumerQueryBill_new),
/* harmony export */   "initAgent_getBindConsumer": () => (/* binding */ initAgent_getBindConsumer),
/* harmony export */   "initAgent_userName": () => (/* binding */ initAgent_userName)
/* harmony export */ });
/* harmony import */ var _StationPages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StationPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\StationPages.js");
/* harmony import */ var _AjaxManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AjaxManager */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AjaxManager.js");
/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Message */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Message.js");



function initAgent_consumerQueryBill_new() {
  return (0,_StationPages__WEBPACK_IMPORTED_MODULE_0__.initStation_stationQueryBill_new)();
}
function initAgent_consumerQueryBillDetails_new() {
  return (0,_StationPages__WEBPACK_IMPORTED_MODULE_0__.initStation_stationQueryBillDetails_new)();
}
function initAgent_userName() {
  var span = document.getElementById('agentNameInHeader');
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_1__.fetchData)(document.querySelector('input[name=api_getAgentName]').value, '', setUserName, false);
  function setUserName(res) {
    span.innerHTML = '&nbsp;' + res.data.customerNameChn;
  }
}
function initAgent_getBindConsumer() {
  // var form = document.getElementById('form_consumer_getBindConsumer');
  var url = document.querySelector('input[name=api_getBindConsumer]').value;
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_1__.fetch_age_getBindConsumer)(url);
}
function Age_table() {}
Age_table.prototype.getPage_binding = function (res) {
  var data = res.data,
    name = data.customerNameChn,
    // 商户名称
    status = data.status,
    // 绑定状态
    // statusDesc = data.statusDesc, 
    customerId = data.customerIdList,
    form = document.getElementById('form_consumer_getBindConsumer'),
    inp_cus = form.querySelector('input[name=customerId]'),
    inp_sta = form.querySelector('input[name=status]'),
    inp_nam = form.querySelector('input[name=customerNameChn]'),
    btn_bin = document.getElementById('setBindBtn');
  inp_cus.value = customerId;
  inp_sta.value = status;
  inp_nam.value = name;
  var oldmesNode, mes;
  if (status == 0) {
    // 未绑定
    btn_bin.innerText = '绑定账户';
    oldmesNode = document.querySelector('div.uk-alert');
    if (oldmesNode) (0,_Message__WEBPACK_IMPORTED_MODULE_2__.fn_remMes)(oldmesNode);
    mes = (0,_Message__WEBPACK_IMPORTED_MODULE_2__.fn_getMes)('您尚未绑定账户', {
      style: 'warning',
      close: true
    });
    $(mes).insertBefore(form);
    btn_bin.addEventListener('click', function (event) {
      event.preventDefault();
      var url = document.querySelector('input[name=api_bindConsumer]').value;
      var data = {
        customerIdList: customerId,
        status: '1'
      };
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_1__.fetch_age_bindConsumer)(url, data);
    });
  }
  if (status == 1) {
    // 已绑定
    btn_bin.innerText = '解绑账户';
    oldmesNode = document.querySelector('div.uk-alert');
    if (oldmesNode) (0,_Message__WEBPACK_IMPORTED_MODULE_2__.fn_remMes)(oldmesNode);
    mes = (0,_Message__WEBPACK_IMPORTED_MODULE_2__.fn_getMes)('您已绑定账户', {
      style: 'primary',
      close: true
    });
    $(mes).insertBefore(form);
    btn_bin.addEventListener('click', function (event) {
      event.preventDefault();
      var url = document.querySelector('input[name=api_bindConsumer]').value;
      var data = {
        customerIdList: customerId,
        status: '0'
      };
      // var $this = $(this);
      UIkit.modal.confirm('解除绑定之后将不能继续接收账单, 确认继续?').then(function () {
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_1__.fetch_age_bindConsumer)(url, data);
      }, function () {
        return;
      });
    });
  }
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AjaxManager.js":
/*!******************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\AjaxManager.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkRes": () => (/* binding */ checkRes),
/* harmony export */   "fetchData": () => (/* binding */ fetchData),
/* harmony export */   "fetch_age_bindConsumer": () => (/* binding */ fetch_age_bindConsumer),
/* harmony export */   "fetch_age_getBindConsumer": () => (/* binding */ fetch_age_getBindConsumer),
/* harmony export */   "fetch_age_toPay": () => (/* binding */ fetch_age_toPay),
/* harmony export */   "fetch_exportExcel": () => (/* binding */ fetch_exportExcel),
/* harmony export */   "fetch_sta_addDiscountCustomer": () => (/* binding */ fetch_sta_addDiscountCustomer),
/* harmony export */   "fetch_sta_changeCustomerDiscountStatus": () => (/* binding */ fetch_sta_changeCustomerDiscountStatus),
/* harmony export */   "fetch_sta_changeDiscountStatus": () => (/* binding */ fetch_sta_changeDiscountStatus),
/* harmony export */   "fetch_sta_getAllDiscountPolicy": () => (/* binding */ fetch_sta_getAllDiscountPolicy),
/* harmony export */   "fetch_sta_getDiscountPolicy": () => (/* binding */ fetch_sta_getDiscountPolicy),
/* harmony export */   "fetch_sta_getStationAllConsumer": () => (/* binding */ fetch_sta_getStationAllConsumer),
/* harmony export */   "fetch_sta_queryCargo": () => (/* binding */ fetch_sta_queryCargo),
/* harmony export */   "fetch_sta_queryDiscountCustomer": () => (/* binding */ fetch_sta_queryDiscountCustomer),
/* harmony export */   "fetch_sta_queryDiscountPolicy": () => (/* binding */ fetch_sta_queryDiscountPolicy),
/* harmony export */   "fetch_sta_stationBillPush": () => (/* binding */ fetch_sta_stationBillPush),
/* harmony export */   "fetch_sta_submitDiscountPage": () => (/* binding */ fetch_sta_submitDiscountPage),
/* harmony export */   "fetch_sta_updateFee": () => (/* binding */ fetch_sta_updateFee),
/* harmony export */   "fetch_sys_getAllConsumer": () => (/* binding */ fetch_sys_getAllConsumer),
/* harmony export */   "fetch_sys_getAllDiscountPolicy": () => (/* binding */ fetch_sys_getAllDiscountPolicy),
/* harmony export */   "fetch_sys_queryDiscountCustomer": () => (/* binding */ fetch_sys_queryDiscountCustomer),
/* harmony export */   "fn_initExportBtn": () => (/* binding */ fn_initExportBtn),
/* harmony export */   "fn_initSubmitBtn": () => (/* binding */ fn_initSubmitBtn)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_url_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.url.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url.js");
/* harmony import */ var core_js_modules_web_url_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.url-search-params.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url-search-params.js");
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");
/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Message */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Message.js");
/* harmony import */ var _Listbox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Listbox */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Listbox.js");
/* harmony import */ var _StationPages__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./StationPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\StationPages.js");
/* harmony import */ var _SystemPages__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./SystemPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\SystemPages.js");
/* harmony import */ var _AgentPages__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./AgentPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AgentPages.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















// 检查response：
function checkRes(res, callback) {
  if (res.code != '200') {
    var errmsg = '返回数据结果错误! ' + res.code + ': ' + res.msg;
    _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(errmsg, callback);
    if (console) {
      console.error('response: ', res);
    }
    return false;
  }
}
// Init submit button:
function fn_initSubmitBtn(pageNumber, pageSize, fetchFn, callback, postDataHandler, config) {
  var submitBtn = document.getElementById('submitBtn');
  submitBtn.addEventListener('click', function (event) {
    event.preventDefault();
    var $this = $(this);
    var url = document.querySelector('input[name=api_forTable]').value;
    var postData = $this.closest('form').serializeObject();
    if (typeof postDataHandler === 'function') postDataHandler.call(this, postData);
    postData.pageNumber = pageNumber;
    postData.indexPage = pageNumber;
    postData.pageSize = pageSize;
    postData.countPage = pageSize;
    _Global__WEBPACK_IMPORTED_MODULE_9__["default"].Table.hideTable();
    if (typeof callback === 'function') {
      fetchFn.call(this, url, postData, callback, config);
    } else {
      fetchFn.call(this, url, postData);
    }
  });
  submitBtn.click();
}
// Init export button:
function fn_initExportBtn(fetchFn) {
  var expoBtn = document.getElementById('exportBtn');
  if (!expoBtn) return;
  expoBtn.addEventListener('click', function (event) {
    event.preventDefault();
    var $this = $(this);
    var url = document.querySelector('input[name=api_forExport]').value;
    if (!url) return;
    var postData = $this.closest('form').serializeObject();
    fetchFn.call(this, url, postData);
  });
}
// Export function:
function fetch_exportExcel(url, data) {
  var postData = JSON.stringify(data);
  var fileName = '导出数据.xls';
  // console.log(url, postData);
  $.ajax({
    dataType: '',
    xhrFields: {
      responseType: 'blob'
    },
    url: url,
    data: postData,
    success: function success(res, status, xhr) {
      // console.log(status, xhr);
      if (xhr.status != 200) {
        var errmsg = '导出错误! ' + xhr.status + ': ' + xhr.statusText;
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(errmsg);
        return;
      }
      if (window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(res, fileName);
      } else {
        var downloadLink = window.document.createElement('a');
        downloadLink.href = window.URL.createObjectURL(res);
        downloadLink.download = fileName;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
      }
    }
  });
}
// 提交数据并处理返回基本功能函数:
function fetchData(url, data, callback, config) {
  var postData = '';
  if (data) {
    try {
      var rawData = _Global__WEBPACK_IMPORTED_MODULE_9__["default"].isJSON(data) ? JSON.parse(data) : data;
      if (!rawData || _typeof(rawData) !== 'object') throw new Error('传入的data参数不合法');
      postData = _Global__WEBPACK_IMPORTED_MODULE_9__["default"].isJSON(data) ? data : JSON.stringify(data);
    } catch (error) {
      _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(error);
      return;
    }
  }
  var checkResCallback;
  if (config && typeof config === 'function') {
    checkResCallback = config;
  }
  var ajaxConfig = {
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res, checkResCallback) === false) return;
      if (res.msg == 'success') {
        try {
          if (rawData && rawData.pageNumber) {
            callback.call(this, res, rawData.pageNumber, rawData.pageSize);
          } else {
            callback.call(this, res);
          }
        } catch (error) {
          _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(error);
          return;
        }
      } else {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(res.msg);
        return;
      }
    }
  };
  if (config && _typeof(config) === 'object') {
    for (var key in config) {
      ajaxConfig[key] = config[key];
    }
  } else if (config === false) {
    ajaxConfig.global = false;
  }
  $.ajax(ajaxConfig);
}

// sys:
function fetch_sys_getAllConsumer(url, data) {
  var postData = JSON.stringify(data);
  var pageNumber = data.pageNumber;
  var pageSize = data.pageSize;
  // console.log(url, postData)
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res);
      var table = new _SystemPages__WEBPACK_IMPORTED_MODULE_13__.Sys_table();
      try {
        table.getTable_userInfo(res, pageNumber, pageSize);
      } catch (err) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(err);
      }
    }
  });
}
function fetch_sys_queryDiscountCustomer(url, data) {
  var postData = JSON.stringify(data);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res);
      var table = new _SystemPages__WEBPACK_IMPORTED_MODULE_13__.Sys_table();
      try {
        table.getTable_inModal(res);
      } catch (err) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(err);
      }
    }
  });
}
function fetch_sys_getAllDiscountPolicy(url, data) {
  var postData = JSON.stringify(data);
  var pageNumber = data.pageNumber;
  var pageSize = data.pageSize;
  console.log(url, postData);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      console.log(res);
      var table = new _SystemPages__WEBPACK_IMPORTED_MODULE_13__.Sys_table();
      try {
        table.getTable_queryPolicies(res, pageNumber, pageSize);
      } catch (err) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(err);
      }
    }
  });
}

// agent:
// 提交支付：
function fetch_age_toPay(url, data) {
  // 去收银台
  var postData = JSON.stringify(data);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      // console.log(res)
      // debugger
      if (checkRes(res) === false) return;
      var data = res.data,
        payUrl = data.payUrl,
        payData = data.payData;
      _Global__WEBPACK_IMPORTED_MODULE_9__["default"].submVirtForm(payUrl, payData);
    }
  });
}
// 获取账户绑定数据：
function fetch_age_getBindConsumer(url) {
  // 获取绑定信息
  $.ajax({
    url: url,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res);
      var table = new _AgentPages__WEBPACK_IMPORTED_MODULE_14__.Age_table();
      try {
        table.getPage_binding(res);
      } catch (err) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(err);
      }
    }
  });
}
// 提交绑定：
function fetch_age_bindConsumer(url, data) {
  // 绑定商户
  var postData = JSON.stringify(data);
  var status = data.status;
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (res.code == '200') {
        var oldMes;
        if (status == '0') {
          oldMes = document.querySelector('div.uk-alert');
          (0,_Message__WEBPACK_IMPORTED_MODULE_10__.fn_remMes)(oldMes);
          UIkit.modal.alert('账户解绑成功').then(function () {
            location.reload();
          });
        }
        if (status == '1') {
          oldMes = document.querySelector('div.uk-alert');
          (0,_Message__WEBPACK_IMPORTED_MODULE_10__.fn_remMes)(oldMes);
          UIkit.modal.alert('账户绑定成功').then(function () {
            location.reload();
          });
        }
      } else {
        var mes = (0,_Message__WEBPACK_IMPORTED_MODULE_10__.fn_getMes)('绑定/解绑失败', {
          style: 'danger',
          close: true
        });
        $(mes).insertBefore(document.querySelector('form'));
      }
    }
  });
}

// Station:
// 调账：
function fetch_sta_updateFee(url, data) {
  var postData = JSON.stringify(data);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      if (res.msg == 'success') {
        UIkit.modal.alert('修改成功').then(function () {
          document.getElementById('submitBtn').click();
        });
      }
    }
  });
}
// 用户信息管理：推送账单
function fetch_sta_stationBillPush(url, data) {
  var postData = JSON.stringify(data);
  // console.log(url, postData);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      try {
        if (res.msg == 'success') {
          UIkit.modal.alert('推送成功').then(function () {
            document.getElementById('submitBtn').click();
          });
        }
      } catch (e) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(e);
      }
    }
  });
}
// 用户信息管理：获取用户信息:
function fetch_sta_getStationAllConsumer(url, data) {
  var postData = JSON.stringify(data);
  // console.log(url, postData);
  var pageNumber = data.pageNumber;
  var pageSize = data.pageSize;
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res);
      var table = new _StationPages__WEBPACK_IMPORTED_MODULE_12__.Sta_table();
      try {
        table.getTable_getStationAllConsumer(res, pageNumber, pageSize);
      } catch (err) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(err);
      }
    }
  });
}
// 用户信息管理：设置优惠（获取）
function fetch_sta_queryDiscountPolicy(url, customerId) {
  $.ajax({
    url: url,
    data: '',
    success: function success(res) {
      if (checkRes(res) === false) return;
      var element = document.querySelector('#discountSetting');
      var listbox = new _Listbox__WEBPACK_IMPORTED_MODULE_11__.Listbox();
      try {
        listbox.getOptions_discountName(res, element, customerId);
        UIkit.modal(element).show();
      } catch (err) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(err);
      }
    }
  });
}
// 用户信息管理：设置优惠（添加）
function fetch_sta_addDiscountCustomer(url, data) {
  if (data === null) {
    UIkit.modal.alert('请选择至少一项优惠政策');
    return;
  }
  var postData = JSON.stringify(data);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(postData, url, res);
      try {
        if (res.msg == 'success') {
          UIkit.modal.alert('添加成功!');
        } else {
          UIkit.modal.alert(res.msg);
        }
      } catch (e) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(e);
      }
    }
  });
}
// 用户信息管理：查看优惠（获取）
function fetch_sta_queryDiscountCustomer(url, data) {
  var postData = JSON.stringify(data);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res);
      try {
        var element = document.querySelector('#discountShowing');
        var table = element.querySelector('table');
        var tab = new _StationPages__WEBPACK_IMPORTED_MODULE_12__.Sta_table();
        var tbody = tab.getTable_queryDiscountCustomer(res);
        var bodys = table.querySelectorAll('tbody');
        for (var i = 0; i < bodys.length; i++) {
          table.removeChild(bodys[i]);
        }
        table.appendChild(tbody);
        UIkit.modal(element).show();
      } catch (e) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(e);
      }
    }
  });
}
// 用户信息管理：查看优惠（更改）
function fetch_sta_changeCustomerDiscountStatus(url, data) {
  var postData = JSON.stringify(data);
  // console.log(postData);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (res.msg == 'success') {
        UIkit.modal.alert('更改成功!');
      } else {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(res.msg);
      }
    }
  });
}
// 优惠政策管理：查看所有优惠政策
function fetch_sta_getAllDiscountPolicy(url, data) {
  var postData = JSON.stringify(data);
  var pageNumber = data.pageNumber;
  var pageSize = data.pageSize;
  // console.log(url, postData);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res);
      var tab = new _StationPages__WEBPACK_IMPORTED_MODULE_12__.Sta_table();
      tab.getTable_getAllDiscountPolicy(res, pageNumber, pageSize);
    }
  });
}
// 优惠政策管理： 启动、停止优惠
function fetch_sta_changeDiscountStatus(url, data) {
  var postData = JSON.stringify(data);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res)
      if (res.msg == 'success') {
        UIkit.modal.alert('操作成功').then(function () {
          location.reload();
        });
      }
    }
  });
}
// 优惠政策管理：优惠政策详情
function fetch_sta_getDiscountPolicy(url, data) {
  var postData = JSON.stringify(data);
  // console.log(url, postData);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      // console.log(res);
      var data = res.data;
      if (data.length < 1) {
        UIkit.modal.alert('无数据');
      }
      _Global__WEBPACK_IMPORTED_MODULE_9__["default"].initDiscountDetails(data);
      var btn = document.getElementById('btnAction');
      var status_changeToThis = null;
      if (data.status == '1') {
        btn.innerText = '作废';
        status_changeToThis = 2;
      } else {
        btn.innerText = '启用';
        status_changeToThis = 1;
      }
      btn.addEventListener('click', function (event) {
        event.preventDefault();
        var url = document.querySelector('input[name=api_changeDiscountStatus]').value;
        var postData = {
          discountPolicyId: data.discountPolicyId,
          status: status_changeToThis
        };
        fetch_sta_changeDiscountStatus(url, postData);
      });
    }
  });
}
// 新增优惠：获取品名
function fetch_sta_queryCargo(url, data, resultContainer) {
  var postData = JSON.stringify({
    cargoNm: data
  });
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      var listbox = new _Listbox__WEBPACK_IMPORTED_MODULE_11__.Listbox();
      try {
        listbox.getOptions_cargoName(res, resultContainer);
      } catch (e) {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(e);
      }
    }
  });
}
// 新增优惠：提交优惠
function fetch_sta_submitDiscountPage(url, data) {
  var postData = JSON.stringify(data);
  $.ajax({
    url: url,
    data: postData,
    success: function success(res) {
      if (checkRes(res) === false) return;
      if (res.msg == 'success') {
        UIkit.modal.alert('创建成功').then(function () {
          window.location.href = 'discountPoliciesManagement';
        });
      } else {
        _Global__WEBPACK_IMPORTED_MODULE_9__["default"].errorHandler(res.msg);
      }
    }
  });
}

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\DiscountPages.js":
/*!********************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\DiscountPages.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initStation_discountPoliciesManagementDetails": () => (/* binding */ initStation_discountPoliciesManagementDetails),
/* harmony export */   "initStation_initTabs": () => (/* binding */ initStation_initTabs)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.string.trim.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.trim.js");
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");
/* harmony import */ var _QueryDict__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./QueryDict */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\QueryDict.js");
/* harmony import */ var _Listbox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Listbox */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Listbox.js");
/* harmony import */ var _AjaxManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AjaxManager */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AjaxManager.js");









function initStation_discountPoliciesManagementDetails() {
  var discountPolicyId = document.querySelector('input[name=discountPolicyId]').value;
  var url = document.querySelector('input[name=api_getDiscountPolicy]').value;
  var data = {
    discountPolicyId: discountPolicyId
  };
  //输出详情数据, 绑定启用/作废button
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetch_sta_getDiscountPolicy)(url, data);
  // 绑定返回button
  document.getElementById('btnBack').addEventListener('click', function (event) {
    event.preventDefault();
    var url = document.querySelector('input[name=url_discountPoliciesManagement]').value;
    window.location.href = url;
  });
}
function initStation_initTabs() {
  var queryType = document.querySelector('input[name=dict_api_queryType]').value;
  if (!queryType) return;
  var callback = function callback(res) {
    if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.checkRes)(res) === false) return;
    var texts = res.data,
      content = document.querySelector('#discountType');
    for (var i = 0; i < texts.length; i++) {
      createNodes(content, texts[i], i);
    }
    switchPage(0);
  };
  (0,_QueryDict__WEBPACK_IMPORTED_MODULE_6__["default"])(queryType, callback);
  function createNodes(content, data, num) {
    var li = document.createElement('li'),
      a = document.createElement('a');
    a.setAttribute('href', '#');
    a.innerText = data.value;
    a.setAttribute('data-type', data.type);
    a.setAttribute('data-key', data.key);
    a.addEventListener('click', function (event) {
      event.preventDefault();
      switchPage(num);
    });
    li.appendChild(a);
    content.appendChild(li);
  }
  function switchPage(num) {
    var container = document.querySelector('section#form-container');
    var initPage = function initPage(res) {
      $(container).html(res);
      initPage_1();
    };
    $.ajax({
      url: 'discountPolicies/' + (Number(num) + 1),
      headers: '',
      type: 'GET',
      dataType: 'html',
      success: initPage
    });
  }
  function initPage_1() {
    // init Wdate:
    _Global__WEBPACK_IMPORTED_MODULE_5__["default"].WdateInit('startTime', 'endTime');

    // 普通优惠，查询字典接口加载select的option:
    if (document.getElementById('normal_discount_type_select')) {
      (0,_QueryDict__WEBPACK_IMPORTED_MODULE_6__["default"])('DISCOUNT_SUPPORT', function (res) {
        if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.checkRes)(res) === false) return;
        if (res.data.length < 1) {
          UIkit.alert('字典接口无数据').then(function () {
            console.error(res);
            return;
          });
        }
        var sel = document.getElementById('normal_discount_type_select');
        var data = res.data;
        for (var i = 0; i < data.length; i++) {
          var op = document.createElement('option');
          for (var key in data[i]) {
            if (key == 'value') {
              op.innerText = data[i][key];
            } else {
              op.setAttribute('data-' + key, data[i][key]);
            }
          }
          sel.appendChild(op);
        }

        // 绑定select关联listbox：
        var listbox = document.getElementById('specialCargoNameListbox');
        selToListbox();
        sel.addEventListener('change', function (event) {
          event.preventDefault();
          selToListbox('onchange');
        });
        function selToListbox(type) {
          if (sel.options[sel.selectedIndex].getAttribute('data-key') == 'N_GA_D_E') {
            listbox.style.display = '';
            if (type) {
              document.getElementById('fn_queryCargoNmBtn').click();
            }
          } else {
            listbox.style.display = 'none';
            document.getElementById('destSelect').innerHTML = '';
          }
        }
      });
    }

    // 航点优惠，初始化航点信息：
    if (document.getElementById('departureInfo')) {
      var departureInfo = new DepartureInfo();
      departureInfo.add('init');
    }

    // 优惠政策设置页面，初始化增加航班号组件
    if (document.querySelector('#inputAssets')) {
      var airlineNum = new AirlineNum();
      airlineNum.add('airlineNum', 'init');
    }

    // 加载品名listbox：
    if (document.querySelector('#cargoNameListbox') || document.getElementById('specialCargoNameListbox')) {
      (0,_Listbox__WEBPACK_IMPORTED_MODULE_7__.initListBox)();
    }

    // 品名查询：
    if (document.querySelector('#fn_queryCargoNmBtn')) {
      var btn = document.querySelector('#fn_queryCargoNmBtn');
      var url = document.querySelector('input[name=api_queryCargo]').value;
      var resultContainer = document.querySelector('select#sourceSelect');
      btn.addEventListener('click', function (event) {
        event.preventDefault();
        var postData = document.querySelector('input[name=cargoNm]').value;
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetch_sta_queryCargo)(url, postData, resultContainer);
      });
      // 默认执行一次查询：
      btn.click();
    }

    // 初始化费用表单
    if (document.querySelector('#wrap_feeDiscount_assets')) {
      var feeDiscountItem = new FeeDiscountItem();
      feeDiscountItem.add('init');
    }

    // 绑定submit：
    if (document.querySelector('#fn_submitDiscountPage_1')) {
      submitDiscountPage('1');
    }
    if (document.querySelector('#fn_submitDiscountPage_2')) {
      submitDiscountPage('2');
    }
    if (document.querySelector('#fn_submitDiscountPage_3')) {
      submitDiscountPage('3');
    }
    function submitDiscountPage(pageNum) {
      var submitBtn = document.querySelector('.fn_submit-discountPage');
      submitBtn.addEventListener('click', function (event) {
        event.preventDefault();
        var url = document.querySelector('input[name=api_createDiscountPolicy]').value;
        var submit = new DiscountPagesSubmit();
        var postData = {};
        if (pageNum == '1') postData = submit.getP1PostData();
        if (pageNum == '2') postData = submit.getP2PostData();
        if (pageNum == '3') postData = submit.getP3PostData();
        // console.log(url, postData);
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetch_sta_submitDiscountPage)(url, postData);
      });
    }
  }
}
function AirlineNum() {}
AirlineNum.prototype.add = function (inputName, type) {
  var parentNode = document.querySelector('#inputAssets');
  var asset = AirlineNum.getInputAsset(inputName, type);
  if (!parentNode) {
    throw new Error('without #inputAssets');
  }
  parentNode.appendChild(asset);
};
AirlineNum.getInputAsset = function (inputName, type) {
  // 初始化wrap：
  var wrapDiv = document.createElement('div');
  wrapDiv.setAttribute('class', 'uk-width-1-4');

  // 初始化label:
  var aLabel = document.createElement('label');
  aLabel.setAttribute('class', 'uk-form-label');
  aLabel.setAttribute('for', inputName);
  aLabel.innerText = '航班号';
  wrapDiv.appendChild(aLabel);

  // 初始化控件组：
  var formControlDiv = document.createElement('div');
  formControlDiv.setAttribute('class', 'uk-form-controls uk-flex uk-flex-bottom');
  wrapDiv.appendChild(formControlDiv);

  // 初始化input:
  var aInput = document.createElement('input');
  aInput.setAttribute('class', 'uk-input');
  aInput.setAttribute('type', 'text');
  aInput.setAttribute('name', inputName);
  formControlDiv.appendChild(aInput);

  // 初始化add图标 - button：
  createAddBtn(formControlDiv);
  function createAddBtn(parentNode, type) {
    var plusBtn_content = document.createElement('i');
    plusBtn_content.setAttribute('class', 'fa fa-plus');
    plusBtn_content.setAttribute('aria-hidden', 'true');
    var plusBtn = document.createElement('button');
    plusBtn.setAttribute('class', 'button button-primary button-square');
    plusBtn.setAttribute('id', 'addAsset');
    plusBtn.appendChild(plusBtn_content);
    if (!type) {
      parentNode.appendChild(plusBtn);
    } else {
      var child = parentNode.querySelector('button');
      if (child) {
        parentNode.insertBefore(plusBtn, child);
      } else {
        parentNode.appendChild(plusBtn);
      }
    }
    plusBtn.addEventListener('click', function (event) {
      event.preventDefault();
      this.parentNode.removeChild(this);
      var airlineNum = new AirlineNum();
      airlineNum.add('airlineNum');
    });
  }

  // 初始化minus图标 - button：
  if (!type) {
    var minusBtn_content = document.createElement('i');
    minusBtn_content.setAttribute('class', 'fa fa-minus');
    minusBtn_content.setAttribute('aria-hidden', 'true');
    var minusBtn = document.createElement('button');
    minusBtn.setAttribute('class', 'button button-highlight button-square');
    minusBtn.appendChild(minusBtn_content);
    formControlDiv.appendChild(minusBtn);
    minusBtn.addEventListener('click', function (event) {
      event.preventDefault();
      var preWrapDiv = wrapDiv.previousElementSibling;
      var nextWrapDiv = wrapDiv.nextElementSibling;
      var preFormControlDiv = preWrapDiv.querySelector('.uk-form-controls');
      if (!!preFormControlDiv && !nextWrapDiv)
        // 如果是最后一个
        createAddBtn(preFormControlDiv, 'insertBefore');
      wrapDiv.parentNode.removeChild(wrapDiv);
    });
  }
  return wrapDiv;
};
function DepartureInfo() {}
DepartureInfo.prototype.add = function (type) {
  var parentNode = document.getElementById('departureInfo');
  var asset = DepartureInfo.getAsset(type);
  if (!parentNode) {
    throw new Error('without #departureInfo');
  }
  parentNode.appendChild(asset);
};
DepartureInfo.getAsset = function (type) {
  var wrapDiv = document.createElement('div');
  wrapDiv.setAttribute('class', 'uk-flex uk-flex-bottom fn_departureInfo_wrap uk-width-1-2');
  var flexDiv1 = document.createElement('div');
  flexDiv1.setAttribute('class', 'fn_departureInfo_1');
  wrapDiv.appendChild(flexDiv1);
  var label_1 = document.createElement('label');
  label_1.setAttribute('class', 'uk-form-label');
  label_1.innerText = '起点站';
  flexDiv1.appendChild(label_1);
  var input_1 = document.createElement('input');
  input_1.setAttribute('class', 'uk-input');
  input_1.setAttribute('type', 'text');
  flexDiv1.appendChild(input_1);
  var flexDiv2 = document.createElement('div');
  flexDiv2.setAttribute('class', 'fn_departureInfo_2 uk-margin-small-left uk-margin-small-right');
  wrapDiv.appendChild(flexDiv2);
  var label_2 = document.createElement('label');
  label_2.setAttribute('class', 'uk-form-label');
  label_2.setAttribute('for', 'discountValue');
  label_2.innerText = '起点站三字码';
  flexDiv2.appendChild(label_2);
  var input_2 = document.createElement('input');
  input_2.setAttribute('class', 'uk-input');
  input_2.setAttribute('type', 'text');
  input_2.setAttribute('name', 'discountValue');
  flexDiv2.appendChild(input_2);
  createAddBtn(wrapDiv);
  function createAddBtn(wrapDiv, type) {
    var btn_plus = document.createElement('button');
    btn_plus.setAttribute('class', 'button button-primary button-square');
    if (!type) {
      wrapDiv.appendChild(btn_plus);
    } else {
      var child = wrapDiv.querySelector('button');
      if (child) {
        wrapDiv.insertBefore(btn_plus, child);
      } else {
        wrapDiv.appendChild(btn_plus);
      }
    }
    var btn_plus_icon = document.createElement('i');
    btn_plus_icon.setAttribute('class', 'fa fa-plus');
    btn_plus_icon.setAttribute('aria-hidden', 'true');
    btn_plus.appendChild(btn_plus_icon);
    btn_plus.addEventListener('click', function (event) {
      event.preventDefault();
      this.parentNode.removeChild(this);
      var departureInfo = new DepartureInfo();
      departureInfo.add();
    });
  }
  if (!type) {
    var btn_minus = document.createElement('button');
    btn_minus.setAttribute('class', 'button button-highlight button-square');
    wrapDiv.appendChild(btn_minus);
    var btn_minus_icon = document.createElement('i');
    btn_minus_icon.setAttribute('class', 'fa fa-minus');
    btn_minus_icon.setAttribute('aria-hidden', 'true');
    btn_minus.appendChild(btn_minus_icon);
    btn_minus.addEventListener('click', function (event) {
      event.preventDefault();
      var preWrapDiv = wrapDiv.previousElementSibling;
      var nextWrapDiv = wrapDiv.nextElementSibling;
      if (!!preWrapDiv && !nextWrapDiv)
        // 如果是最后一个
        createAddBtn(preWrapDiv, 'insertBefore');
      wrapDiv.parentNode.removeChild(wrapDiv);
    });
  }
  return wrapDiv;
};
function FeeDiscountItem() {}
FeeDiscountItem.prototype.add = function (type) {
  $.ajax({
    url: document.querySelector('input[name=api_queryFeeItem]').value,
    data: '',
    success: function success(feeItem) {
      if (feeItem.code != '200') {
        UIkit.modal.alert(feeItem.msg);
      }
      (0,_QueryDict__WEBPACK_IMPORTED_MODULE_6__["default"])('DISCOUNT_FEE_TYPE', function (feeType) {
        if (feeType.code != '200') {
          UIkit.modal.alert(feeType.msg);
        }
        try {
          var asset = FeeDiscountItem.getAsset(feeItem.data, feeType.data, type);
          var parentNode = document.querySelector('#wrap_feeDiscount_assets');
          parentNode.appendChild(asset);
        } catch (e) {
          alert(e);
          console.error(e);
        }
      });
    }
  });
};
FeeDiscountItem.getAsset = function (feeItemData, feeTypeData, type) {
  // wrap:
  var wrapDiv = document.createElement('div');
  wrapDiv.setAttribute('class', 'uk-flex uk-flex-middle uk-margin fn_getDiscountFeeRequestList');

  // 费用减免项：
  var feeItemDiv = document.createElement('div');
  feeItemDiv.setAttribute('class', 'uk-width-medium');
  wrapDiv.appendChild(feeItemDiv);
  var feeItemLabel = document.createElement('label');
  feeItemLabel.setAttribute('class', 'uk-form-label');
  feeItemLabel.setAttribute('for', 'discountFeeKey');
  feeItemLabel.innerText = '费用减免项';
  feeItemDiv.appendChild(feeItemLabel);

  /* 由单选: */
  // var feeItemSelect = document.createElement('select');
  // feeItemSelect.setAttribute('class', 'uk-select');
  // feeItemSelect.setAttribute('name', 'discountFeeKey');
  // feeItemDiv.appendChild(feeItemSelect);
  // for (let i = 0; i < feeItemData.length; i++) {
  //   let op = document.createElement('option');
  //   for ( let key in feeItemData[i]) {
  //     if (key == 'feeShortNm') {
  //       op.innerText = feeItemData[i][key];
  //     }
  //     op.setAttribute('data-' + key, feeItemData[i][key]);
  //   }
  //   feeItemSelect.appendChild(op);
  // }

  /* 改为多选: */
  /* 组件结构: 
    feeItemAsset
      feeItemButton
      feeItemButtonModal
  */
  var feeItemAsset = document.createElement('div');
  feeItemDiv.appendChild(feeItemAsset);
  feeItemAsset.classList.add('uk-flex', 'discountFeeKey');
  var feeIteminput = document.createElement('input');
  feeItemAsset.appendChild(feeIteminput);
  feeIteminput.classList.add('uk-input');
  feeIteminput.style.textOverflow = 'ellipsis';
  feeIteminput.setAttribute('placeholder', '请选择减免项');
  feeIteminput.setAttribute('readonly', 'readonly');
  var feeItemButton = document.createElement('button');
  feeItemAsset.appendChild(feeItemButton);
  var feeItemButtonModal = document.createElement('div');
  feeItemAsset.appendChild(feeItemButtonModal);

  /* feeItemButton: */
  feeItemButton.innerHTML = '<i class="fa fa-caret-right" aria-hidden="true"></i>';
  feeItemButton.classList.add('uk-button', 'uk-button-primary');
  feeItemButton.setAttribute('type', 'button');

  /* feeItemButtonModal: */
  feeItemButtonModal.setAttribute('uk-drop', 'mode: click; pos: right-bottom');
  var cardFrame = document.createElement('div');
  feeItemButtonModal.appendChild(cardFrame);
  cardFrame.classList.add('uk-card', 'uk-card-default');
  var feeItemButtonModalBody = document.createElement('div');
  cardFrame.appendChild(feeItemButtonModalBody);
  feeItemButtonModalBody.classList.add('uk-card-body', 'uk-height-large', 'uk-overflow-auto');
  var feeItemButtonModalBodyUl = document.createElement('ul');
  feeItemButtonModalBody.appendChild(feeItemButtonModalBodyUl);
  feeItemButtonModalBodyUl.classList.add('uk-list', 'uk-list-divider');
  feeItemData.forEach(function (data) {
    if (data['feeShortNm']) {
      var li = document.createElement('li');
      feeItemButtonModalBodyUl.appendChild(li);
      var cb = document.createElement('input');
      li.appendChild(cb);
      cb.type = 'checkbox';
      cb.classList.add('uk-checkbox', 'uk-margin-small-right');
      cb.setAttribute('data-feeShortNm', data['feeShortNm']);
      cb.setAttribute('data-feeId', data['feeId'] ? data['feeId'] : '');
      var span = document.createElement('span');
      li.appendChild(span);
      span.innerText = data['feeShortNm'];
    }
  });
  var cardFooter = document.createElement('div');
  cardFrame.appendChild(cardFooter);
  cardFooter.classList.add('uk-card-footer');
  var footerBtn = document.createElement('button');
  cardFooter.appendChild(footerBtn);
  footerBtn.classList.add('uk-button', 'uk-button-primary', 'uk-align-center');
  footerBtn.innerText = '确认';
  footerBtn.setAttribute('type', 'button');
  footerBtn.addEventListener('click', function () {
    var cbList = feeItemButtonModalBodyUl.querySelectorAll('input[type="checkbox"]');
    var checkedValue = [];
    cbList.forEach(function (cb) {
      if (cb.checked) {
        checkedValue.push(cb.getAttribute('data-feeShortNm'));
      }
    });
    console.log(checkedValue);
    feeIteminput.value = checkedValue;
    UIkit.drop(feeItemButtonModal).hide(false);
  });

  // 费用减免类型：
  var feeTypeDiv = document.createElement('div');
  feeTypeDiv.setAttribute('class', 'uk-margin-small-left');
  wrapDiv.appendChild(feeTypeDiv);
  var feeTypeLabel = document.createElement('label');
  feeTypeLabel.setAttribute('class', 'uk-form-label');
  feeTypeLabel.setAttribute('for', 'discountFeeType');
  feeTypeLabel.innerText = '减免类型';
  feeTypeDiv.appendChild(feeTypeLabel);
  var flexDiv = document.createElement('div');
  flexDiv.setAttribute('class', 'uk-flex uk-flex-middle uk-form-controls');
  feeTypeDiv.appendChild(flexDiv);
  var feeTypeSelect = document.createElement('select');
  feeTypeSelect.setAttribute('class', 'uk-select uk-width-small');
  feeTypeSelect.setAttribute('name', 'discountFeeType');
  flexDiv.appendChild(feeTypeSelect);
  for (var i = 0; i < feeTypeData.length; i++) {
    var op = document.createElement('option');
    for (var key in feeTypeData[i]) {
      if (key == 'value') {
        op.innerText = feeTypeData[i][key];
      }
      op.setAttribute('data-' + key, feeTypeData[i][key]);
    }
    feeTypeSelect.appendChild(op);
  }

  // 费用数值：
  var feeInput = document.createElement('input');
  feeInput.setAttribute('class', 'uk-input uk-margin-small-left uk-width-small');
  feeInput.setAttribute('type', 'number');
  feeInput.setAttribute('name', 'discountFeeValue');
  var val = feeTypeSelect.getAttribute('data-key');
  if (val == 'free') {
    feeInput.setAttribute('disabled', '');
  }
  flexDiv.appendChild(feeInput);
  var discrSpan = document.createElement('span');
  discrSpan.setAttribute('class', 'uk-margin-small-left uk-margin-small-right uk-text-nowrap');
  discrSpan.innerText = '元/折';
  flexDiv.appendChild(discrSpan);
  if (!type) {
    var minusBtn = document.createElement('button');
    minusBtn.setAttribute('class', 'button button-highlight button-square');
    flexDiv.appendChild(minusBtn);
    var minusIcon = document.createElement('i');
    minusIcon.setAttribute('class', 'fa fa-minus');
    minusIcon.setAttribute('aria-hidden', 'true');
    minusBtn.appendChild(minusIcon);
    minusBtn.addEventListener('click', function (event) {
      event.preventDefault();
      var preWrapDiv = wrapDiv.previousElementSibling;
      var nextWrapDiv = wrapDiv.nextElementSibling;
      var preFormControlDiv = preWrapDiv.querySelector('.uk-form-controls');
      if (!!preFormControlDiv && !nextWrapDiv)
        // 如果是最后一个
        createAddBtn(preFormControlDiv, 'insertBefore');
      wrapDiv.parentNode.removeChild(wrapDiv);
    });
  }

  // 按钮：
  createAddBtn(flexDiv, type);
  function createAddBtn(parentNode) {
    var plusBtn = document.createElement('button');
    plusBtn.setAttribute('class', 'button button-primary button-square');
    parentNode.appendChild(plusBtn);
    var plusIcon = document.createElement('i');
    plusIcon.setAttribute('class', 'fa fa-plus');
    plusIcon.setAttribute('aria-hidden', 'true');
    plusBtn.appendChild(plusIcon);
    plusBtn.addEventListener('click', function (event) {
      event.preventDefault();
      this.parentNode.removeChild(this);
      var feeDiscountItem = new FeeDiscountItem();
      feeDiscountItem.add();
    });
  }

  // listen select:
  checkFeeType(feeTypeSelect); // check after building
  feeTypeSelect.addEventListener('change', function () {
    checkFeeType(this);
  });
  function checkFeeType(selectNode) {
    var index = selectNode.selectedIndex;
    var val = selectNode.options[index].getAttribute('data-key');
    if (val == 'free') {
      feeInput.value = '';
      feeInput.innerHTML = '';
      feeInput.setAttribute('disabled', 'true');
    } else {
      if (feeInput.getAttribute('disabled') === 'true') {
        feeInput.removeAttribute('disabled');
      }
    }
  }
  return wrapDiv;
};
function DiscountPagesSubmit() {}
DiscountPagesSubmit.prototype.getP1PostData = function () {
  var data = {};
  var discountPolicyName = document.querySelector('input[name=discountPolicyName]').value;
  var startTime = document.querySelector('input[name=startTime]').value;
  var endTime = document.querySelector('input[name=endTime]').value;
  var discountType = document.querySelector('#discountType .uk-active a').getAttribute('data-key');
  var discountValue = DiscountPagesSubmit.getDiscountValueAirline();
  var minCharge = document.querySelector('input[name=minCharge]').value;
  var cargoNo = DiscountPagesSubmit.getCargoNo();
  var discountFeeRequestList = DiscountPagesSubmit.getDiscountFeeRequestList();
  data.discountPolicyName = discountPolicyName;
  data.startTime = startTime;
  data.endTime = endTime;
  data.discountType = discountType;
  data.discountValue = discountValue;
  data.minCharge = minCharge;
  data.cargoNo = cargoNo;
  data.discountFeeRequestList = discountFeeRequestList;
  return data;
};
DiscountPagesSubmit.prototype.getP2PostData = function () {
  var data = {};
  var discountPolicyName = document.querySelector('input[name=discountPolicyName]').value;
  var startTime = document.querySelector('input[name=startTime]').value;
  var endTime = document.querySelector('input[name=endTime]').value;
  var discountType = document.querySelector('#discountType .uk-active a').getAttribute('data-key');
  var discountValue = DiscountPagesSubmit.getDiscountValueAirdot();
  var minCharge = document.querySelector('input[name=minCharge]').value;
  var discountFeeRequestList = DiscountPagesSubmit.getDiscountFeeRequestList();
  data.discountPolicyName = discountPolicyName;
  data.startTime = startTime;
  data.endTime = endTime;
  data.discountType = discountType;
  data.discountValue = discountValue;
  data.minCharge = minCharge;
  data.discountFeeRequestList = discountFeeRequestList;
  return data;
};
DiscountPagesSubmit.prototype.getP3PostData = function () {
  var data = {};
  var discountPolicyName = document.querySelector('input[name=discountPolicyName]').value;
  var startTime = document.querySelector('input[name=startTime]').value;
  var endTime = document.querySelector('input[name=endTime]').value;
  var discountType = document.querySelector('#discountType .uk-active a').getAttribute('data-key');
  var discountValue = DiscountPagesSubmit.getDiscountValueFromSelect();
  var minCharge = document.querySelector('input[name=minCharge]').value;
  var cargoNo = DiscountPagesSubmit.getCargoNo();
  var discountFeeRequestList = DiscountPagesSubmit.getDiscountFeeRequestList();
  data.discountPolicyName = discountPolicyName;
  data.startTime = startTime;
  data.endTime = endTime;
  data.discountType = discountType;
  data.discountValue = discountValue;
  data.minCharge = minCharge;
  data.cargoNo = cargoNo;
  data.discountFeeRequestList = discountFeeRequestList;
  return data;
};
DiscountPagesSubmit.getDiscountValueAirline = function () {
  var result = '';
  var inputArr = document.querySelectorAll('input[name=airlineNum]');
  if (inputArr.length < 1) {
    throw new Error('没有flightNumber字段');
  }
  for (var i = 0; i < inputArr.length; i++) {
    var value = $.trim(inputArr[i].value);
    if (value == '') {
      continue;
    }
    if (i > 0) {
      result += ',';
    }
    result += value;
  }
  return result;
};
DiscountPagesSubmit.getDiscountValueAirdot = function () {
  var result = '';
  var inputArr = document.querySelectorAll('input[name=discountValue]');
  if (inputArr.length < 1) {
    throw new Error('没有三字码字段');
  }
  for (var i = 0; i < inputArr.length; i++) {
    var value = $.trim(inputArr[i].value);
    if (value == '') {
      continue;
    }
    if (i > 0) {
      result += ',';
    }
    result += value;
  }
  return result;
};
DiscountPagesSubmit.getDiscountValueFromSelect = function () {
  var select = document.querySelector('select[name=discountValue]');
  var value = select.options[select.selectedIndex].getAttribute('data-key');
  return value;
};
DiscountPagesSubmit.getCargoNo = function () {
  var result = '';
  var select = document.querySelector('#destSelect');
  var ops = select.querySelectorAll('option');
  // if (ops.length < 1) {
  //   UIkit.modal.alert('没有添加优惠品名');
  //   return;
  // }
  for (var i = 0; i < ops.length; i++) {
    var cargoNo = ops[i].getAttribute('data-cargoNo');
    if (i > 0) {
      result += ',';
    }
    if (cargoNo === null || cargoNo === '') {
      continue;
    }
    result += cargoNo;
  }
  return result;
};
DiscountPagesSubmit.getDiscountFeeRequestList = function () {
  var result = [];
  var listArr = document.querySelectorAll('.fn_getDiscountFeeRequestList');
  if (listArr.length < 1) {
    return null;
  }
  for (var i = 0; i < listArr.length; i++) {
    // var child = {};

    /* select */
    // var keySelect = listArr[i].querySelector('select[name=discountFeeKey]');

    /* 改成checkbox */
    var keyCheckboxList = listArr[i].querySelectorAll('div.discountFeeKey input[type="checkbox"]');
    var typeSelect = listArr[i].querySelector('select[name=discountFeeType]');
    var discountFeeType = typeSelect.options[typeSelect.selectedIndex].getAttribute('data-key');
    var discountFeeValue = listArr[i].querySelector('input[name=discountFeeValue]').value;

    /* select prop: */
    // var discountFeeKey = keySelect.options[keySelect.selectedIndex].getAttribute('data-feeId');
    // var discountFeeKeyName = listArr[i].querySelector('select[name=discountFeeKey]').value;
    // child.discountFeeType = discountFeeType;
    // child.discountFeeKey = discountFeeKey;
    // child.discountFeeKeyName = discountFeeKeyName;
    // child.discountFeeValue = discountFeeValue;
    // result.push(child);

    /* 改成checkbox prop: */
    keyCheckboxList.forEach(function (cb) {
      if (cb.checked) {
        var data = {};
        data.discountFeeType = discountFeeType;
        data.discountFeeKey = cb.getAttribute('data-feeid');
        data.discountFeeKeyName = cb.getAttribute('data-feeshortnm');
        data.discountFeeValue = discountFeeValue;
        result.push(data);
      }
    });
  }
  var inputFeerate = document.querySelector('input[name=feerate]').value;
  if (inputFeerate) {
    result.push({
      discountFeeType: 'rate',
      discountFeeValue: $.trim(inputFeerate)
    });
  }
  return result;
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\FormValidate.js":
/*!*******************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\FormValidate.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormValidate)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.string.trim.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.trim.js");
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__);


function FormValidate() {}
FormValidate.prototype.validator = function () {
  var form = document.getElementById('dataForm');
  var mark = form.getAttribute('data-vld');
  switch (mark) {
    default:
      throw new Error('form参数没有合适的data-vld属性');
    case 'station_billsSetting_addRule':
      return FormValidate.station_billsSetting_addRule();
    // break;
    case 'another':
      return function () {
        console.log('111');
      };
  }
};
FormValidate.station_billsSetting_addRule = function () {
  var inp_billName = document.getElementById('billName');
  var inp_billName_maxWords = 20;
  var inp_billName_maxWordsText = '最多输入' + inp_billName_maxWords + '字';
  return {
    bindFormItems: function bindFormItems() {
      var inp = inp_billName;
      var maxWords = inp_billName_maxWords;
      var maxWordsText = inp_billName_maxWordsText;
      if (!inp) return;
      inp.setAttribute('maxlength', maxWords);
      inp.setAttribute('placeholder', maxWordsText);
      inp.setAttribute('uk-tooltip', 'title:' + maxWordsText + '; pos: top-right');
      inp.setAttribute('autofocus', 'autofocus');
      inp.focus();
      // UIkit.tooltip(inp).show();
      inp.addEventListener('blur', function () {
        FormValidate.inp_checkNull(this, maxWordsText);
      });
      inp.addEventListener('change', function () {
        FormValidate.inp_limitLength(this, maxWords);
      });
    },
    checkCheckboxes: function checkCheckboxes() {
      var boo = false;
      var checkboxes = document.querySelectorAll('input[type=checkbox].linkLabel');
      for (var i = 0; i < checkboxes.length; i++) {
        var checkbox = checkboxes[i];
        if (checkbox.checked) {
          boo = true;
          break;
        }
      }
      if (!boo) UIkit.notification("请在多选项目中选择至少一个类型", 'warning');
      return boo;
    },
    submitBoo: function submitBoo() {
      FormValidate.inp_limitLength(inp_billName, inp_billName_maxWords);
      var boos = [];
      boos.push(FormValidate.inp_checkNull(inp_billName, inp_billName_maxWordsText));
      boos.push(this.checkCheckboxes());
      return FormValidate.passToSubmit(boos);
    }
  };
};
FormValidate.inp_checkNull = function (inp, originText) {
  var changeText = '此项不能为空';
  if (!inp.value) {
    inp.classList.add('uk-form-danger');
    inp.setAttribute('placeholder', changeText);
    inp.setAttribute('uk-tooltip', 'title:' + changeText + '; pos: top-right');
    UIkit.tooltip(inp).show();
    return false;
  } else {
    inp.classList.remove('uk-form-danger');
    inp.setAttribute('uk-tooltip', 'title:' + originText + '; pos: top-right');
    return true;
  }
};
FormValidate.inp_limitLength = function (inp, maxlen) {
  var trimValue = $.trim(inp.value);
  if (trimValue.length > maxlen) {
    inp.value = trimValue.slice(0, maxlen);
  } else {
    inp.value = trimValue;
  }
};
FormValidate.passToSubmit = function (boosArr) {
  for (var i = 0; i < boosArr.length; i++) {
    var boo = boosArr[i];
    if (!boo) {
      return boo;
    } else {
      continue;
    }
  }
  return true;
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js":
/*!*************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\Global.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.match.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.match.js");
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }














// Polyfill:
if (!Array.isArray) {
  Array.isArray = function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
}
var Glob_fn = {
  errorHandler: function errorHandler(error, callback) {
    var errMsg = error ? error : '未知错误';
    if (console) {
      console.error('错误信息IN_CONSOLE: ', errMsg);
    }
    if (UIkit) {
      try {
        UIkit.modal.alert(errMsg).then(callback);
      } catch (e) {
        alert(errMsg);
      }
    } else {
      alert(errMsg);
    }
  },
  inheritPrototype: function inheritPrototype(superType, subType) {
    // 继承函数：
    var prototype = Object(superType.prototype); //创建对象
    prototype.constructor = subType; //增强对象
    subType.prototype = prototype; //指定对象
  },

  isJSON: function isJSON(str) {
    if (typeof str !== "string") return false;
    try {
      var object = JSON.parse(str);
      if (object && _typeof(object) === "object") {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      /* 不处理 */
    }
  },
  isDOM: function isDOM(item) {
    return typeof HTMLElement === 'function' ? item instanceof HTMLElement : item && _typeof(item) === 'object' && item.nodeType === 1 && typeof item.nodeName === 'string';
  },
  initMain: function initMain() {
    var main = document.getElementById('dpfMain');
    var headerH = 73;
    var navH = 40;
    var footerH = 90;
    // var browserH = window.outerHeight
    var browserVisibleH = window.innerHeight;
    // console.log(browserH, browserVisibleH)
    var dH = browserVisibleH - headerH - navH - footerH;
    main.setAttribute("style", "min-height:" + dH + "px");
  },
  initNav: function initNav() {
    var btns = document.querySelectorAll('#dpfNav button');
    for (var i = 0; i < btns.length; i++) {
      btns[i].addEventListener('click', function () {
        event.stopPropagation();
        var thisBtnCls = this.querySelector('i').classList;
        var dropdown = this.nextElementSibling;
        if (thisBtnCls.contains('fa-caret-down')) {
          for (var j = 0; j < btns.length; j++) {
            btns[j].querySelector('i').setAttribute('class', 'fa fa-caret-down');
            btns[j].nextElementSibling.setAttribute('style', 'display:none');
          }
          thisBtnCls.remove('fa-caret-down');
          thisBtnCls.add('fa-caret-up');
          dropdown.setAttribute('style', 'display:block');
        } else {
          this.blur();
          thisBtnCls.remove('fa-caret-up');
          thisBtnCls.add('fa-caret-down');
          dropdown.setAttribute('style', 'display:none');
        }
      }, false);
    }
    document.addEventListener('click', function () {
      for (var i = 0; i < btns.length; i++) {
        btns[i].nextElementSibling.setAttribute('style', 'display:none');
        btns[i].querySelector('i').setAttribute('class', 'fa fa-caret-down');
      }
    });
  },
  loading: {
    show: function show() {
      if (document.getElementById('loadingOverlay')) return;
      var body = document.querySelector('body');
      var main = document.querySelector('main');
      var parentNode = main ? main : body;
      var div = document.createElement('div');
      div.setAttribute('id', 'loadingOverlay');
      // div.setAttribute('uk-sticky', '');
      div.style.position = 'fixed';
      div.setAttribute('class', 'uk-position-cover uk-overlay uk-overlay-default uk-flex uk-flex-center uk-flex-middle');
      div.innerHTML = '<i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i><span class="sr-only">Loading...</span>';
      parentNode.appendChild(div);
      return div;
    },
    hide: function hide() {
      var div = document.querySelectorAll('#loadingOverlay');
      if (!div || div.length === 0) {
        throw new Error('没有loading遮罩');
      }
      if (div.length > 1) {
        throw new Error('存在多个loading遮罩');
      }
      for (var i = 0; i < div.length; i++) {
        div[i].parentNode.removeChild(div[i]);
      }
    }
  },
  checkboxAndRadio: {
    getBindingLabel: function getBindingLabel(childNode) {
      var label = null;
      var child = childNode;
      var maxCount = 5;
      do {
        label = child.parentNode;
        child = label;
        maxCount--;
      } while (label.tagName !== 'LABEL' && maxCount > 0);
      if (label.tagName !== 'LABEL') {
        throw new Error('没有label节点');
      }
      return label;
    },
    setBindingLabels: function setBindingLabels(radioSet) {
      var parentProp = this;
      // var labels = labelSet? labelSet: getLabelSet(radioSet);
      return function () {
        for (var i = 0; i < radioSet.length; i++) {
          var radio = radioSet[i];
          var label = parentProp.getBindingLabel(radio);
          label.classList.remove('button-primary');
        }
        for (var _i = 0; _i < radioSet.length; _i++) {
          var radio2 = radioSet[_i];
          if (radio2.checked) {
            parentProp.getBindingLabel(radio2).classList.add('button-primary');
          }
        }
        // console.log(this.getRadioValue(radioSet))
      };
    },

    initActiveLabel: function initActiveLabel(radio) {
      var parentProp = this;
      if (radio.hasAttribute('checked')) {
        parentProp.getBindingLabel(radio).classList.add('button-primary');
      } else {
        parentProp.getBindingLabel(radio).classList.remove('button-primary');
      }
    },
    getRadioValue: function getRadioValue(radioSet) {
      var value = null;
      for (var i = 0; i < radioSet.length; i++) {
        var radio = radioSet[i];
        if (radio.checked) {
          value = radio.value;
        }
      }
      return value;
    }
  },
  WdateInit: function WdateInit(startTimeId, endTimeId, args) {
    var sta = document.getElementById(startTimeId);
    var end = document.getElementById(endTimeId);
    var dateFmt = args && args.dateFmt ? args.dateFmt : 'yyyy-MM-dd';
    if (dateFmt === 'yyyy年MM月') {
      setVelInp(startTimeId);
      setVelInp(endTimeId);
    }
    var minDate = args && args.minDate ? args.minDate : false;
    var maxDate = args && args.maxDate ? args.maxDate : false;
    sta.addEventListener('click', function () {
      var config_s = {
        dateFmt: dateFmt,
        maxDate: '#F{$dp.$D(\'' + endTimeId + '\')}'
      };
      if (dateFmt === 'yyyy年MM月') {
        config_s.vel = startTimeId + '_2';
        config_s.realDateFmt = args.realDateFmt ? args.realDateFmt : 'yyyyMMdd';
      }
      if (minDate) config_s.minDate = minDate;
      if (maxDate === 'today') config_s.maxDate = '#F{$dp.$D(\'' + endTimeId + '\') || \'%y-%M-%d\'}';
      WdatePicker(config_s);
    });
    end.addEventListener('click', function () {
      var config_e = {
        dateFmt: dateFmt,
        minDate: '#F{$dp.$D(\'' + startTimeId + '\')}'
      };
      if (dateFmt === 'yyyy年MM月') {
        config_e.vel = endTimeId + '_2';
        config_e.realDateFmt = args.realDateFmt ? args.realDateFmt : 'yyyyMMdd';
      }
      if (minDate) config_e.minDate = '#F{$dp.$D(\'' + startTimeId + '\') || \'' + minDate + '\'}';
      if (maxDate === 'today') config_e.maxDate = '%y-%M-%d';
      WdatePicker(config_e);
    });
    function setResetButton(input) {
      var btn = document.querySelector('form input[type=reset]');
      if (!btn) return;
      btn.addEventListener('click', function () {
        input.value = '';
      });
    }
    function setVelInp(id) {
      var inp = document.createElement('input');
      var src = document.getElementById(id);
      var srcName = src.getAttribute('name');
      var data = src.getAttribute('data-value');
      src.removeAttribute('name');
      inp.setAttribute('name', srcName);
      inp.setAttribute('id', id + '_2');
      inp.setAttribute('type', 'hidden');
      if (data) {
        inp.setAttribute('value', data);
        src.setAttribute('value', data.slice(0, 4) + '年' + data.slice(4, 6) + '月');
      }
      document.getElementById(id).parentNode.appendChild(inp);
      setResetButton(inp);
      return inp;
    }
  },
  banBackSpace: function banBackSpace(event) {
    var ev = event || window.event;
    var obj = ev.target || ev.srcElement;
    var t = obj.type || obj.getAttribute('type');
    var vReadOnly = obj.getAttribute('readonly');
    vReadOnly = vReadOnly == '' ? false : vReadOnly;
    var flag1 = ev.keyCode == 8 && (t == 'password' || t == 'text' || t == 'number' || t == 'textarea') && vReadOnly != undefined ? true : false;
    var flag2 = ev.keyCode == 8 && t != 'password' && t != 'text' && t != 'number' && t != 'textarea' ? true : false;
    if (flag2) {
      return false;
    }
    if (flag1) {
      return false;
    }
  },
  submVirtForm: function submVirtForm(url, obj) {
    var form = document.createElement('form');
    form.style.display = 'none';
    form.method = 'post';
    form.action = url;
    for (var key in obj) {
      var inp = document.createElement('input');
      inp.type = 'hidden';
      inp.name = key;
      inp.value = obj[key];
      form.appendChild(inp);
    }
    document.body.appendChild(form);
    form.submit();
    document.body.removeChild(form);
  },
  initDiscoutTypeSel: function initDiscoutTypeSel(dataList, parentSelect) {
    var op0 = document.createElement('option');
    op0.setAttribute('value', 'TYPE');
    op0.innerText = '全部';
    parentSelect.appendChild(op0);
    for (var i = 0; i < dataList.length; i++) {
      var op = document.createElement('option');
      op.setAttribute('value', dataList[i].key);
      op.innerText = dataList[i].value;
      parentSelect.appendChild(op);
    }
  },
  initSupplierSel: function initSupplierSel(dataList, parentSelect) {
    var op0 = document.createElement('option');
    op0.setAttribute('value', '');
    op0.innerText = '全部';
    parentSelect.appendChild(op0);
    for (var i = 0; i < dataList.length; i++) {
      var op = document.createElement('option');
      op.setAttribute('value', dataList[i].supplierId);
      op.innerText = dataList[i].supplierNameChn;
      parentSelect.appendChild(op);
    }
  },
  initDiscountDetails: function initDiscountDetails(data) {
    document.getElementById('discountPolicyName').value = data.discountPolicyName;
    document.getElementById('status').value = data.statusDesc;
    document.getElementById('startTime').value = data.startTime;
    document.getElementById('endTime').value = data.endTime;
    document.getElementById('discountType').value = data.discountTypeDesc;
    document.getElementById('minCharge').value = data.minCharge;
    document.getElementById('feerateValue').value = getFeerate();
    function getFeerate() {
      var list = data.discountFeeRequestList;
      if (list.length < 1) return null;
      var result = '';
      for (var i = 0; i < list.length; i++) {
        if (list[i].discountFeeType == 'rate') {
          result = list[i].discountFeeValue;
        }
      }
      return result;
    }
    // 输出品名：
    var cargoNameWrap = document.getElementById('cargoName');
    if (data.cargoName) {
      var label = document.createElement('label');
      label.innerText = '优惠品名项';
      cargoNameWrap.appendChild(label);
      var div = document.createElement('div');
      div.setAttribute('class', 'uk-margin-small uk-margin-small-left');
      div.innerText = data.cargoName;
      cargoNameWrap.appendChild(div);
    } else if (cargoNameWrap.innerHTML) {
      cargoNameWrap.innerHTML = '';
    }
    // 输出discountValue：
    var discountValueWrap = document.getElementById('discountValue');
    if (data.discountValue) {
      var _label = document.createElement('label');
      if (data.discountType == 'F') _label.innerText = '优惠航班';else if (data.discountType == 'WP') _label.innerText = '优惠航点';else if (data.discountType == 'G') _label.innerText = '优惠支持方式';else _label.innerText = '优惠值';
      discountValueWrap.appendChild(_label);
      var _div = document.createElement('div');
      _div.setAttribute('class', 'uk-margin-small uk-margin-small-left');
      _div.innerText = data.discountValue;
      discountValueWrap.appendChild(_div);
    } else if (discountValueWrap.innerHTML) {
      discountValueWrap.innerHTML = '';
    }
    var table = document.getElementById('discountFeeRequestList');
    var tbody = getTbody();
    table.appendChild(tbody);
    function getTbody() {
      var tbody = document.createElement('tbody');
      var list = data.discountFeeRequestList;
      for (var i = 0; i < list.length; i++) {
        var tr = document.createElement('tr');
        if (list[i].discountFeeType == 'rate') {
          continue;
        } else {
          var td1 = document.createElement('td');
          td1.innerText = list[i].discountFeeKeyName;
          var td2 = document.createElement('td');
          td2.innerText = list[i].discountFeeTypeDesc;
          var td3 = document.createElement('td');
          td3.innerText = list[i].discountFeeValue;
          tr.appendChild(td1);
          tr.appendChild(td2);
          tr.appendChild(td3);
          tbody.appendChild(tr);
        }
      }
      return tbody;
    }
  },
  Table: {
    showNoData: function showNoData(colspan) {
      var tr0 = document.createElement('tr');
      var td0 = document.createElement('td');
      td0.innerText = '无数据';
      td0.setAttribute('colspan', colspan);
      td0.setAttribute('class', 'uk-text-center');
      tr0.appendChild(td0);
      // 清空分页组件：
      var pag = document.querySelector('ul[data-for=dataTable]');
      pag.innerHTML = '';
      return tr0;
    },
    getThTr: function getThTr(table) {
      var thead = table.querySelector('thead');
      thead.innerHTML = '';
      var trInThead = document.createElement('tr');
      thead.appendChild(trInThead);
      // thead.style.backgroundColor = 'white';
      // thead.setAttribute('uk-sticky', '');
      return trInThead;
    },
    setTh: function setTh(parentTr, content, showBoo) {
      var th = document.createElement('th');
      var show = showBoo === undefined ? true : showBoo;
      if (_typeof(content) == 'object') {
        th.appendChild(content);
      } else {
        th.innerText = content;
      }
      if (!show) th.setAttribute('hidden', '');
      parentTr.appendChild(th);
      return th;
    },
    setTd: function setTd(parentTr, data, showBoo, replaceStr) {
      var td = document.createElement('td');
      var show = showBoo === undefined ? true : showBoo;
      var replace = replaceStr ? replaceStr : '-';
      if (typeof data === 'string' || typeof data === 'number') {
        if (data) {
          var span = document.createElement('span');
          span.style.display = 'inline-block';
          span.innerHTML = data;
          td.appendChild(span);
        } else {
          setNoData(td, replace);
        }
      } else if (Glob_fn.isDOM(data)) {
        td.appendChild(data);
      } else if (Array.isArray(data)) {
        if (data.length < 1) {
          setNoData(td, replace);
        } else {
          for (var i = 0; i < data.length; i++) {
            td.appendChild(data[i]);
          }
        }
      } else {
        setNoData(td, replace);
      }
      if (!show) td.setAttribute('hidden', '');
      parentTr.appendChild(td);
      return td;
      function setNoData(td, replace) {
        td.innerHTML = replace;
        td.setAttribute('class', 'uk-text-center');
      }
    },
    setTdSerial: function setTdSerial(parentTr, number, pageNumber, pageSize) {
      var tdSerial = document.createElement('td');
      parentTr.appendChild(tdSerial);
      tdSerial.innerText = number + 1 + (Number(pageNumber) - 1) * Number(pageSize);
      return tdSerial;
    },
    hideSome: function hideSome(td, width) {
      var span = td.querySelector('span');
      if (!span) return;
      var maxW = width ? width : 200;
      // var byteLength = td.innerText.byteLength();
      var computedWidth = window.getComputedStyle ? window.getComputedStyle(span, null).getPropertyValue('width').slice(0, -2) : span.currentStyle.getPropertyValue('width').slice(0, -2);
      if (Number(computedWidth) < maxW) return td;
      td.style.overflow = 'hidden';
      td.style.textOverflow = 'ellipsis';
      td.style.maxWidth = maxW + 'px';
      td.style.cursor = 'pointer';
      td.innerText = span.innerText;
      td.setAttribute('uk-tooltip', td.innerText);
      return td;
    },
    trHideSome: function trHideSome(tr, max) {
      var tds = tr.querySelectorAll('td');
      for (var i = 0; i < tds.length; i++) {
        var td = tds[i];
        this.hideSome(td, max);
      }
      return tr;
    },
    tbodyHideSome: function tbodyHideSome() {
      var table = document.getElementById('dataTable');
      if (!table) return;
      if (!table.hasAttribute('data-hideSome')) return;
      var prop = table.getAttribute('data-hideSome');
      var size = isNaN(Number(prop)) ? null : Number(prop);
      var tbody = table.querySelector('tbody');
      var trs = tbody.querySelectorAll('tr');
      if (trs.length < 1) return;
      for (var i = 0; i < trs.length; i++) {
        var tr = trs[i];
        this.trHideSome(tr, size);
      }
      return tbody;
    },
    buildAjaxTitle: function buildAjaxTitle(titleData, parentNode) {
      var colCount = 0;
      for (var i = 0; i < titleData.length; i++) {
        var list = titleData[i];
        if (list.feeShortNm === '处置费') {
          var th0 = document.createElement('th');
          th0.innerText = '地面费率';
          th0.setAttribute('data-col', colCount);
          th0.setAttribute('class', 'feeItemTitle');
          colCount++;
          parentNode.appendChild(th0);
        }
        var th = document.createElement('th');
        th.innerText = list.feeShortNm;
        th.setAttribute('data-col', colCount);
        colCount++;
        th.setAttribute('class', 'feeItemTitle');
        parentNode.appendChild(th);
      }
    },
    getAjaxTitleValue: function getAjaxTitleValue(data, key) {
      var arr = [];
      for (var i = 0; i < data.length; i++) {
        var value = data[i][key].toString().replace(/-/g, '#').match(/-?([1-9]\d*(\.\d*)*|0\.[1-9]\d*)/g);
        if (data[i].feeShortNm === '处置费') {
          arr.push(['specialPos']);
        }
        arr.push(value);
      }
      return arr;
    },
    getAjaxTitleData: function getAjaxTitleData(title, feeIdArr, dataList) {
      var arr = title ? [title] : [];
      for (var i = 0; i < feeIdArr.length; i++) {
        var data = '-';
        var feeIdGroup = feeIdArr[i];
        for (var j = 0; j < feeIdGroup.length; j++) {
          var titleFeeId = feeIdGroup[j];
          for (var k = 0; k < dataList.length; k++) {
            var listFeeId = dataList[k].feeId;
            var listValue = dataList[k].fee === null ? '-' : dataList[k].fee;
            var listRate = dataList[k].feerate;
            var listRateFlag = dataList[k].feeShortNM === '处置费';
            if (titleFeeId == listFeeId) {
              if (listRateFlag) {
                arr.pop();
                arr.push(listRate);
              }
              data = listValue;
            }
          }
        }
        arr.push(data);
      }
      if (title) {
        return arr;
      } else {
        return {
          data: arr,
          title: false
        };
      }
    },
    getAjaxTitleObject: function getAjaxTitleObject(feeIdArr, dataList) {
      var arr = [];
      for (var i = 0; i < feeIdArr.length; i++) {
        var feeIdGroup = feeIdArr[i];
        for (var j = 0; j < feeIdGroup.length; j++) {
          var titleFeeId = feeIdGroup[j];
          for (var k = 0; k < dataList.length; k++) {
            var listFeeId = dataList[k].feeId;
            if (titleFeeId == listFeeId) {
              var obj = dataList[k];
            }
          }
        }
        if (obj !== null && obj !== undefined) {
          arr.push(obj);
          obj = null;
        }
      }
      return arr;
    },
    buildValueWithAjaxTitle: function buildValueWithAjaxTitle(linedata, parentNode) {
      var isArr = Array.isArray(linedata);
      var data = isArr ? linedata : linedata.data;
      for (var i = 0; i < data.length; i++) {
        var td = document.createElement('td');
        td.innerText = data[i];
        if (!isArr) {
          td.setAttribute('data-col', i);
        } else {
          if (i >= 1) td.setAttribute('data-col', i - 1);
        }
        parentNode.appendChild(td);
      }
    },
    hideUnvalued: function hideUnvalued(pointedTable, checkValue) {
      try {
        var table = pointedTable ? pointedTable : document.getElementById('dataTable');
        var flag = checkValue ? checkValue : '-';
        var ths = table.querySelectorAll('th.feeItemTitle');
        if (!ths) return;
        var colCount = ths.length;
        for (var i = 0; i < colCount; i++) {
          var column = table.querySelectorAll('td[data-col="' + i + '"]');
          var unvaluedCol = '';
          for (var j = 0; j < column.length; j++) {
            unvaluedCol = true;
            if (column[j].innerText !== flag) {
              unvaluedCol = false;
              break;
            }
          }
          if (unvaluedCol) {
            for (var k = 0; k < column.length; k++) {
              column[k].setAttribute('hidden', '');
            }
            table.querySelector('th[data-col="' + i + '"]').setAttribute('hidden', '');
          }
        }
      } catch (error) {
        console.error(error);
        return;
      }
    },
    checkSize: function checkSize(pointedTable) {
      try {
        var table = pointedTable ? pointedTable : document.getElementById('dataTable');
        var div = table.parentNode;
        var container = document.querySelector('.maincontent');
        var tabwidth = window.getComputedStyle(table, null).getPropertyValue('width').slice(0, -2);
        var divwidth = window.getComputedStyle(div, null).getPropertyValue('width').slice(0, -2);
        if (Number(tabwidth) > Number(divwidth)) {
          container.classList.remove('normalWidth');
          container.classList.add('largeWidth');
        }
      } catch (error) {
        console.error(error);
        return;
      }
    },
    getCheckbox: function getCheckbox(ifAll) {
      var lab = document.createElement('label');
      lab.setAttribute('class', 'void');
      var chb = document.createElement('input');
      lab.appendChild(chb);
      chb.setAttribute('type', 'checkbox');
      chb.setAttribute('class', 'uk-checkbox');
      if (ifAll) {
        chb.setAttribute('id', 'selectAll');
        chb.setAttribute('disabled', '');
      } else {
        chb.setAttribute('class', 'cb_child');
      }
      chb.addEventListener('click', function () {
        var btn = document.getElementById('multiBtn');
        if (!btn) {
          throw new Error('没有对应按键');
        }
        if (this.checked) {
          btn.removeAttribute('disabled');
        } else {
          btn.setAttribute('disabled', '');
        }
      });
      return lab;
    },
    linkCheckboxes: function linkCheckboxes(selAll, selChildren) {
      selAll.addEventListener('click', function () {
        if (selAll.checked) {
          for (var i = 0; i < selChildren.length; i++) {
            if (!selChildren[i].checked) {
              selChildren[i].click();
            }
          }
        } else {
          for (var _i2 = 0; _i2 < selChildren.length; _i2++) {
            if (selChildren[_i2].checked) {
              selChildren[_i2].click();
            }
          }
        }
      });
    },
    addCheckedToList: function addCheckedToList(chb, list) {
      for (var i = 0; i < chb.length; i++) {
        if (chb[i].checked) {
          var data = chb[i].getAttribute('data-checked');
          list.push(data);
        } else {
          continue;
        }
      }
    },
    hideTable: function hideTable() {
      var tab = document.getElementById('dataTable');
      if (!tab) return;
      tab.setAttribute('hidden', '');
    },
    showTable: function showTable() {
      var tab = document.getElementById('dataTable');
      if (!tab) return;
      tab.removeAttribute('hidden');
    }
  },
  getDictArg_forQueryBills: function getDictArg_forQueryBills() {
    var tType = document.querySelector('input[name=type]').value;
    if (!tType) {
      throw new Error('没有type参数');
    }
    if (tType == '1' || tType == '2') {
      // 直达时货运类型查询
      return 'EXPIMP';
    } else if (tType == '3') {
      // 中转时货运类型
      return 'TRANSFERTYPE';
    } else if (tType == '4') {
      // 快件货运类型
      return 'EXPMAIL';
    }
  },
  setSelDefaultOption: function setSelDefaultOption(select, text, value) {
    var option0 = document.createElement('option');
    option0.setAttribute('value', value);
    option0.innerText = text;
    select.appendChild(option0);
  },
  setSelFromDict: function setSelFromDict(select, data) {
    for (var i = 0; i < data.length; i++) {
      var option = document.createElement('option');
      option.innerText = data[i].value;
      option.value = data[i].key;
      select.appendChild(option);
    }
  },
  setInAndOut: function setInAndOut(res) {
    var data = res.data;
    if (data == null || data.length == 0) {
      throw new Error('字典接口无数据');
    }
    var select = document.querySelector('select[name=inAndOut]');
    this.setSelDefaultOption(select, '全部', '-1');
    try {
      this.setSelFromDict(select, data);
    } catch (e) {
      throw new Error(e);
    }
  },
  setOpedepartId: function setOpedepartId(res) {
    var data = res.data;
    if (data == null || data.length == 0) {
      throw new Error('字典接口无数据');
    }
    var select = document.querySelector('select[name=opedepartId]');
    this.setSelDefaultOption(select, '全部', '-1');
    try {
      this.setSelFromDict(select, data);
    } catch (e) {
      throw new Error(e);
    }
  },
  getOrderTime: function getOrderTime() {
    // 账单查看界面获取账期
    try {
      return {
        orderTimeStart: document.querySelector('input[name=orderTimeStart]').value,
        orderTimeEnd: document.querySelector('input[name=orderTimeEnd]').value
      };
    } catch (error) {
      if (console) console.error(error);
      return {
        orderTimeStart: '',
        orderTimeEnd: ''
      };
    }
  },
  setPostLink: function setPostLink(links, postData) {
    try {
      if (!this.isDOM(links) && links.length) {
        for (var i = 0; i < links.length; i++) {
          links[i].addEventListener('click', callback);
        }
      } else {
        links.addEventListener('click', callback);
      }
    } catch (error) {
      return;
    }
    function callback(event) {
      event.preventDefault();
      var url = this.getAttribute('href');
      Glob_fn.submVirtForm(url, postData);
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Glob_fn);

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Listbox.js":
/*!**************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\Listbox.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Listbox": () => (/* binding */ Listbox),
/* harmony export */   "initListBox": () => (/* binding */ initListBox)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);

function initListBox() {
  var btnL2R = document.querySelector('#listboxL2R');
  var btnR2L = document.querySelector('#listboxR2L');
  var selectL = document.querySelector('#sourceSelect');
  var selectR = document.querySelector('#destSelect');
  if (selectL && selectR && btnL2R && btnR2L) {
    btnL2R.addEventListener('click', function (e) {
      e.preventDefault();
      listboxMoveacross('sourceSelect', 'destSelect', 'norepeat');
    });
    btnR2L.addEventListener('click', function (e) {
      e.preventDefault();
      listboxMoveacross('destSelect', 'sourceSelect');
    });
  }
  function listboxMoveacross(sourceID, destID, type) {
    var src = document.getElementById(sourceID);
    var dest = document.getElementById(destID);
    for (var count = 0; count < src.options.length; count++) {
      if (src.options[count].selected == true) {
        var option = src.options[count];
        var attrs = option.attributes;
        var newOption = document.createElement("option");
        for (var i = 0; i < attrs.length; i++) {
          newOption.setAttribute(attrs[i].name, attrs[i].value);
        }
        newOption.value = option.value;
        newOption.text = option.text;
        newOption.selected = true;
        // 品名查询时(左至右)：
        if (document.querySelector('#cargoNameListbox') || document.getElementById('specialCargoNameListbox')) {
          var id1 = newOption.getAttribute('data-cargoNo');
          var destoptions = dest.querySelectorAll('option');
          if (destoptions.length > 0) {
            for (var j = 0; j < destoptions.length; j++) {
              var id2 = destoptions[j].getAttribute('data-cargoNo');
              if (type) {
                if (id1 === id2) {
                  UIkit.modal.alert('选择项在优惠品名列表中已存在');
                  return;
                }
              }
            }
          }
        }
        try {
          dest.add(newOption, null); //Standard
          src.remove(count, null);
        } catch (error) {
          dest.add(newOption); // IE only
          src.remove(count);
        }
        count--;
      }
    }
  }
}
function Listbox() {}
Listbox.prototype.getOptions_cargoName = function (response, container) {
  try {
    var data = response.data;
    if (data.length < 1) {
      UIkit.modal.alert('没有相关的品名');
      return;
    }
    container.innerHTML = '';
    for (var i = 0; i < data.length; i++) {
      var op = document.createElement('option');
      for (var key in data[i]) {
        if (key == 'cargoNm') {
          op.innerText = data[i][key];
          op.setAttribute('data-' + key, data[i][key]);
        }
        op.setAttribute('data-' + key, data[i][key]);
      }
      container.appendChild(op);
    }
  } catch (err) {
    alert(err);
    console.error(err);
  }
};
Listbox.prototype.getOptions_discountName = function (response, listboxEl, customerId) {
  var sel_sou = listboxEl.querySelector('#sourceSelect');
  var sel_des = listboxEl.querySelector('#destSelect');
  sel_sou.innerHTML = '';
  sel_des.innerHTML = '';
  sel_des.setAttribute('data-customerId', customerId);
  var data = response.data;
  if (data.length < 1) {
    return;
  }
  var optionArr = [];
  for (var i = 0; i < data.length; i++) {
    var op = document.createElement('option');
    for (var key in data[i]) {
      if (key == 'discountPolicyName') {
        op.innerText = data[i][key];
      } else {
        op.setAttribute('data-' + key, data[i][key]);
      }
    }
    optionArr.push[op];
    sel_sou.appendChild(op);
  }
  return optionArr;
};
Listbox.prototype.postData_discountName = function () {
  // var sel_sou = document.querySelector('#sourceSelect');
  var sel_des = document.querySelector('#destSelect');
  var customerId = sel_des.getAttribute('data-customerId');
  var postData = {
    customerId: customerId
  };
  var discountPolicyIds = [];
  var ops = sel_des.querySelectorAll('option');
  if (ops.length < 1) {
    return null;
  }
  for (var i = 0; i < ops.length; i++) {
    var discountPolicyId = ops[i].getAttribute('data-discountPolicyId');
    discountPolicyIds.push(discountPolicyId);
  }
  postData.discountPolicyIds = discountPolicyIds;
  return postData;
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Login.js":
/*!************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\Login.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Page_login": () => (/* binding */ Page_login),
/* harmony export */   "initLogin_coverPage": () => (/* binding */ initLogin_coverPage),
/* harmony export */   "initLogin_initQuirBtn": () => (/* binding */ initLogin_initQuirBtn),
/* harmony export */   "initLogin_loginFailed": () => (/* binding */ initLogin_loginFailed),
/* harmony export */   "initLogin_page": () => (/* binding */ initLogin_page)
/* harmony export */ });
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");
/* harmony import */ var _AjaxManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AjaxManager */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AjaxManager.js");


function initLogin_page() {
  try {
    initPage();
  } catch (error) {
    _Global__WEBPACK_IMPORTED_MODULE_0__["default"].errorHandler(error);
    window.location.href = 'https://www.dovepay.com';
  }
  function initPage() {
    initLogin_coverPage();
    var pageFor = document.querySelector('input[name=pagefor]').value;
    var sel_type = document.querySelector('select[name=userType]');
    var inp_accountId = document.querySelector('input[name=accountId]');
    var form = document.getElementById('form_login');
    var inp_userId = document.querySelector('input[name=userId]');
    if (pageFor === 'system') {
      inp_accountId.value = 'system';
      sel_type.value = 'system';
      form.submit();
    } else {
      var url = document.querySelector('input[name=api_role]').value;
      inp_userId.addEventListener('change', function (event) {
        event.preventDefault();
        fetchLoginData();
      });
      fetchLoginData();
    }
    function fetchLoginData() {
      var data = {
        'userId': inp_userId.value
      };
      var inp_accountId = document.querySelector('input[name=accountId]');
      inp_accountId.value = '';
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_1__.fetchData)(url, data, new Page_login().setRole, {
        global: false,
        error: function error(xhr, textStatus /*, error*/) {
          if (console) console.error(textStatus);
          UIkit.modal.alert('发生错误: ' + textStatus).then(initLogin_loginFailed);
        }
      });
    }
  }
}
function initLogin_initQuirBtn() {
  try {
    initPage();
  } catch (error) {
    _Global__WEBPACK_IMPORTED_MODULE_0__["default"].errorHandler(error);
    return;
  }
  function initPage() {
    var quitBtn = document.getElementById('quitBtn');
    quitBtn.addEventListener('click', function () {
      var btn = this;
      UIkit.modal.confirm('确定退出系统?').then(function () {
        try {
          quit(btn);
        } catch (error) {
          _Global__WEBPACK_IMPORTED_MODULE_0__["default"].errorHandler(error);
          return;
        }
      });
      function quit(btn) {
        initLogin_coverPage();
        var url = btn.getAttribute('data-url');
        var userType = document.getElementById('userType').value;
        var data = {
          userType: userType
        };
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_1__.fetchData)(url, data, function (res) {
          try {
            var redirect = res.data.redirect;
            window.location.href = redirect;
          } catch (error) {
            _Global__WEBPACK_IMPORTED_MODULE_0__["default"].errorHandler(error);
            return;
          }
        });
      }
    });
  }
}
function initLogin_coverPage() {
  var div = document.createElement('div');
  div.setAttribute('class', 'uk-position-cover uk-background-muted uk-overlay uk-overlay-default uk-flex uk-flex-center uk-flex-middle');
  var i = document.createElement('i');
  i.setAttribute('class', 'fa fa-circle-o-notch fa-spin fa-3x fa-fw');
  div.appendChild(i);
  var span = document.createElement('span');
  span.setAttribute('class', 'sr-only');
  span.innerText = 'Loading...';
  div.appendChild(span);
  var span2 = document.createElement('span');
  span2.innerText = '正在跳转';
  div.appendChild(span2);
  document.body.appendChild(div);
  return div;
}
function initLogin_loginFailed() {
  try {
    var pageFor = document.querySelector('input[name=pagefor]').value;
    window.location.href = pageFor === 'system' ? document.querySelector('input[name=url_dovemgr]').value : document.querySelector('input[name=url_dovepay]').value;
  } catch (error) {
    window.location.href = 'https://www.dovepay.com';
  }
}
function Page_login() {}
Page_login.prototype.setRole = function (res) {
  try {
    var data = res.data;
    var accountId = data.accountId;
    var type = data.type;
    var inp_accountId = document.querySelector('input[name=accountId]');
    var sel_type = document.querySelector('select[name=userType]');
    var form = document.getElementById('form_login');
    inp_accountId.value = accountId;
    sel_type.value = type;
    if (!!inp_accountId.value && !!sel_type.value) {
      form.submit();
    } else {
      UIkit.modal.alert('参数错误: accountId=' + accountId + ', type=' + type).then(initLogin_loginFailed);
    }
  } catch (error) {
    UIkit.modal.alert('发生错误: ' + error).then(initLogin_loginFailed);
  }
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Message.js":
/*!**************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\Message.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fn_getMes": () => (/* binding */ fn_getMes),
/* harmony export */   "fn_remMes": () => (/* binding */ fn_remMes)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__);







function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function Message(mes, args) {
  // ('My Message is ...', {style: 'primary'})
  this.mes = mes;
  this.style = null; // primary, success, warning, danger
  this.closb = '';
  this.message = '';
  if (args) {
    this.style = args.style;
    this.closb = args.close;
  }
}
Message.prototype.create = function () {
  var headtxt = '',
    maintxt = '',
    mes = this.mes,
    style = this.style,
    closb = this.closb ? this.closb : false,
    cont = document.createElement('div'),
    head = document.createElement('h3'),
    main = document.createElement('p'),
    clos = document.createElement('a');
  if (typeof mes == 'string') {
    maintxt = mes;
    if (style == 'primary') {
      headtxt = '提示';
    }
    if (style == 'success') {
      headtxt = '成功';
    }
    if (style == 'warning') {
      headtxt = '注意';
    }
    if (style == 'danger') {
      headtxt = '警告';
    }
  }
  if (_typeof(mes) == 'object') {
    maintxt = mes.text;
    headtxt = mes.title;
    head.innerHTML = headtxt;
  }
  cont.setAttribute('uk-alert', '');
  clos.setAttribute('class', 'uk-alert-close');
  clos.setAttribute('uk-close', '');
  if (style) {
    cont.setAttribute('class', 'uk-alert-' + style);
  }
  head.innerHTML = headtxt;
  main.innerHTML = maintxt;
  if (!closb) {
    cont.appendChild(clos);
  }
  cont.appendChild(head);
  cont.appendChild(main);
  this.message = cont;
  return cont;
};
function fn_getMes(mes, args) {
  var m = new Message(mes, args),
    message = m.create();
  return message;
}
function fn_remMes(node) {
  if (!node) {
    return false;
  } else {
    var par = node.parentNode;
    if (par) par.removeChild(node);else return false;
  }
}
// fn_getMes({title: '信息标题', text: '信息主体'}, {style: 'primary', close: false}*);
// fn_getMes('信息主体', {style: 'primary'});

// TEST:
// var mes1 = fn_getMes({title: '信息标题', text: '信息主体'}, {style: 'primary', close: true}),
//     mes2 = fn_getMes('信息主体', {style: 'primary'}),
//     mes3 = fn_getMes('信息主体', {style: 'success'}),
//     mes4 = fn_getMes('信息主体', {style: 'warning'}),
//     mes5 = fn_getMes('信息主体', {style: 'danger'});
//   document.querySelector('.maincontent').appendChild(mes1);
//   // fn_remove(mes1);
//   document.querySelector('.maincontent').appendChild(mes2);
//   document.querySelector('.maincontent').appendChild(mes3);
//   document.querySelector('.maincontent').appendChild(mes4);
//   document.querySelector('.maincontent').appendChild(mes5);

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Paginate.js":
/*!***************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\Paginate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ fn_initPaginate)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_string_link_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.string.link.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.link.js");
/* harmony import */ var core_js_modules_es_string_link_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_link_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");



function fn_initPaginate(res, pageNumber, pageSize, fetchFn, callback, postDataHandler) {
  _Global__WEBPACK_IMPORTED_MODULE_2__["default"].Table.hideUnvalued();
  _Global__WEBPACK_IMPORTED_MODULE_2__["default"].Table.showTable();
  _Global__WEBPACK_IMPORTED_MODULE_2__["default"].Table.checkSize();
  _Global__WEBPACK_IMPORTED_MODULE_2__["default"].Table.tbodyHideSome();
  if (res.data.totalPage > 1) {
    var p = new Paginate();
    p.showPagnition(res.data.totalPage, pageNumber, pageSize, fetchFn, callback, postDataHandler);
  } else {
    var wrap = document.querySelector('ul[data-for=dataTable]');
    if (wrap) wrap.innerHTML = '';
  }
}
function Paginate() {}
Paginate.prototype.showPagnition = function (totalPage, pageNumber, pageSize, fetchFn, callback, postDataHandler) {
  totalPage = Number(totalPage);
  pageNumber = Number(pageNumber);
  pageSize = Number(pageSize);
  var wrap = document.querySelector('ul[data-for=dataTable]');
  wrap.innerHTML = '';
  var url = document.querySelector('input[name=api_forTable]').value;
  if (pageNumber > 1) {
    var link_pre = Paginate.getPagi_liPre(wrap);
    link_pre.addEventListener('click', function (event) {
      event.preventDefault();
      var data = getPostData(pageNumber - 1, postDataHandler);
      fetchFn.call(this, url, data, callback);
    });
  }
  for (var i = 0; i < totalPage; i++) {
    var li = void 0;
    if (i == pageNumber - 1) {
      li = Paginate.getPagi_liActive(pageNumber);
    } else {
      var obj = Paginate.getPagi_liNormal(i + 1);
      var link = obj.link;
      li = obj.li;
      link.addEventListener('click', function (event) {
        event.preventDefault();
        var data = getPostData(this.innerText, postDataHandler);
        fetchFn.call(this, url, data, callback);
      });
    }
    wrap.appendChild(li);
  }
  if (pageNumber < totalPage) {
    var link_nex = Paginate.getPagi_liNext(wrap);
    link_nex.addEventListener('click', function (event) {
      event.preventDefault();
      var data = getPostData(pageNumber + 1, postDataHandler);
      fetchFn.call(this, url, data, callback);
    });
  }
  Paginate.getPagi_hidePage(10, wrap, pageNumber, totalPage);
  function getPostData(pageNumber, postDataHandler) {
    var data = {};
    var form = document.getElementById('dataForm');
    data = $(form).serializeObject();
    if (typeof postDataHandler === 'function') postDataHandler.call(this, data);
    data.pageNumber = pageNumber;
    data.indexPage = pageNumber;
    data.pageSize = pageSize;
    data.countPage = pageSize;
    return data;
  }
};
Paginate.getPagi_liPre = function (parentUl) {
  var li_pre = document.createElement('li');
  li_pre.setAttribute('class', 'function');
  parentUl.appendChild(li_pre);
  var link_pre = document.createElement('a');
  li_pre.appendChild(link_pre);
  var span_pre = document.createElement('span');
  span_pre.setAttribute('uk-pagination-previous', '');
  link_pre.appendChild(span_pre);
  return link_pre;
};
Paginate.getPagi_liNext = function (parentUl) {
  var li_nex = document.createElement('li');
  li_nex.setAttribute('class', 'function');
  parentUl.appendChild(li_nex);
  var link_nex = document.createElement('a');
  li_nex.appendChild(link_nex);
  var span_nex = document.createElement('span');
  span_nex.setAttribute('uk-pagination-next', '');
  link_nex.appendChild(span_nex);
  return link_nex;
};
Paginate.getPagi_liActive = function (innerText) {
  var li = document.createElement('li');
  var span = document.createElement('span');
  span.innerText = innerText;
  li.setAttribute('class', 'uk-active');
  li.appendChild(span);
  return li;
};
Paginate.getPagi_liNormal = function (innerText) {
  var li = document.createElement('li');
  var link = document.createElement('a');
  link.innerText = innerText;
  li.appendChild(link);
  return {
    li: li,
    link: link
  };
};
Paginate.getPagi_hidePage = function (showNumber, parentNode, pageNumber, totalPage) {
  var showPages = showNumber;
  var liArr = parentNode.querySelectorAll('li:not(.function)');
  var li;
  if (Number(pageNumber) > showPages + 2) {
    for (var i = 1; i < Number(pageNumber) - showPages - 1; i++) {
      liArr[i].style.display = 'none';
    }
    li = this.getPagi_liActive('...');
    parentNode.insertBefore(li, liArr[1]);
  }
  if (totalPage - pageNumber > showPages + 1) {
    for (var _i = Number(pageNumber) + showPages; _i < totalPage - 1; _i++) {
      liArr[_i].style.display = 'none';
    }
    li = this.getPagi_liActive('...');
    parentNode.insertBefore(li, liArr[totalPage - 1]);
  }
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\QueryDict.js":
/*!****************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\QueryDict.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ fn_queryDict)
/* harmony export */ });
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");

function QueryDict() {
  this.api = document.querySelector('input[name=dict_api]').value;
}
QueryDict.prototype.query = function (name, cb) {
  // console.log(this.api, JSON.stringify({type: name}))
  $.ajax({
    url: this.api,
    data: JSON.stringify({
      type: name
    }),
    success: cb
  });
};
function fn_queryDict(name, cb) {
  var qd = new QueryDict();
  try {
    qd.query(name, cb);
  } catch (err) {
    _Global__WEBPACK_IMPORTED_MODULE_0__["default"].errorHandler(err);
  }
}

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\StationPages.js":
/*!*******************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\StationPages.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sta_table": () => (/* binding */ Sta_table),
/* harmony export */   "initStation_baseData": () => (/* binding */ initStation_baseData),
/* harmony export */   "initStation_billMangement_queryBills": () => (/* binding */ initStation_billMangement_queryBills),
/* harmony export */   "initStation_billsSetting": () => (/* binding */ initStation_billsSetting),
/* harmony export */   "initStation_billsSetting_addRule": () => (/* binding */ initStation_billsSetting_addRule),
/* harmony export */   "initStation_getAllDiscountPolicy": () => (/* binding */ initStation_getAllDiscountPolicy),
/* harmony export */   "initStation_getStationAllConsumer": () => (/* binding */ initStation_getStationAllConsumer),
/* harmony export */   "initStation_stationQueryBillDetails_new": () => (/* binding */ initStation_stationQueryBillDetails_new),
/* harmony export */   "initStation_stationQueryBill_new": () => (/* binding */ initStation_stationQueryBill_new)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.string.trim.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.trim.js");
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.string.match.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.match.js");
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");
/* harmony import */ var _QueryDict__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./QueryDict */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\QueryDict.js");
/* harmony import */ var _Listbox__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Listbox */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Listbox.js");
/* harmony import */ var _FormValidate__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./FormValidate */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\FormValidate.js");
/* harmony import */ var _Paginate__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Paginate */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Paginate.js");
/* harmony import */ var _AjaxManager__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./AjaxManager */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AjaxManager.js");
















var role = getRole();
function getRole() {
  try {
    return document.getElementById('userType').value;
  } catch (error) {
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
    return;
  }
}
function initStation_baseData() {
  // var form = document.getElementById('dataForm');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].WdateInit('startTime', 'endTime', {
    dateFmt: 'yyyy年MM月',
    // minDate: '{%y-1}-{%M+9}-%d',
    maxDate: 'today'
  });
  entry(); // 异步函数调用入口
  function entry() {
    fetchExpImp();
  }
  function fetchDictErrHandler(res) {
    if (res.data === undefined) throw new Error('远程数据非法: 字典接口返回值未定义');
    if (!Array.isArray(res.data)) throw new Error('远程数据非法: 字典接口返回值格式错误');
    if (res.data.length < 1) throw new Error('远程数据非法: 字典接口返回值为空值');
  }
  function setOptions(arr, selName) {
    var sel = document.querySelector('select[name=' + selName + ']');
    if (!sel) return;
    for (var i = 0; i < arr.length; i++) {
      var op = document.createElement('option');
      op.setAttribute('value', arr[i].key);
      op.innerText = arr[i].value;
      sel.appendChild(op);
    }
  }
  function fetchExpImp() {
    (0,_QueryDict__WEBPACK_IMPORTED_MODULE_11__["default"])('EXP_IMP', function (res) {
      if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.checkRes)(res) === false) return;
      try {
        fetchDictErrHandler(res);
        setOptions(res.data, 'expImp');
        fetchDomInt();
      } catch (error) {
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
        return;
      }
    });
  }
  function fetchDomInt() {
    (0,_QueryDict__WEBPACK_IMPORTED_MODULE_11__["default"])('DOM_INT', function (res) {
      if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.checkRes)(res) === false) return;
      try {
        fetchDictErrHandler(res);
        setOptions(res.data, 'domInt');
        fetchPayMode();
      } catch (error) {
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
        return;
      }
    });
  }
  function fetchPayMode() {
    (0,_QueryDict__WEBPACK_IMPORTED_MODULE_11__["default"])('PAY_MODE', function (res) {
      if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.checkRes)(res) === false) return;
      try {
        fetchDictErrHandler(res);
        setOptions(res.data, 'payMode');
        if (role === 'system') {
          initPage();
          return;
        }
        fetchEffectiveBillRules();
      } catch (error) {
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
        return;
      }
    });
  }
  function fetchEffectiveBillRules() {
    var api = document.querySelector('input[name=api_queryEffectiveBillRule');
    var url = api.value;
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(url, '', createEffectiveBillRules);
  }
  function createEffectiveBillRules(res) {
    var data = res.data || res.date;
    try {
      if (data === undefined) throw new Error('远程数据格式非法: 没有data属性');
      if (!Array.isArray(data)) throw new Error('远程数据格式非法: data属性不是数组');
      if (data.length < 1) throw new Error('没有已生效的账单规则(此功能可选)');
    } catch (err) {
      // Glob_fn.errorHandler(err, initPage); // 显示异常
      initPage(); // 不处理异常
    }

    for (var i = 0; i < data.length; i++) {
      createBillRuleButtons(data[i]);
    }
    try {
      renderEffectiveBillRules();
      initPage();
    } catch (error) {
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
      return;
    }
    function createBillRuleButtons(data) {
      var rule = data.billRule ? data.billRule : 'NULL';
      var desc = data.billRuleDesc ? data.billRuleDesc : 'NULL';
      var id = data.billRuleId ? data.billRuleId : 'NULL';
      var name = data.billRuleName ? data.billRuleName : 'NULL';
      var position = document.getElementById('ruleSetsWrap');
      var wrap = document.createElement('div');
      position.appendChild(wrap);
      wrap.appendChild(getLabel());
      wrap.appendChild(getDrop());
      function getLabel() {
        var label = document.createElement('label');
        label.setAttribute('class', 'void button');
        label.innerText = name;
        var input = document.createElement('input');
        label.appendChild(input);
        input.setAttribute('type', 'radio');
        input.setAttribute('name', 'billRule');
        input.setAttribute('hidden', '');
        input.setAttribute('value', rule);
        input.setAttribute('id', id);
        return label;
      }
      function getDrop() {
        var drop = document.createElement('div');
        drop.setAttribute('uk-drop', 'delay-hide:0');
        var cardFrame = document.createElement('div');
        drop.appendChild(cardFrame);
        cardFrame.setAttribute('class', 'uk-card uk-card-small uk-card-default');
        cardFrame.appendChild(getCardHeader());
        cardFrame.appendChild(getCardBody());
        return drop;
        function getCardHeader() {
          var header = document.createElement('div');
          header.setAttribute('class', 'uk-card-header');
          var title = document.createElement('div');
          title.setAttribute('class', 'uk-card-title');
          header.appendChild(title);
          var h = document.createElement('h5');
          title.appendChild(h);
          h.innerText = name;
          return header;
        }
        function getCardBody() {
          var div = document.createElement('div');
          div.setAttribute('class', 'uk-card-body uk-container uk-container-xsmall');
          if (desc === 'NULL') {
            div.innerText = '无数据';
          }
          try {
            var array = [];
            if (desc.indexOf(',') !== -1) array = desc.split(',');else if (desc.indexOf('，') !== -1) array = desc.split('，');
            if (array.length < 1) div.innerText('无数据');
            for (var j = 0; j < array.length; j++) {
              var span = document.createElement('span');
              span.setAttribute('class', 'uk-label uk-margin-small-bottom uk-margin-small-right');
              span.innerText = $.trim(array[j]);
              div.appendChild(span);
            }
          } catch (error) {
            div.innerText = error;
          }
          return div;
        }
      }
    }
  }
  function renderEffectiveBillRules() {
    var ruleSetsWrapDiv = document.getElementById('ruleSetsWrap');
    var ruleRadios = ruleSetsWrapDiv.querySelectorAll('input[type=radio]');
    var ruleLabels = ruleSetsWrapDiv.querySelectorAll('label');
    // Bind radios:
    for (var i = 0; i < ruleRadios.length; i++) {
      var radio = ruleRadios[i];
      var func = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].checkboxAndRadio;
      func.initActiveLabel(radio);
      radio.addEventListener('change', func.setBindingLabels(ruleRadios));
      radio.addEventListener('click', function (event) {
        event.stopPropagation(); // 阻止事件上升到label
      });
    }
    // Bind labels: 
    for (var _i = 1; _i < ruleLabels.length; _i++) {
      var label = ruleLabels[_i];
      label.addEventListener('mousedown', function (event) {
        event.preventDefault(); // 抵消drop控件副作用
      });
    }
    // Bind reset button:
    var resetBtn = document.querySelector('input[type=reset]');
    var defaultRadio = ruleRadios[0];
    resetBtn.addEventListener('click', function () {
      defaultRadio.click(); // 重置为全部
    });
  }

  function initPage() {
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 15, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryOriginalWaybill, function (data) {
      if (data.billRule === '') data.billRule = null;
    }, {
      timeout: 20000
    });
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initExportBtn)(_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_exportExcel);
  }
}
function initStation_billMangement_queryBills() {
  // var form = document.getElementById('dataForm');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].WdateInit('startTime', 'endTime', {
    dateFmt: 'yyyy年MM月',
    // minDate: '{%y-3}-%M-%d',
    maxDate: 'today',
    realDateFmt: 'yyyyMM'
  });
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 15, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_querySumBillByRule);
}
function initStation_stationQueryBill_new() {
  if (role === 'agent') {
    initPage();
  } else {
    initNewPage();
  }
  function initPage() {
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].WdateInit('startTime', 'endTime', {
      dateFmt: 'yyyy年MM月',
      minDate: '{%y-3}-%M-%d',
      maxDate: 'today',
      realDateFmt: 'yyyyMM'
    });
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 15, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryBill_new);
  }
  function initNewPage() {
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].setPostLink(document.querySelectorAll('.postDataLink'), _Global__WEBPACK_IMPORTED_MODULE_10__["default"].getOrderTime());
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 15, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryBill_new);
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initExportBtn)(_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_exportExcel);
    if (role === 'system') return;
    if (role === 'station') setMultiPushButton();
    function setMultiPushButton() {
      var multiBtn = document.getElementById('multiBtn');
      multiBtn.addEventListener('click', function (event) {
        event.preventDefault();
        var url = document.querySelector('input[name=api_stationBillPush]').value;
        var chb = document.querySelectorAll('.cb_child');
        var list = [];
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.addCheckedToList(chb, list);
        if (list.length == 0) {
          UIkit.modal.alert('请选择至少一项');
          return;
        }
        var postData = {
          orderNoList: list
        };
        // console.log(url, postData);
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_stationBillPush)(url, postData);
      });
    }
  }
}
function initStation_stationQueryBillDetails_new() {
  if (role === 'agent') {
    initThisPage();
    return;
  }
  (0,_QueryDict__WEBPACK_IMPORTED_MODULE_11__["default"])('OPEDEPART', function (res) {
    if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.checkRes)(res) === false) return;
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].setOpedepartId(res);
    initThisPage();
  });
  function initThisPage() {
    if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].setPostLink(document.querySelectorAll('.postDataLink'), _Global__WEBPACK_IMPORTED_MODULE_10__["default"].getOrderTime());
    // bind submit button:
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 5, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryDetails_new);
    // bind export button:
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initExportBtn)(_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_exportExcel);
  }
}
function initStation_getStationAllConsumer() {
  // bind submit button:
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 10, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_getStationAllConsumer);
  // bind export button:
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initExportBtn)(_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_exportExcel);

  // 初始化Listbox：
  var showListBox = document.querySelector('#discountSetting'); // userInfo
  if (showListBox) {
    (0,_Listbox__WEBPACK_IMPORTED_MODULE_12__.initListBox)();
  }
  // 优惠设置提交按钮绑定：
  var listBoxSubmitButton = document.querySelector('#fn_discSettle');
  listBoxSubmitButton.addEventListener('click', function (event) {
    event.preventDefault();
    var url = document.querySelector('input[name=api_forDiscSettle]').value;
    var listbox = new _Listbox__WEBPACK_IMPORTED_MODULE_12__.Listbox();
    var data = listbox.postData_discountName();
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_addDiscountCustomer)(url, data);
  });
}
function initStation_getAllDiscountPolicy() {
  // get select options:
  (0,_QueryDict__WEBPACK_IMPORTED_MODULE_11__["default"])('DISCOUNT_TYPE', function (res) {
    // set options:
    if (!res.data || res.data.length < 1) {
      throw new Error('字典接口错误');
    }
    var DISCOUNT_TYPE = res.data;
    var form = document.getElementById('dataForm');
    var selectType = form.querySelector('select[name=discountType]');
    var op0 = document.createElement('option');
    op0.value = 'TYPE';
    op0.innerText = '全部';
    selectType.appendChild(op0);
    for (var i = 0; i < DISCOUNT_TYPE.length; i++) {
      var op = document.createElement('option');
      for (var key in DISCOUNT_TYPE[i]) {
        if (key == 'value') {
          op.innerText = DISCOUNT_TYPE[i][key];
        }
        if (key == 'key') {
          op.setAttribute('value', DISCOUNT_TYPE[i][key]);
        }
        op.setAttribute('data-' + key, DISCOUNT_TYPE[i][key]);
        selectType.appendChild(op);
      }
    }

    // init Wdate:
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].WdateInit('startTime', 'endTime');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].WdateInit('setStartTime', 'setEndTime');

    // bind submit:
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 10, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_getAllDiscountPolicy);

    // bind add new:
    var newBtn = document.querySelector('#toDiscountPolicies');
    newBtn.addEventListener('click', function (event) {
      event.preventDefault();
      window.location.href = 'discountPolicies';
    });
  });
}
function initStation_billsSetting() {
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].WdateInit('startTime', 'endTime', {
    // dateFmt: 'yyyy年MM月',
    // minDate: '{%y-1}-{%M+9}-%d',
    // maxDate: 'today',
  });
  // Bind Add rule Button:
  bindAddRuleBtn();
  function bindAddRuleBtn() {
    var btn = document.getElementById('addRule');
    btn.addEventListener('click', function (event) {
      event.preventDefault();
      window.location.href = 'billsSetting/addRule';
    });
  }
  // Bind Submit:
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fn_initSubmitBtn)(1, 10, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryBillRuleByPage);
}
function initStation_billsSetting_addRule() {
  var form = document.getElementById('dataForm');
  var vld = new _FormValidate__WEBPACK_IMPORTED_MODULE_13__["default"]();
  var validator = vld.validator();
  // fetch data:
  fetchBillRule();
  function fetchBillRule( /*data*/
  ) {
    (0,_QueryDict__WEBPACK_IMPORTED_MODULE_11__["default"])('BILL_RULE', function (res) {
      if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.checkRes)(res) === false) return;
      try {
        if (res.data === undefined) throw new Error('远程数据非法: 数据没有data属性');
        if (!Array.isArray(res.data)) throw new Error('远程数据非法: data属性不是数组');
        if (res.data.length != 1) throw new Error('远程数据非法: data数组长度不为1');
        if (!_Global__WEBPACK_IMPORTED_MODULE_10__["default"].isJSON(res.data[0].value)) throw new Error('远程数据非法: 数据不是JSON格式');
      } catch (error) {
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
        return;
      }
      showValueFrom(JSON.parse(res.data[0].value));
      initPage();
    });
  }
  function showValueFrom(fetchValue) {
    if (!Array.isArray(fetchValue)) throw new Error('远程数据非法: JSON数据不是数组');
    if (fetchValue.length < 1) throw new Error('无规则可选');
    var radiosHeading = document.getElementById('radiosHeading');
    var checkboxesHeading = document.getElementById('checkboxesHeading');
    var checkAllWrap = document.getElementById('checkAllWrap');
    var checkboxesCount = 0;
    for (var i = 0; i < fetchValue.length; i++) {
      var ruleProps = fetchValue[i];
      if (ruleProps.checkBox) {
        if (checkboxesHeading.hasAttribute('hidden')) {
          checkboxesHeading.removeAttribute('hidden');
        }
        checkboxesCount++;
      } else {
        if (radiosHeading.hasAttribute('hidden')) {
          radiosHeading.removeAttribute('hidden');
        }
      }
      setRule(ruleProps);
    }
    if (checkboxesCount > 1 && checkAllWrap.hasAttribute('hidden')) {
      checkAllWrap.removeAttribute('hidden');
    }
    function setRule(data) {
      try {
        console.log(data);
        var name = data.name ? data.name : 'NULL';
        var type = data.type ? data.type : 'NULL';
        var wrap = data.checkBox ? document.getElementById('checkboxesWrap') : document.getElementById('radiosWrap');
        var frame = getFrame(data);
        wrap.appendChild(frame);
        var label = getLabel(name);
        var contentDiv = getContentDiv();
        frame.appendChild(label);
        frame.appendChild(contentDiv);
        if (!Array.isArray(data.content)) throw new Error('远程数据非法: content不是数组');
        if (data.content.length < 1) throw new Error(data.name + '类型下无数据');
        for (var j = 0; j < data.content.length; j++) {
          var key = data.content[j].key ? data.content[j].key : '';
          var value = data.content[j].value ? data.content[j].value : 'NULL';
          var content = getContent(key, value);
          contentDiv.appendChild(content);
        }
        return;
      } catch (error) {
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
        return;
      }
      function getFrame(data) {
        var frame = document.createElement('div');
        frame.setAttribute('class', 'uk-margin');
        if (!data.checkBox) frame.classList.add('radioWrap');
        return frame;
      }
      function getLabel(name) {
        var label = document.createElement('label');
        label.setAttribute('class', 'uk-form-label');
        label.setAttribute('data-ruleType', type);
        label.setAttribute('data-ruleName', name);
        label.innerText = name;
        return label;
      }
      function getContentDiv() {
        var contentWrap = document.createElement('div');
        contentWrap.setAttribute('class', 'uk-form-controls uk-grid-small');
        contentWrap.setAttribute('uk-grid', '');
        return contentWrap;
      }
      function getContent(key, value) {
        var div = document.createElement('div');
        var label = document.createElement('label');
        label.setAttribute('class', 'void button');
        div.appendChild(label);
        var input = document.createElement('input');
        input.setAttribute('type', data.checkBox ? 'checkbox' : 'radio');
        input.setAttribute('class', data.checkBox ? 'linkLabel' : '');
        input.setAttribute('name', type);
        input.setAttribute('hidden', '');
        input.setAttribute('value', key);
        input.setAttribute('data-ruleDesc', value);
        if (input.getAttribute('type') === 'radio' && input.value === 'MP') input.setAttribute('checked', '');
        label.appendChild(input);
        var span = document.createElement('span');
        span.innerText = value;
        label.appendChild(span);
        return div;
      }
    }
  }
  function initPage() {
    // set default input:
    document.querySelectorAll('.radioWrap').forEach(function (div) {
      div.querySelectorAll('input[type="radio"]').forEach(function (input, index) {
        if (input.name !== 'PAY_MODE' && index === 0) {
          input.setAttribute('checked', '');
        }
      });
    });
    // vld: bindItems:
    validator.bindFormItems();
    // UI: Bind Radios:
    bindAllRadios();
    function bindAllRadios() {
      var wraps = form.querySelectorAll('.radioWrap');
      if (wraps.length < 1) {
        throw new Error('没有定义div.radioWrap');
      }
      for (var j = 0; j < wraps.length; j++) {
        var wrap = wraps[j];
        bindRadios(wrap);
      }
      function bindRadios(wrap) {
        var radios = wrap.querySelectorAll('input[type=radio]');
        if (radios.length < 1) {
          return;
        }
        for (var i = 0; i < radios.length; i++) {
          var radio = radios[i];
          var func = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].checkboxAndRadio;
          func.initActiveLabel(radio);
          radio.addEventListener('change', func.setBindingLabels(radios));
        }
      }
    }
    // UI: Checkboxes:
    checkboxes();
    function checkboxes() {
      var cbx_all = document.getElementById('checkAllRules');
      var cbxs = form.querySelectorAll('input[type=checkbox].linkLabel');
      // UI: checkbox绑定样式:
      cbxLinkLabel();
      function cbxLinkLabel() {
        if (cbxs.length < 1) {
          return;
        }
        for (var i = 0; i < cbxs.length; i++) {
          var cbx = cbxs[i];
          cbx.addEventListener('change', function () {
            changeStyle(this);
            if (cbx_all.checked) {
              cbx_all.checked = false;
            }
          });
        }
      }
      // UI: 全选功能实现:
      complyCheckAll();
      function complyCheckAll() {
        if (!cbx_all) {
          return;
        }
        if (cbxs.length < 1) {
          return;
        }
        cbx_all.addEventListener('change', function () {
          if (this.checked) {
            // 全选
            setAllChecked(cbxs, true);
          } else {
            // 全不选
            setAllChecked(cbxs, false);
          }
        });
        function setAllChecked(checkboxes, boo) {
          if (!checkboxes || checkboxes.length < 1) {
            throw new Error('没有找到将要对应的checkbox');
          }
          for (var i = 0; i < checkboxes.length; i++) {
            var checkbox = checkboxes[i];
            if (boo && checkbox.checked) {
              // 不处理
            } else {
              checkbox.checked = boo;
              changeStyle(checkbox);
            }
          }
        }
      }
      // UI: checkbox按钮样式规则:
      function changeStyle(checkbox) {
        var labClasses = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].checkboxAndRadio.getBindingLabel(checkbox).classList;
        if (labClasses.contains('newMonth')) {
          labClasses.toggle('button-highlight');
          labClasses.toggle('uk-text-warning');
        } else {
          labClasses.toggle('button-primary');
        }
      }
    }
    // Submit Binding:
    submitAddRule();
    function submitAddRule() {
      var btn = document.getElementById('createBill');
      var url = document.querySelector('input[name=url_station_billSetting]').value;
      var not = "<span id='notification' uk-icon='icon: check'></span> 提交成功";
      btn.addEventListener('click', function (event) {
        event.preventDefault();
        if (!validator.submitBoo()) {
          return;
        }
        UIkit.modal.confirm('确定提交信息并生成账单规则?').then(function () {
          try {
            var postData = getPostData();
            var postUrl = document.querySelector('input[name=api_stationCreateBillRule]').value;
            // console.log(postData);
            (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(postUrl, postData, successCallback);
          } catch (error) {
            _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
            return;
          }
        });
      });
      function getPostData() {
        return JSON.stringify({
          billRuleName: getName(),
          billRule: getRule().rule,
          billRuleDesc: getRule().desc
        });
      }
      function getName() {
        var name = document.getElementById('billName').value;
        if (!name) throw new Error('表单错误: 请重新填写账单规则名称');
        return name;
      }
      function getRule() {
        try {
          var rs = document.getElementById('radiosWrap').querySelectorAll('input[type=radio]');
          var cs = document.getElementById('checkboxesWrap').querySelectorAll('input[type=checkbox]');
          var checkedInputs = getCheckedInputs();
          if (checkedInputs.length < 1) throw new Error('表单错误: 未选择规则');
          var rulesInfo = getRulesInfo(checkedInputs);
          return {
            rule: getResults(rulesInfo).rule,
            desc: getResults(rulesInfo).desc
          };
        } catch (error) {
          throw new Error(error);
        }
        function getCheckedInputs() {
          var array = [];
          putCheckedInpIn(rs, array);
          putCheckedInpIn(cs, array);
          return array;
        }
        function putCheckedInpIn(inputs, array) {
          for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].checked) array.push(inputs[i]);
          }
        }
        function getRulesInfo(inputs) {
          var array = [];
          for (var i = 0; i < inputs.length; i++) {
            var inp = inputs[i];
            array.push({
              name: inp.name,
              value: inp.value,
              desc: inp.getAttribute('data-ruleDesc')
            });
          }
          return array;
        }
        function getResults(rawArray) {
          var result = {};
          var desc = [];
          var tmpName = '';
          for (var i = 0; i < rawArray.length; i++) {
            if (rawArray[i].name === tmpName) {
              result[rawArray[i].name].push(rawArray[i].value);
            } else {
              result[rawArray[i].name] = [rawArray[i].value];
              tmpName = rawArray[i].name;
            }
            desc.push(rawArray[i].desc);
          }
          return {
            rule: JSON.stringify(result),
            desc: parseDesc(desc)
          };
          function parseDesc(array) {
            var result = '';
            for (var i = 0; i < array.length; i++) {
              result += array[i].toString();
              if (i < array.length - 1) result += ', ';
            }
            return result;
          }
        }
      }
      function successCallback() {
        // alert(JSON.stringify(res))
        UIkit.notification(not, {
          status: 'success',
          timeout: 1000
        });
        UIkit.util.on('.uk-notification', 'close', function () {
          window.location.href = url;
        });
      }
    }
  }
}
function Sta_table() {}
// 生成基础数据展示表格（新需求）:
Sta_table.prototype.getTable_queryOriginalWaybill = function (res, pageNumber, pageSize) {
  getFeeItem();
  function getFeeItem() {
    var url = document.querySelector('input[name=api_queryFeeItem]').value;
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(url, '', createTable);
  }
  function createTable(feeItems) {
    try {
      var table = document.getElementById('dataTable');
      if (!feeItems.data) throw new Error('远程数据非法: 费用列表项未定义');
      var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
      setCaption(res.data);
      setThead(feeItems.data);
      setTbody(res, feeItems.data);
      (0,_Paginate__WEBPACK_IMPORTED_MODULE_14__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryOriginalWaybill, function (data) {
        if (data.billRule === '') data.billRule = null;
      });
    } catch (error) {
      throw new Error(error);
    }
    function setCaption(data) {
      var caption = table.querySelector('caption');
      if (!caption) return;
      caption.setAttribute('hidden', '');
      if (data.totalCount !== undefined) {
        caption.querySelector('span.totalCount').innerText = data.totalCount;
        caption.removeAttribute('hidden');
      }
    }
    function setThead(data) {
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '费用记录号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '运单前缀');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '运单号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '品名');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '货运类型');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '始发站');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '目的站');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '航班号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '件数');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '重量');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费重量');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费时间');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费营业点');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费营业点名称');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.buildAjaxTitle(data, trInThead);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '金额');
    }
    function setTbody(rawData, ajaxTitle) {
      var tbody = table.querySelector('tbody');
      table.setAttribute('data-hideSome', '');
      tbody.innerHTML = '';
      var data = rawData.data.feeList;
      if (!data || data.length < 1) {
        var tr0 = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
        tbody.appendChild(tr0);
        return;
      }
      for (var i = 0; i < data.length; i++) {
        var tr = document.createElement('tr');
        tbody.appendChild(tr);
        var tdSerial = document.createElement('td');
        tr.appendChild(tdSerial);
        tdSerial.innerText = i + 1 + (Number(pageNumber) - 1) * Number(pageSize);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].feeRecId);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].stockPre);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].stockNo);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].cargoNm);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].type);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].sAirportDsc);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].eAirportDsc);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].flight);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].pcs);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].weight);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].feeWt);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].crtopeTimeStr);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].opedepartId);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].opedepartStr);
        var feeIdArr = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getAjaxTitleValue(ajaxTitle, 'feeId');
        var ajaxData = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getAjaxTitleData(null, feeIdArr, JSON.parse(data[i].feeItemList));
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.buildValueWithAjaxTitle(ajaxData, tr);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].totalFeeStr);
        // Glob_fn.Table.trHideSome(tr);
      }
    }
  }
};
// 生成账单汇总查询表格（新需求）:
Sta_table.prototype.getTable_querySumBillByRule = function (res, pageNumber, pageSize) {
  try {
    createTable(res);
  } catch (error) {
    throw new Error(error);
  }
  function createTable(res) {
    var table = document.getElementById('dataTable');
    if (!res.data) throw new Error('远程数据非法: data未定义');
    var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
    setThead();
    setTbody(res);
    (0,_Paginate__WEBPACK_IMPORTED_MODULE_14__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_querySumBillByRule);
    function setThead() {
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账单名称');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '开账时间');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账期');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '地服成本中心');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '金额');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '操作');
    }
    function setTbody(res) {
      var tbody = table.querySelector('tbody');
      tbody.innerHTML = '';
      var data = res.data.billList;
      if (!data || data.length < 1) {
        var tr0 = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
        tbody.appendChild(tr0);
        return;
      }
      for (var i = 0; i < data.length; i++) {
        var tr = document.createElement('tr');
        tbody.appendChild(tr);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTdSerial(tr, i, pageNumber, pageSize);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].billRuleName);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].accountOpeningTime);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].orderTime);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].costCenter);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].totalFee);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, getLink(data[i].billRuleId));
      }
      function getLink(id) {
        if (id === undefined) throw new Error('远程数据非法: summaryList.billRule未定义');
        var link = document.createElement('a');
        link.innerText = '查看账单';
        link.setAttribute('data-billRuleId', id);
        link.setAttribute('uk-tooltip', '点击查看');
        link.addEventListener('click', function (event) {
          event.preventDefault();
          var url = document.querySelector('input[name=url_forNext]').value + '/' + id;
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].submVirtForm(url, _Global__WEBPACK_IMPORTED_MODULE_10__["default"].getOrderTime());
        });
        return link;
      }
    }
  }
};
// 账单查看主表(新需求)：
Sta_table.prototype.getTable_queryBill_new = function (res, pageNumber, pageSize) {
  try {
    createTable(res);
  } catch (error) {
    throw new Error(error);
  }
  function createTable(res) {
    var table = document.getElementById('dataTable');
    if (!res.data) throw new Error('远程数据非法: data未定义');
    var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
    var checkAll = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getCheckbox('all');
    trInThead = role === 'agent' ? setAgentThead() : setThead();
    getCaptionData();
    setTbody(res);
    if (role === 'station') setCheckAll(checkAll);
    (0,_Paginate__WEBPACK_IMPORTED_MODULE_14__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryBill_new);
    function getCaptionData() {
      var inp = document.querySelector('input[name=api_queryBillSum]');
      if (!inp) return;
      var url = inp.value;
      if (!url) return;
      var postData = JSON.stringify($(document.getElementById('dataForm')).serializeObject());
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(url, postData, setCaption);
    }
    function setCaption(res) {
      var data = res.data;
      var caption = table.querySelector('caption');
      if (!caption) return;
      caption.querySelector('span.totalFee').innerText = data.totalAmount ? data.totalAmount : '无数据';
      caption.querySelector('span.realTotalFee').innerText = data.preferentialTotalAmount ? data.preferentialTotalAmount : '无数据';
      caption.querySelector('span.totalWeight').innerText = data.totalWeight ? data.totalWeight : '无数据';
      caption.removeAttribute('hidden');
    }
    function setThead() {
      if (role === 'station') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, checkAll);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '开账时间');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账期');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '货运类型', false);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '总金额');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '状态');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '优惠金额');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '地服成本中心');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '平台订单号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '交易流水号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '结算客户编码');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '结算客户名称');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, 'bindingStatus', false);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '操作');
      return trInThead;
    }
    function setAgentThead() {
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '开账时间');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账期');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账单名称');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '平台订单号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '总金额');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '优惠后金额');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '付款状态');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '支付订单号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '操作');
      return trInThead;
    }
    function setTbody(res) {
      var tbody = table.querySelector('tbody');
      table.setAttribute('data-hideSome', '400');
      tbody.innerHTML = '';
      var data = res.data.summaryList;
      if (data === undefined) throw new Error('远程数据非法: data.summaryList未定义');
      if (!data || data.length < 1) {
        var tr0 = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
        tbody.appendChild(tr0);
        return;
      }
      for (var i = 0; i < data.length; i++) {
        var tr = document.createElement('tr');
        tbody.appendChild(tr);
        if (role === 'station') {
          var tdCheckbox = document.createElement('td');
          tr.appendChild(tdCheckbox);
          var checkbox = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getCheckbox();
          checkbox.querySelector('input').setAttribute('data-checked', data[i].orderNo);
        }
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTdSerial(tr, i, pageNumber, pageSize);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].createTimeStr);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].orderTime);
        if (role === 'agent') {
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].billRuleName);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].orderNo);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].totalFeeStr);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].realTotalFeeStr);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].statusStr);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].payNo);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, getAgentLinks(data[i]));
        } else {
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].type, false);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].totalFeeStr);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].statusStr);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].realTotalFeeStr);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].costCenter);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].orderNo);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].payNo);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].customerId);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].customerName);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].bindingStatus, false);
          _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, getLinks(data[i]));
        }
        // Glob_fn.Table.trHideSome(tr);
      }

      return tbody;
      function getLinks(data) {
        var orderNo = data.orderNo;
        if (orderNo === undefined) throw new Error('远程数据非法: orderNo未定义');
        var links = [];
        links.push(getDetailLink());
        if (role === 'station') {
          var pushlink = getPushLink();
          if (pushlink) links.push(getPushLink());
        }
        return links;
        function getDetailLink() {
          var link = document.createElement('a');
          link.innerText = '查看详情';
          link.setAttribute('data-orderNo', orderNo);
          var url = document.querySelector('input[name=url_forQueryDetails]').value + '/' + orderNo;
          var postData = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].getOrderTime();
          if (role === 'station') postData.modify = Number(data.status) === 0 && Number(data.confirm) === 0;
          link.addEventListener('click', function (event) {
            event.preventDefault();
            _Global__WEBPACK_IMPORTED_MODULE_10__["default"].submVirtForm(url, postData);
          });
          return link;
        }
        function getPushLink() {
          if (Number(data.confirm) !== 0) return false;
          if (checkAll.querySelector('input').getAttribute('disabled') === '') {
            checkAll.querySelector('input').removeAttribute('disabled');
          }
          tdCheckbox.appendChild(checkbox);
          var pushlink = document.createElement('a');
          pushlink.innerText = '推送';
          pushlink.setAttribute('class', 'uk-margin-small-left');
          pushlink.setAttribute('data-orderNo', orderNo);
          pushlink.addEventListener('click', function (event) {
            event.preventDefault();
            var url = document.querySelector('input[name=api_stationBillPush]').value;
            var orderNo = this.getAttribute('data-orderNo');
            var orderNoList = [];
            orderNoList.push(orderNo);
            var data = {
              orderNoList: orderNoList
            };
            (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_stationBillPush)(url, data);
          });
          return pushlink;
        }
      }
      function getAgentLinks(data) {
        var result = [];
        var detailLink = document.createElement('a');
        detailLink.innerText = '查看详情';
        detailLink.setAttribute('href', document.querySelector('input[name=url_forNext]').value + '/' + data.orderNo);
        result.push(detailLink);
        if (Number(data.status) === 2) return result; // 已支付
        var payLink = document.createElement('a');
        payLink.setAttribute('class', 'uk-margin-small-left');
        payLink.innerText = '付款';
        payLink.setAttribute('data-orderNo', data.orderNo);
        payLink.addEventListener('click', function (event) {
          event.preventDefault();
          var url = document.querySelector('input[name=api_pay]').value;
          var pageUrl = document.querySelector('input[name=pageUrl]').value;
          var orderNo = this.getAttribute('data-orderNo');
          var data = {
            orderNo: orderNo,
            pageUrl: pageUrl
          };
          // console.info(url, data)
          // debugger
          (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_age_toPay)(url, data);
        });
        result.push(payLink);
        return result;
      }
    }
    function setCheckAll(checkAll) {
      checkAll.addEventListener('click', function () {
        // var children = document.querySelector('input.cb_child');
        if (this.querySelector('input').checked) setChildren(true);else setChildren(false);
      });
      function setChildren(status) {
        var children = document.querySelectorAll('input.cb_child');
        for (var i = 0; i < children.length; i++) {
          if (children[i].checked === !status) children[i].click();
        }
      }
    }
  }
};
// 账单明细主表(新需求)：
Sta_table.prototype.getTable_queryDetails_new = function (res, pageNumber, pageSize) {
  getFeeItem();
  function getFeeItem() {
    var url = document.querySelector('input[name=api_queryFeeItem]').value;
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(url, '', createTable);
  }
  function createTable(feeItems) {
    try {
      var table = document.getElementById('dataTable');
      if (!feeItems.data) throw new Error('远程数据非法: 费用列表项未定义');
      var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
      getCaptionData();
      setThead(feeItems.data);
      setTbody(res, feeItems.data);
      (0,_Paginate__WEBPACK_IMPORTED_MODULE_14__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryDetails_new);
    } catch (error) {
      throw new Error(error);
    }
    function getCaptionData() {
      var inp = document.querySelector('input[name=api_queryBillDetailsSum]');
      if (!inp) return;
      var url = inp.value;
      if (!url) return;
      var postData = JSON.stringify($(document.getElementById('dataForm')).serializeObject());
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(url, postData, setCaption);
    }
    function setCaption(res) {
      var data = res.data;
      var caption = table.querySelector('caption');
      if (!caption) return;
      caption.querySelector('span.totalCount').innerText = data.totalCount ? data.totalCount : '无数据';
      caption.querySelector('span.totalFee').innerText = data.totalFee ? data.totalFee : '无数据';
      caption.querySelector('span.totalWeight').innerText = data.totalWeight ? data.totalWeight : '无数据';
      caption.querySelector('span.realTotalFee').innerText = data.realTotalFee ? data.realTotalFee : '无数据';
      caption.removeAttribute('hidden');
    }
    function setThead(data) {
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '费用记录号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '运单前缀');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '运单号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '品名');
      if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '货运类型');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '始发站');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '目的站');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '航班号');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '件数');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '重量');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费重量');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费时间');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费营业点');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '计费营业点名称');
      if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账单类型');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.buildAjaxTitle(data, trInThead);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '金额');
      if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '操作');
    }
    function setTbody(rawData, ajaxTitle) {
      var tbody = table.querySelector('tbody');
      table.setAttribute('data-hideSome', '');
      tbody.innerHTML = '';
      var data = rawData.data.feeList;
      if (!data || data.length < 1) {
        var tr0 = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
        tbody.appendChild(tr0);
        return;
      }
      for (var i = 0; i < data.length; i++) {
        var tr = document.createElement('tr');
        tbody.appendChild(tr);
        var trAdd = document.createElement('tr');
        tbody.appendChild(trAdd);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTdSerial(tr, i, pageNumber, pageSize).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].feeRecId).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].stockPre).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].stockNo).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].cargoNm).setAttribute('rowspan', 2);
        if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].type).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].sAirportDsc).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].eAirportDsc).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].flight).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].pcs).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].weight).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].feeWt).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].crtopeTimeStr).setAttribute('rowspan', 2);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].opedepartId).setAttribute('rowspan', 2);
        if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].opedepartStr).setAttribute('rowspan', 2);
        var feeIdArr = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getAjaxTitleValue(ajaxTitle, 'feeId');
        var l1Data = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getAjaxTitleData('原始账单', feeIdArr, JSON.parse(data[i].feeItemList));
        var l2Data = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getAjaxTitleData('开账账单', feeIdArr, JSON.parse(data[i].realFeeItemList));
        if (role === 'station') var line2Object = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getAjaxTitleObject(feeIdArr, JSON.parse(data[i].realFeeItemList));
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.buildValueWithAjaxTitle(l1Data, tr);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.buildValueWithAjaxTitle(l2Data, trAdd);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].totalFeeStr);
        _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(trAdd, data[i].realTotalFeeStr);
        if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, '-').setAttribute('class', 'uk-text-center');
        if (role !== 'agent') _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(trAdd, getAction(data[i], line2Object));
        // Glob_fn.Table.trHideSome(tr);
      }

      function getAction(data, line2Object) {
        var linkModHis = document.createElement('a');
        linkModHis.innerText = '修改记录';
        linkModHis.setAttribute('data-stockNo', data.stockNo);
        linkModHis.setAttribute('class', 'uk-margin-small-left');
        linkModHis.addEventListener('click', function (event) {
          event.preventDefault();
          var postData = JSON.stringify({
            stockNo: this.getAttribute('data-stockNo')
          });
          var url = document.querySelector('input[name=api_queryModifyLog]').value;
          (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(url, postData, createModHis);
        });
        if (role === 'system') return linkModHis;
        if (role === 'station') {
          if (!document.querySelector('input[name=modify]').value) return false;
          var linkmodify = document.createElement('a');
          linkmodify.innerText = '修改';
          linkmodify.setAttribute('data-feeItemList', JSON.stringify(line2Object));
          linkmodify.setAttribute('data-stockNo', data.stockNo);
          linkmodify.setAttribute('data-feeWt', data.feeWt);
          linkmodify.setAttribute('data-totalFeeStr', data.totalFeeStr);
          linkmodify.setAttribute('data-totalFee', data.totalFee);
          linkmodify.addEventListener('click', function (event) {
            event.preventDefault();
            var postData = {
              "stockNo": this.getAttribute('data-stockNo'),
              "totalFee": this.getAttribute('data-totalFee'),
              "totalFeeStr": this.getAttribute('data-totalFeeStr'),
              "feeWt": this.getAttribute('data-feeWt'),
              "feeItemList": this.getAttribute('data-feeItemList')
            };
            var element = fn_getModal(postData, '账单收费项');
            UIkit.modal(element).show();
          });
          return [linkmodify, linkModHis];
        }
      }
    }
  }
  function createModHis(res) {
    var data = res.data;
    if (res.data === undefined) throw new Error('远程数据非法: data未定义');
    if (res.data === null || data.length < 1) {
      UIkit.modal.alert('没有或不可查询该笔订单的修改记录');
      return;
    }
    if (!Array.isArray(res.data)) throw new Error('远程数据非法: data属性不是数组');
    var modal = document.getElementById('modifiedHistory');
    var table = document.getElementById('modifiedHistoryTable');
    var thead = table.querySelector('thead');
    thead.innerHTML = '';
    var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '用户名');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '修改时间');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '备注');
    var tbody = table.querySelector('tbody');
    tbody.innerHTML = '';
    for (var i = 0; i < res.data.length; i++) {
      var tr = document.createElement('tr');
      tbody.appendChild(tr);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, res.data[i].createName);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, res.data[i].createTime);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, res.data[i].remark);
    }
    UIkit.modal(modal).show();
  }
};
// 生成账单规则汇总表格（新需求）:
Sta_table.prototype.getTable_queryBillRuleByPage = function (res, pageNumber, pageSize) {
  try {
    var table = document.querySelector('#dataTable');
    var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
    createThead();
    createTbody();
    (0,_Paginate__WEBPACK_IMPORTED_MODULE_14__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData, new Sta_table().getTable_queryBillRuleByPage);
  } catch (error) {
    throw new Error(error);
  }
  function createThead() {
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账单ID', false);
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '账单名称');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '营业点');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '地区');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '进/出港类型');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '运单类型');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '是否为快件');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '地服成本中心');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '用户名');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '状态');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '状态码', false);
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '设置时间');
    _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '操作');
  }
  function createTbody() {
    var tbody = table.querySelector('tbody');
    tbody.innerHTML = '';
    var data = res.data.queryBillRuleList;
    if (!data || data.length < 1) {
      var tr0 = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
      tbody.appendChild(tr0);
      return;
    }
    for (var i = 0; i < data.length; i++) {
      var tr = document.createElement('tr');
      tbody.appendChild(tr);
      var tdSerial = document.createElement('td');
      tr.appendChild(tdSerial);
      tdSerial.innerText = i + 1 + (Number(pageNumber) - 1) * Number(pageSize);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].billRuleId, false);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].billRuleName);
      setTdFromArray(tr, data[i].billRule, 'OPEDEPART');
      setTdFromArray(tr, data[i].billRule, 'DOM_INT');
      setTdFromArray(tr, data[i].billRule, 'EXP_IMP');
      setTdFromArray(tr, data[i].billRule, 'TRANSFER_TYPE');
      setTdFromArray(tr, data[i].billRule, 'EXP_MAIL');
      setTdFromArray(tr, data[i].billRule, 'COST_C');
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].createName);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].statusStr);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].status, false);
      _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTd(tr, data[i].setTime);
      tr.appendChild(getTdAction(data[i].billRuleId));
    }
    function setTdFromArray(parentTr, array, name, showBoo) {
      var show = showBoo === undefined ? true : showBoo;
      var td = document.createElement('td');
      parentTr.appendChild(td);
      td.innerText = getValue().text;
      td.setAttribute('data-billRuleType', getValue().type);
      if (!show) td.setAttribute('hidden', '');
      return td;
      function getValue() {
        if (!Array.isArray(array)) throw new Error('billRule属性不是数组');
        var text = '-';
        var ruleType = '';
        for (var j = 0; j < array.length; j++) {
          var type = array[j].type;
          if (type === name) {
            text = array[j].content ? array[j].content : text;
            ruleType = type;
          }
        }
        return {
          text: text,
          type: ruleType
        };
      }
    }
    function getTdAction(billRuleId) {
      var td = document.createElement('td');
      td.setAttribute('class', 'uk-table-link');
      var deleteLink = document.createElement('a');
      td.appendChild(deleteLink);
      deleteLink.setAttribute('class', 'deleteTr');
      deleteLink.setAttribute('title', '删除此账单');
      deleteLink.setAttribute('data-billRuleId', billRuleId);
      deleteLink.innerText = '删除';
      deleteLink.addEventListener('click', function (event) {
        event.preventDefault();
        var thisBtn = this;
        UIkit.modal.confirm('删除后不可恢复，确认删除吗？').then(function () {
          try {
            (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetchData)(getUrl(), getPostData(thisBtn), successCallback);
          } catch (error) {
            _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
            return;
          }
        });
      });
      return td;
      function getUrl() {
        return document.querySelector('input[name=api_deleteRule]').value;
      }
      function getPostData(trigger) {
        var billRuleId = trigger.getAttribute('data-billRuleId');
        if (billRuleId === undefined) throw new Error('billRuleId未定义');
        return JSON.stringify({
          'billRuleId': billRuleId
        });
      }
      function successCallback() {
        UIkit.modal.alert('删除成功').then(function () {
          try {
            document.getElementById('submitBtn').click();
          } catch (error) {
            _Global__WEBPACK_IMPORTED_MODULE_10__["default"].errorHandler(error);
            return;
          }
        });
      }
    }
  }
};
// 用户管理主表：
Sta_table.prototype.getTable_getStationAllConsumer = function (res, pageNumber, pageSize) {
  var table = document.querySelector('#dataTable');
  var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '客户代码');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '货运公司全称');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '状态');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '用户状态');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '结算方式');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '操作');
  var tbody = table.querySelector('tbody');
  tbody.innerHTML = '';
  var data = res.data.consumerList;
  if (!data || data.length < 1) {
    var tr0 = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
    tbody.appendChild(tr0);
    return;
  }
  for (var i = 0; i < data.length; i++) {
    var tr = document.createElement('tr');
    tbody.appendChild(tr);
    var tdSerial = document.createElement('td');
    tr.appendChild(tdSerial);
    tdSerial.innerText = i + 1 + (Number(pageNumber) - 1) * Number(pageSize);
    var td1 = document.createElement('td');
    tr.appendChild(td1);
    var td2 = document.createElement('td');
    tr.appendChild(td2);
    var td3 = document.createElement('td');
    tr.appendChild(td3);
    var td4 = document.createElement('td');
    tr.appendChild(td4);
    var td5 = document.createElement('td');
    tr.appendChild(td5);
    var td6 = document.createElement('td');
    tr.appendChild(td6);
    var linkSet = document.createElement('a');
    var linkShow = document.createElement('a');
    for (var key in data[i]) {
      if (key == 'customerId') {
        td1.innerText = data[i][key] === null ? '-' : data[i][key];
        linkSet.setAttribute('data-' + key, data[i][key]);
        linkShow.setAttribute('data-' + key, data[i][key]);
      }
      if (key == 'customerNameChn') td2.innerText = data[i][key] === null ? '-' : data[i][key];
      if (key == 'statusDesc') td3.innerText = data[i][key] === null ? '-' : data[i][key];
      if (key == 'canYesDesc') td4.innerText = data[i][key] === null ? '-' : data[i][key];
      if (key == 'feeWayDesc') td5.innerText = data[i][key] === null ? '-' : data[i][key];
    }
    var list = data[i];
    // 如果现结或未注册：
    if (list.feeWayId == 'CS' || list.status == '0') {
      td6.innerText = '-';
    } else if (list.feeWayId != 'CS') {
      // 如果是非现结
      if (list.canYes == '0') {
        // 且在使用中
        linkSet.innerText = '优惠设置';
        td6.appendChild(linkSet);
        linkSet.addEventListener('click', function (event) {
          event.preventDefault();
          var url = document.querySelector('input[name=api_forDiscSet]').value;
          var customerId = this.getAttribute('data-customerId');
          (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_queryDiscountPolicy)(url, customerId);
        });
      }
      linkShow.innerText = '优惠政策查看';
      linkShow.setAttribute('class', 'uk-margin-small-left');
      linkShow.addEventListener('click', function (event) {
        event.preventDefault();
        var url = document.querySelector('input[name=api_forDiscShow]').value;
        var customerId = this.getAttribute('data-customerId');
        var data = {
          customerId: customerId
        };
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_queryDiscountCustomer)(url, data);
      });
      td6.appendChild(linkShow);
    }
  }

  // 设置pagination
  (0,_Paginate__WEBPACK_IMPORTED_MODULE_14__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_getStationAllConsumer);
};
// 用户优惠查看主表：
Sta_table.prototype.getTable_queryDiscountCustomer = function (res) {
  var tbody = document.createElement('tbody');
  var data = res.data;
  if (data.length < 1 || data === null) {
    var tr0 = document.createElement('tr');
    var td0 = document.createElement('td');
    td0.setAttribute('colspan', '3');
    td0.innerText = '无数据';
    td0.style.textAlign = 'center';
    tr0.appendChild(td0);
    tbody.appendChild(tr0);
    return tbody;
  }
  for (var i = 0; i < data.length; i++) {
    var tr = document.createElement('tr');
    var td1 = document.createElement('td'),
      td2 = document.createElement('td'),
      span1 = document.createElement('span'),
      span2 = document.createElement('span'),
      td3 = document.createElement('td');
    var link = document.createElement('a');
    td3.appendChild(link);
    for (var key in data[i]) {
      if (key == 'discountPolicyName') {
        td1.setAttribute('data-arg', key);
        td1.innerText = data[i][key];
      } else if (key == 'startTimeStr') {
        span1.setAttribute('data-arg', key);
        span1.innerText = data[i][key];
      } else if (key == 'endTimeStr') {
        span2.setAttribute('data-arg', key);
        span2.innerText = data[i][key];
      } else if (key == 'status') {
        td3.setAttribute('data-arg', key);
        getActionText(data[i][key], link);
      } else if (key == 'discountPolicyId') {
        link.setAttribute('data-' + key, data[i][key]);
      } else if (key == 'customerId') {
        link.setAttribute('data-' + key, data[i][key]);
      } else {
        var td = document.createElement('td');
        td.setAttribute('data-arg', key);
        td.innerText = data[i][key];
        td.style.display = 'none';
        tr.appendChild(td);
      }
    }
    td2.appendChild(span1);
    td2.appendChild(span2);
    tr.appendChild(td1);
    tr.appendChild(td2);
    tr.appendChild(td3);
    link.addEventListener('click', function (event) {
      event.preventDefault();
      var discountPolicyId = this.getAttribute('data-discountPolicyId');
      var customerId = this.getAttribute('data-customerId');
      var status = this.getAttribute('data-status');
      var postData = {
        discountPolicyId: discountPolicyId,
        customerId: customerId,
        status: status
      };
      var url = document.querySelector('input[name=api_forDiscSorS]').value;
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_changeCustomerDiscountStatus)(url, postData);
      var parTd = this.parentNode;
      if (status == '1') {
        parTd.removeChild(this);
        parTd.innerText = '已暂停';
      }
      if (status == '0') {
        parTd.removeChild(this);
        parTd.innerText = '已启用';
      }
    });
    tbody.appendChild(tr);
  }
  return tbody;
  function getActionText(status, link) {
    if (status == '0') {
      // 启用状态，设置暂停
      link.setAttribute('data-status', '1');
      link.innerText = '暂停';
    }
    if (status == '1') {
      // 暂停状态，设置启用
      link.setAttribute('data-status', '0');
      link.innerText = '启用';
    }
  }
};
// 优惠设置页面表格：
Sta_table.prototype.getTable_getAllDiscountPolicy = function (res, pageNumber, pageSize) {
  var table = document.getElementById('dataTable');
  var trInThead = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.getThTr(table);
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '序号');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '优惠政策名称');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '优惠类型');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '有效期');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '状态');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '设置时间');
  _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.setTh(trInThead, '操作');
  var tbody = table.querySelector('tbody');
  tbody.innerHTML = '';
  var data = res.data.discountPolicyList;
  if (!data || data.length < 1) {
    var tr0 = _Global__WEBPACK_IMPORTED_MODULE_10__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
    tbody.appendChild(tr0);
    return;
  }
  for (var i = 0; i < data.length; i++) {
    var tr = document.createElement('tr');
    var tdSerial = document.createElement('td');
    tr.appendChild(tdSerial);
    tdSerial.innerText = i + 1 + (Number(pageNumber) - 1) * Number(pageSize);
    var td1 = document.createElement('td');
    tr.appendChild(td1);
    var td2 = document.createElement('td');
    tr.appendChild(td2);
    var td3 = document.createElement('td');
    tr.appendChild(td3);
    var spanInTd3_1 = document.createElement('span');
    td3.appendChild(spanInTd3_1);
    var spanInTd3_2 = document.createElement('span');
    spanInTd3_2.innerText = '至';
    td3.appendChild(spanInTd3_2);
    var spanInTd3_3 = document.createElement('span');
    td3.appendChild(spanInTd3_3);
    var td4 = document.createElement('td');
    tr.appendChild(td4);
    var td5 = document.createElement('td');
    tr.appendChild(td5);
    var td6 = document.createElement('td');
    tr.appendChild(td6);
    var toDetailsA = document.createElement('a');
    toDetailsA.innerText = '查看详情';
    toDetailsA.href = location.pathname + '/details/' + data[i].discountPolicyId;
    td6.appendChild(toDetailsA);
    var toggleA = document.createElement('a');
    toggleA.setAttribute('class', 'uk-margin-small-left');
    // var status_changeToThis = '';
    for (var key in data[i]) {
      if (key == 'discountPolicyId') {
        toggleA.setAttribute('data-' + key, data[i][key]);
      }
      if (key == 'discountPolicyName') {
        td1.innerText = data[i][key];
      }
      if (key == 'discountTypeDesc') {
        td2.innerText = data[i][key];
        td2.setAttribute('data-' + key, data[i][key]);
      }
      if (key == 'startTime') {
        spanInTd3_1.innerText = data[i][key];
      }
      if (key == 'endTime') {
        spanInTd3_3.innerText = data[i][key];
      }
      if (key == 'statusDesc') {
        td4.innerText = data[i][key];
      }
      if (key == 'status') {
        if (data[i][key] == '1') {
          toggleA.innerText = '作废';
          toggleA.setAttribute('data-status', '2');
          td6.appendChild(toggleA);
        }
        if (data[i][key] == '0' || data[i][key] == '2') {
          toggleA.innerText = '启用';
          toggleA.setAttribute('data-status', '1');
          td6.appendChild(toggleA);
        }
      }
      if (key == 'setTime') {
        td5.innerText = data[i][key];
      }
    }
    toggleA.addEventListener('click', function (event) {
      event.preventDefault();
      var link = this;
      var url = document.querySelector('input[name=api_changeDiscountStatus]').value;
      var postData = {
        discountPolicyId: link.getAttribute('data-discountPolicyId'),
        status: link.getAttribute('data-status')
      };
      // console.log(url, postData)
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_changeDiscountStatus)(url, postData);
    });
    tbody.appendChild(tr);
  }
  (0,_Paginate__WEBPACK_IMPORTED_MODULE_14__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_getAllDiscountPolicy);
};

// 调账模态：
function Modal(data, title, id) {
  this.data = data;
  this.title = title;
  this.id = id ? id : null;
}
Modal.prototype.create = function () {
  var data = this.data,
    titleText = this.title,
    modalId = this.id,
    modal = document.createElement('div'),
    dialog = document.createElement('div'),
    mheader = document.createElement('div'),
    mtitle = document.createElement('h2'),
    mbody = document.createElement('div'),
    mform = document.createElement('form');
  modal.setAttribute('id', modalId);
  modal.setAttribute('uk-modal', '');
  dialog.setAttribute('class', 'uk-modal-dialog');
  mheader.setAttribute('class', 'uk-modal-header');
  mtitle.setAttribute('class', 'uk-modal-title');
  mtitle.innerText = titleText;
  mbody.setAttribute('class', 'uk-modal-body');
  mbody.setAttribute('uk-overflow-auto', '');
  mform.setAttribute('class', 'uk-grid-small');
  mform.setAttribute('uk-grid', '');
  mform.setAttribute('data-stockNo', data.stockNo);
  mheader.appendChild(mtitle);
  var feeItemList = JSON.parse(data.feeItemList);
  // console.log(feeItemList);
  for (var i = 0; i < feeItemList.length; i++) {
    var els = Modal.createInpList(feeItemList[i]);
    for (var j = 0; j < els.length; j++) {
      mform.appendChild(els[j]);
    }
  }
  var totalFeeInput = Modal.getTotalFeeInput(data, 'totalFee', '总金额');
  var descTextarea = Modal.getDescTextarea('description', '备注');
  var buttonSection = Modal.getButtonSection(mform);
  mform.appendChild(totalFeeInput);
  mform.appendChild(descTextarea);
  mform.appendChild(buttonSection);
  Modal.setInpLinks(mform, data.feeWt);
  mbody.appendChild(mform);
  dialog.appendChild(mheader);
  dialog.appendChild(mbody);
  modal.appendChild(dialog);
  return modal;
};
Modal.setInpLinks = function (form, feeWt) {
  var inp_feeItemList = form.querySelectorAll('input[data-feeItemList]'),
    inp_totalfee = form.querySelector('input[name=totalFee]');
  var inp_spec = form.querySelector('input[data-fee=spec]'),
    inp_rate = null;
  if (inp_spec) {
    inp_rate = form.querySelector('input[name=feerate]');
    inp_rate.addEventListener('blur', function (event) {
      event.preventDefault();
      var oldValue = this.value;
      inp_spec.setAttribute('value', getSpecFee(feeWt, oldValue));
      inp_totalfee.setAttribute('value', getTotalFee());
    });
  }
  for (var i = 0; i < inp_feeItemList.length; i++) {
    var list = inp_feeItemList[i];
    if (list.name != 'feerate' && list.getAttribute('data-fee') != 'spec') {
      list.addEventListener('blur', function (event) {
        event.preventDefault();
        inp_totalfee.setAttribute('value', getTotalFee());
      });
    }
  }
  function getTotalFee() {
    var result = 0;
    for (var i = 0; i < inp_feeItemList.length; i++) {
      var list = inp_feeItemList[i];
      if (list.name != 'feerate' || list.getAttribute('data-fee') != 'spec') {
        result += Number(list.value);
      }
    }
    return result;
  }
  function getSpecFee(feeWt, oldValue) {
    var result = 0;
    result = Number(feeWt) * Number(oldValue);
    return Math.round(result);
  }
};
Modal.getPostData = function (form) {
  var postData = {
    stockNo: '',
    totalFee: '',
    feeItemList: [],
    remark: ''
  };
  var feeItemListNode = form.querySelectorAll('input[data-feeItemList]'),
    feerateNode = form.querySelector('input[name=feerate]');
  postData.stockNo = form.getAttribute('data-stockNo');
  postData.totalFee = form.querySelector('input[name=totalFee]').value;
  postData.remark = form.querySelector('textarea[name=description]').value;
  for (var i = 0; i < feeItemListNode.length; i++) {
    var obj = {};
    obj.feeId = feeItemListNode[i].name;
    if (feeItemListNode[i].getAttribute('data-fee') === 'spec') {
      obj.feerate = feerateNode.value;
    }
    obj.fee = feeItemListNode[i].value;
    obj.feeShortNM = feeItemListNode[i].getAttribute('data-feeShortNM');
    postData.feeItemList.push(obj);
  }
  return postData;
};
Modal.getButtonSection = function (form) {
  var mSection = document.createElement('section'),
    mSubmitBtn = document.createElement('button'),
    mCancelBtn = document.createElement('button');
  mSection.setAttribute('class', 'action-buttons');
  mSubmitBtn.setAttribute('class', 'button button-primary button-rounded uk-modal-close');
  mSubmitBtn.innerText = '确定';
  mSubmitBtn.style.marginRight = '5px';
  mSubmitBtn.addEventListener('click', function (event) {
    event.preventDefault();
    var url = document.querySelector('input[name=api_stationFeeUpdate]').value;
    var data = Modal.getPostData(form);
    // console.log(url, data);
    (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_15__.fetch_sta_updateFee)(url, data);
  });
  mCancelBtn.setAttribute('class', 'button button-rounded uk-modal-close');
  mCancelBtn.innerText = '取消';
  mSection.appendChild(mSubmitBtn);
  mSection.appendChild(mCancelBtn);
  return mSection;
};
Modal.getDescTextarea = function (name, text) {
  var mDiv = document.createElement('div'),
    mLabel = document.createElement('label'),
    mTextarea = document.createElement('textarea');
  mDiv.setAttribute('class', 'uk-width-1-1');
  mLabel.setAttribute('class', 'uk-form-label');
  mLabel.innerText = text;
  mLabel.setAttribute('for', name);
  mTextarea.setAttribute('class', 'uk-textarea');
  mTextarea.setAttribute('name', name);
  mTextarea.setAttribute('rows', 4);
  mTextarea.setAttribute('placeholder', '备注信息最多可输入100字');
  mTextarea.setAttribute('maxlength', 100);
  mTextarea.setAttribute('style', 'resize: none');
  mDiv.appendChild(mLabel);
  mDiv.appendChild(mTextarea);
  return mDiv;
};
Modal.getTotalFeeInput = function (data, name, text) {
  var mDiv = document.createElement('div'),
    mLabel = document.createElement('label'),
    mInput = document.createElement('input'),
    feeItemList = JSON.parse(data.feeItemList),
    totalFee = 0;
  mDiv.setAttribute('class', 'uk-width-1-1');
  mLabel.setAttribute('class', 'uk-form-label');
  mLabel.innerText = text;
  mLabel.setAttribute('for', name);
  mInput.setAttribute('class', 'uk-input');
  mInput.setAttribute('type', 'number');
  mInput.setAttribute('readonly', '');
  mInput.setAttribute('name', name);
  for (var i = 0; i < feeItemList.length; i++) {
    totalFee += Number(feeItemList[i].fee);
  }
  mInput.setAttribute('value', totalFee);
  mDiv.appendChild(mLabel);
  mDiv.appendChild(mInput);
  return mDiv;
};
Modal.createInpList = function (data) {
  var feerate = data.feerate ? data.feerate : null,
    fee = data.fee,
    feeId = data.feeId,
    feeShortNM = data.feeShortNM;
  if (feeShortNM === '处置费') {
    var el1 = createInp('feerate'),
      el2 = createInp('spec');
    return [el1, el2];
  } else {
    var el = createInp();
    return [el];
  }
  function createInp(type) {
    var flag = type === 'feerate',
      formItem = document.createElement('div'),
      label = document.createElement('label'),
      input = document.createElement('input');
    var inpMaxLength = 15; // 最大输入字符数量
    formItem.setAttribute('class', 'uk-width-1-2');
    label.setAttribute('class', 'uk-form-label');
    input.setAttribute('class', 'uk-input');
    input.setAttribute('type', 'number');
    input.setAttribute('min', 0);
    input.setAttribute('name', flag ? 'feerate' : feeId);
    if (type === 'spec') {
      // 处置费不可编辑
      input.setAttribute('data-fee', 'spec');
      input.setAttribute('readonly', '');
    } else {
      // 其他可以编辑
      if (!flag) {
        // 除费率外其他费用限制字符
        input.setAttribute('maxlength', inpMaxLength);
      }
      input.addEventListener('focus', function (event) {
        event.preventDefault();
        this.value = Number(this.value);
        if (flag) {
          // 费率初始化
          this.value = Math.round(this.value * 100) / 100;
        } else {
          // 其他初始化
          this.value = Math.round(this.value);
        }
        this.select();
      });
      input.addEventListener('blur', function (event) {
        event.preventDefault();
        this.value = Number(this.value);
      });
    }
    label.setAttribute('for', input.name);
    label.innerText = flag ? '地面费率' : feeShortNM;
    if (!flag) {
      input.setAttribute('data-feeItemList', '');
      // 非费率只能输入固定字符内整数
      input.addEventListener('input', function (event) {
        event.preventDefault();
        this.value = this.value.replace(/\D/g, '');
        if (this.value.length > inpMaxLength) {
          this.value = this.value.slice(0, inpMaxLength);
        }
      });
    } else {
      // 费率只能输入两位小数
      input.addEventListener('input', function (event) {
        event.preventDefault();
        this.value = this.value.match(/^\d+(?:\.\d{0,2})?/);
      });
    }
    input.setAttribute('value', flag ? feerate : fee);
    input.setAttribute('step', flag ? '0.01' : '1');
    input.setAttribute('data-feeShortNM', feeShortNM);
    formItem.appendChild(label);
    formItem.appendChild(input);
    return formItem;
  }
};
function fn_getModal(data, title, id) {
  var mod = new Modal(data, title, id);
  return mod.create();
}

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\SystemPages.js":
/*!******************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\SystemPages.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sys_table": () => (/* binding */ Sys_table),
/* harmony export */   "initSystem_baseData": () => (/* binding */ initSystem_baseData),
/* harmony export */   "initSystem_billMangement_queryBills": () => (/* binding */ initSystem_billMangement_queryBills),
/* harmony export */   "initSystem_getAllConsumer": () => (/* binding */ initSystem_getAllConsumer),
/* harmony export */   "initSystem_getAllDiscountPolicy": () => (/* binding */ initSystem_getAllDiscountPolicy),
/* harmony export */   "initSystem_getDiscountPolicy": () => (/* binding */ initSystem_getDiscountPolicy),
/* harmony export */   "initSystem_systemQueryBillDetails_new": () => (/* binding */ initSystem_systemQueryBillDetails_new),
/* harmony export */   "initSystem_systemQueryBill_new": () => (/* binding */ initSystem_systemQueryBill_new)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");
/* harmony import */ var _StationPages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StationPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\StationPages.js");
/* harmony import */ var _AjaxManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AjaxManager */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AjaxManager.js");
/* harmony import */ var _QueryDict__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./QueryDict */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\QueryDict.js");
/* harmony import */ var _Paginate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Paginate */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Paginate.js");






function initSystem_baseData() {
  return (0,_StationPages__WEBPACK_IMPORTED_MODULE_2__.initStation_baseData)();
}
function initSystem_billMangement_queryBills() {
  return (0,_StationPages__WEBPACK_IMPORTED_MODULE_2__.initStation_billMangement_queryBills)();
}
function initSystem_systemQueryBill_new() {
  return (0,_StationPages__WEBPACK_IMPORTED_MODULE_2__.initStation_stationQueryBill_new)();
}
function initSystem_systemQueryBillDetails_new() {
  return (0,_StationPages__WEBPACK_IMPORTED_MODULE_2__.initStation_stationQueryBillDetails_new)();
}
function initSystem_getAllConsumer() {
  // bind submit button:
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fn_initSubmitBtn)(1, 10, _AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fetch_sys_getAllConsumer);
  // bind export button:
  (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fn_initExportBtn)(_AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fetch_exportExcel);
}
function initSystem_getAllDiscountPolicy() {
  var api_getAllSupplier_url = document.querySelector('input[name=api_getAllSupplier]').value;
  (0,_QueryDict__WEBPACK_IMPORTED_MODULE_4__["default"])('DISCOUNT_TYPE', function (res) {
    // console.log(res)
    // distill select:
    var sel = document.getElementById('discountType');
    _Global__WEBPACK_IMPORTED_MODULE_1__["default"].initDiscoutTypeSel(res.data, sel);
    $.ajax({
      url: api_getAllSupplier_url,
      success: function success(res) {
        // distill supplier:
        var data = res.data;
        var sel = document.getElementById('supplierId');
        _Global__WEBPACK_IMPORTED_MODULE_1__["default"].initSupplierSel(data, sel);
        // init Wdate:
        _Global__WEBPACK_IMPORTED_MODULE_1__["default"].WdateInit('startTime', 'endTime');
        _Global__WEBPACK_IMPORTED_MODULE_1__["default"].WdateInit('setStartTime', 'setEndTime');
        // bind submit button:
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fn_initSubmitBtn)(1, 10, _AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fetch_sys_getAllDiscountPolicy);
      }
    });
  });
}
function initSystem_getDiscountPolicy() {
  var discountPolicyId = document.querySelector('input[name=discountPolicyId]').value;
  var url = document.querySelector('input[name=api_getDiscountPolicy]').value;
  var data = {
    discountPolicyId: discountPolicyId
  };
  $.ajax({
    url: url,
    data: JSON.stringify(data),
    success: function success(res) {
      if ((0,_AjaxManager__WEBPACK_IMPORTED_MODULE_3__.checkRes)(res) === false) return;
      console.log(res);
      try {
        var data = res.data;
        if (data.length < 1) {
          UIkit.modal.alert('无数据');
        }
        _Global__WEBPACK_IMPORTED_MODULE_1__["default"].initDiscountDetails(data);
      } catch (error) {
        alert(error);
      }
    }
  });
  // 绑定返回button
  document.getElementById('btnBack').addEventListener('click', function (event) {
    event.preventDefault();
    var url = document.querySelector('input[name=url_back]').value;
    window.location.href = url;
  });
}
function Sys_table() {}
Sys_table.prototype.getTable_userInfo = function (res, pageNumber, pageSize) {
  var table = document.querySelector('#dataTable');
  var thead = table.querySelector('thead');
  thead.innerHTML = '';
  var trInThead = document.createElement('tr');
  thead.appendChild(trInThead);
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '序号');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '客户代码');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '货运公司全称');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '状态');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '用户状态');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '结算方式');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '操作');
  var tbody = table.querySelector('tbody');
  tbody.innerHTML = '';
  var data = res.data.consumerList;
  if (!data || data.length < 1) {
    var tr0 = _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
    tbody.appendChild(tr0);
    return;
  }
  for (var i = 0; i < data.length; i++) {
    var tr = document.createElement('tr');
    var tdSerial = document.createElement('td');
    tr.appendChild(tdSerial);
    tdSerial.innerText = i + 1 + (Number(pageNumber) - 1) * Number(pageSize);
    var td1 = document.createElement('td');
    tr.appendChild(td1);
    var td2 = document.createElement('td');
    tr.appendChild(td2);
    var td3 = document.createElement('td');
    tr.appendChild(td3);
    var td4 = document.createElement('td');
    tr.appendChild(td4);
    var td5 = document.createElement('td');
    tr.appendChild(td5);
    var td6 = document.createElement('td');
    tr.appendChild(td6);
    var toDiscountPoliciesA = document.createElement('a');
    for (var key in data[i]) {
      if (key == 'customerId') {
        td1.innerText = data[i][key];
        toDiscountPoliciesA.setAttribute('data-customerId', data[i][key]);
      }
      if (key == 'customerNameChn') {
        td2.innerText = data[i][key];
      }
      if (key == 'statusDesc') {
        td3.innerText = data[i][key];
      }
      if (key == 'status') {
        td3.setAttribute('data-' + key, data[i][key]);
      }
      if (key == 'canYesDesc') {
        td4.innerText = data[i][key];
      }
      if (key == 'canYes') {
        td4.setAttribute('data-' + key, data[i][key]);
      }
      if (key == 'feeWayDesc') {
        td5.innerText = data[i][key];
      }
      if (key == 'feeWayId') {
        td5.setAttribute('data-' + key, data[i][key]);
      }
    }

    // 如果已注册且月结：
    if (td3.getAttribute('data-status') == '1' && td5.getAttribute('data-feeWayId') == 'MP') {
      toDiscountPoliciesA.innerText = '优惠政策查看';
      toDiscountPoliciesA.href = '#ShowDiscountPolicies';
      td6.appendChild(toDiscountPoliciesA);
      toDiscountPoliciesA.addEventListener('click', function (event) {
        event.preventDefault();
        var link = this;
        var url = document.querySelector('input[name=api_queryDiscountCustomer]').value;
        var data = {
          customerId: link.getAttribute('data-customerId')
        };
        (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fetch_sys_queryDiscountCustomer)(url, data);
      });
    } else {
      td6.innerText = '-';
    }
    tbody.appendChild(tr);
  }

  // 设置pagination
  (0,_Paginate__WEBPACK_IMPORTED_MODULE_5__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fetch_sys_getAllConsumer);
};
Sys_table.prototype.getTable_inModal = function (res) {
  var modal = document.getElementById('showDiscountPolicy');
  var table = modal.querySelector('table');
  var tbody = table.querySelector('tbody');
  tbody.innerHTML = '';
  var dataList = res.data;
  for (var i = 0; i < dataList.length; i++) {
    var tr = document.createElement('tr');
    var td1 = document.createElement('td');
    tr.appendChild(td1);
    var td2 = document.createElement('td');
    var spanStart = document.createElement('span');
    td2.appendChild(spanStart);
    var spanText = document.createElement('span');
    spanText.setAttribute('class', 'uk-margin-small-left uk-margin-small-right');
    spanText.innerText = '至';
    td2.appendChild(spanText);
    var spanEnd = document.createElement('span');
    td2.appendChild(spanEnd);
    tr.appendChild(td2);
    for (var key in dataList[i]) {
      if (key == 'discountPolicyName') td1.innerText = dataList[i][key];else if (key == 'startTimeStr') spanStart.innerText = dataList[i][key];else if (key == 'endTimeStr') spanEnd.innerText = dataList[i][key];else td1.setAttribute('data-' + key, dataList[i][key]);
    }
    tbody.appendChild(tr);
  }
  UIkit.modal(modal).show();
};
Sys_table.prototype.getTable_queryPolicies = function (res, pageNumber, pageSize) {
  var table = document.querySelector('#dataTable');
  var thead = table.querySelector('thead');
  thead.innerHTML = '';
  var trInThead = document.createElement('tr');
  thead.appendChild(trInThead);
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '序号');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '优惠政策名称');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '优惠类型');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '有效期');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '设置时间');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '状态');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '所属货站');
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.setTh(trInThead, '操作');
  var tbody = table.querySelector('tbody');
  tbody.innerHTML = '';
  var data = res.data.systemDiscountPolicyList;
  // console.log(data);

  if (!data || data.length < 1) {
    var tr0 = _Global__WEBPACK_IMPORTED_MODULE_1__["default"].Table.showNoData(trInThead.querySelectorAll('th').length);
    tbody.appendChild(tr0);
    return;
  }
  for (var i = 0; i < data.length; i++) {
    var tr = document.createElement('tr');
    tbody.appendChild(tr);
    var tdSerial = document.createElement('td');
    tr.appendChild(tdSerial);
    tdSerial.innerText = i + 1 + (Number(pageNumber) - 1) * Number(pageSize);
    var td1 = document.createElement('td');
    tr.appendChild(td1);
    var td2 = document.createElement('td');
    tr.appendChild(td2);
    var td3 = document.createElement('td');
    tr.appendChild(td3);
    var spanSta = document.createElement('span');
    td3.appendChild(spanSta);
    var spanTex = document.createElement('span');
    spanTex.setAttribute('class', 'uk-margin-small-left uk-margin-small-right');
    spanTex.innerText = '至';
    td3.appendChild(spanTex);
    var spanEnd = document.createElement('span');
    td3.appendChild(spanEnd);
    var td4 = document.createElement('td');
    tr.appendChild(td4);
    var td5 = document.createElement('td');
    tr.appendChild(td5);
    var td6 = document.createElement('td');
    tr.appendChild(td6);
    var td7 = document.createElement('td');
    tr.appendChild(td7);
    var link = document.createElement('a');
    link.innerText = '查看详情';
    td7.appendChild(link);
    for (var key in data[i]) {
      if (key == 'discountPolicyName') {
        td1.innerText = data[i][key] === null ? '-' : data[i][key];
      }
      if (key == 'discountTypeDesc') {
        td2.innerText = data[i][key] === null ? '-' : data[i][key];
      }
      if (key == 'startTime') {
        spanSta.innerText = data[i][key] === null ? '-' : data[i][key];
      }
      if (key == 'endTime') {
        spanEnd.innerText = data[i][key] === null ? '-' : data[i][key];
      }
      if (key == 'setTime') {
        td4.innerText = data[i][key] === null ? '-' : data[i][key];
      }
      if (key == 'statusDesc') {
        td5.innerText = data[i][key] === null ? '-' : data[i][key];
      }
      if (key == 'supplierName') {
        td6.innerText = data[i][key] === null ? '-' : data[i][key];
      }
    }
    link.setAttribute('href', 'policiesManagement/' + data[i].discountPolicyId);
  }

  // 设置pagination
  (0,_Paginate__WEBPACK_IMPORTED_MODULE_5__["default"])(res, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_3__.fetch_sys_getAllDiscountPolicy);
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\canvas.js":
/*!*************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\canvas.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Canvas)
/* harmony export */ });
/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chart.js/auto */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\chart.js\\auto\\auto.mjs");

function Canvas(selector, config) {
  if (!selector) {
    return console.error('缺少参数: ("#canvasID", {[iframeNode: DocumentIframeNode, ctx: "2d"]})');
  }
  var rootDocument = config && config.iframeNode ? config.iframeNode.contentDocument : document;
  var cvs = rootDocument.querySelector(selector);
  var ctx = config && config.ctx ? config.ctx : '2d';
  if (!cvs) return console.error('不能初始化canvas，因为定位不到DOM');
  if (!cvs.getContext) return console.error('浏览器不支持canvas');
  this.node = cvs;
  this.ctx = cvs.getContext(ctx);
  this.height = 300;
  this.width = 150;
  console.log('canvas初始化成功');
}
Canvas.prototype.setSize = function (ratio) {
  try {
    var canvasNode = this.node;
    var parent = canvasNode.parentNode;
    var parentWidth = window.getComputedStyle(parent).getPropertyValue('max-width');
    canvasNode.width = parseInt(parentWidth);
    var canvasRatio = ratio;
    var canvasHeight = parseInt(canvasNode.width) * parseInt(canvasRatio[1]) / parseInt(canvasRatio[0]);
    canvasNode.height = canvasHeight;
    this.width = canvasNode.width;
    this.height = canvasNode.height;
    return this;
  } catch (e) {
    console.error(e.stack);
    return this;
  }
};
Canvas.prototype.buildChart = function (chartjsConfig) {
  try {
    var ctx = this.ctx;
    chart_js_auto__WEBPACK_IMPORTED_MODULE_0__["default"].defaults.font.size = 14;
    var chart = new chart_js_auto__WEBPACK_IMPORTED_MODULE_0__["default"](ctx, chartjsConfig);
    this.chart = chart;
    this.chartjsConfig = chartjsConfig;
    console.log('Chart.js配置成功');
    return this;
  } catch (e) {
    console.error(e.stack);
    return this;
  }
};

// Canvas.prototype.setChartTitle = function(titleText) {
//   try {
//     const ctx = this.ctx
//     const chartTitle = titleText? titleText: '未命名图表'
//     ctx.fillText(chartTitle, 10, 50)
//     return this
//   } catch(e) {
//     console.error(e.stack)
//     return this
//   }

// }

// Canvas.prototype.drawXYAxis = function(config) {
//   try {
//     const ctx = this.ctx
//     const xTitle = config.xTitle
//     const yTitle = config.yTitile
//     Canvas.drawX(this, xTitle)
//     Canvas.drawY(this, yTitle)
//     this.XYAxis = {
//       xTitle: xTitle,
//       yTitle: yTitle,
//     }
//     return this
//   } catch(e) {
//     console.error(e.stack)
//     return this
//   }
// }

// Canvas.drawX = function(canvas, titleArray) {
//   const width = canvas.width
//   const titleCount = titleArray.length

// }
// Canvas.drawY = function(canvas, titleArray) {

// }

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\dataStatistic.js":
/*!********************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\dataStatistic.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dsDetails": () => (/* binding */ dsDetails),
/* harmony export */   "dsIndex": () => (/* binding */ dsIndex)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");
/* harmony import */ var _Paginate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Paginate */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Paginate.js");
/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./canvas */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\canvas.js");
/* harmony import */ var _dataStatisticChartConfig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dataStatisticChartConfig */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\dataStatisticChartConfig.js");
/* harmony import */ var _AjaxManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AjaxManager */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AjaxManager.js");









function dsIndex() {
  console.log('进入 ----------> dataStatistic Index');
  initWdatePicker();
  queryBillRule().then(function (response) {
    return setBillRule(response);
  }).then(function () {
    return bindButtons(loadData, saveBillRuleId);
  }).catch(function (error) {
    return console.error(error);
  });
}
function dsDetails() {
  console.log('进入 ----------> dataStatistic Details');
  setParentLink('#parentLink', 'dovepay-freight/station/dataStatistic');
  queryBillRule().then(function (response) {
    return setBillRuleText(response);
  }).catch(function (error) {
    return console.error(error);
  });

  /* table */
  bindButtons(loadDataDetails, null, function () {
    history.back();
  }).catch(function (error) {
    return console.error(error);
  });
}
function initWdatePicker() {
  try {
    var billTimeInp = document.querySelector('input[name="billTime"]');
    billTimeInp.addEventListener('click', function () {
      WdatePicker({
        el: this,
        dateFmt: 'yyyy',
        maxDate: '%y'
      });
    });
  } catch (e) {
    console.error(e.stack);
  }
}
function queryBillRule() {
  return new Promise(function (res, rej) {
    try {
      var url = document.querySelector('input[name="api_queryEffectiveBillRule"]').value;
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetchData)(url, '', res);
    } catch (e) {
      rej(e.stack);
    }
  });
}
function setBillRule(response) {
  return new Promise(function (resolve, rej) {
    try {
      var billRuleIdSel = document.querySelector('select[name="billRuleId"]');
      var dataArr = response.data;
      if (dataArr.length > 0) {
        dataArr.forEach(function (data) {
          var option = document.createElement('option');
          option.setAttribute('value', data.billRuleId);
          option.innerText = data.billRuleName;
          billRuleIdSel.appendChild(option);
        });
      }
      resolve('success');
    } catch (e) {
      rej(e.stack);
      // console.error(e.stack)
    }
  });
}

function setBillRuleText(res) {
  try {
    var id = document.querySelector('input[name="billRuleId"]');
    var text = document.querySelector('#billRuleText');
    if (!id.value) {
      text.value = '全部';
    } else {
      var dataArr = res.data;
      dataArr.some(function (data) {
        if (id.value === data.billRuleId) {
          text.value = data.billRuleName;
          return true;
        }
      });
    }
  } catch (e) {
    console.error(e.stack);
  }
}
function bindButtons(cb, dataHandler, checkResCallback) {
  return new Promise(function (res, rej) {
    try {
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fn_initExportBtn)(_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetch_exportExcel);
    } catch (e) {
      console.error(e.stack);
    }
    try {
      (0,_AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fn_initSubmitBtn)(1, 15, _AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetchData, cb, dataHandler, checkResCallback);
    } catch (e) {
      rej(e.stack);
    }
  });
}
function saveBillRuleId(data) {
  try {
    document.querySelector('input[name="billRuleIdValue"]').value = data.billRuleId;
  } catch (e) {
    console.error(e.stack);
  }
}
function loadData(response, pageNumber, pageSize) {
  try {
    console.log(response);
    var table = document.getElementById('dataTable');
    var trInThead = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table.getThTr(table);
    setThead(trInThead);
    setTbody(table, response);
    (0,_Paginate__WEBPACK_IMPORTED_MODULE_5__["default"])(response, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetchData, loadData);
  } catch (e) {
    console.error(e.stack);
  }
  function setThead(tr) {
    var set = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table.setTh;
    var textArr = ['排名', '往来户编码', '商户编号', '往来户名称', '年度', '总金额', '操作'];
    textArr.forEach(function (text) {
      set(tr, text);
    });
  }
  function setTbody(table, res) {
    var tbody = table.querySelector('tbody');
    tbody.innerHTML = '';
    var data = res.data.summaryList;
    if (!data || data.length < 1) {
      var tab = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table;
      var tr0 = tab.showNoData(tab.getThTr(table).querySelectorAll('th').length);
      tbody.appendChild(tr0);
      return;
    }
    data.forEach(function (line /*, index*/) {
      var tr = document.createElement('tr');
      tbody.appendChild(tr);
      // const tdSerial = document.createElement('td')
      // tr.appendChild(tdSerial)
      // tdSerial.innerText = index + 1 + (parseInt(pageNumber) - 1) * parseInt(pageSize)
      var set = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table.setTd;
      var propArr = ['serialNumber', 'esbCustomerId', 'accountId', 'esbCustomerName', 'billTime', 'totalAmount'];
      propArr.forEach(function (prop) {
        set(tr, line[prop]);
      });
      /* 查看详情 */
      var tdAction = document.createElement('td');
      var tdActionLink = document.createElement('a');
      tdAction.appendChild(tdActionLink);
      tr.appendChild(tdAction);
      tdActionLink.innerText = '查看详细';
      propArr.forEach(function (prop) {
        tdActionLink.dataset[prop] = line[prop];
      });
      tdActionLink.addEventListener('click', toDetails);
    });
  }
}
function toDetails(event) {
  event.preventDefault();
  var el = event.target;
  try {
    var loc = window.location;
    var url = "".concat(loc.protocol, "//").concat(loc.host, "/dovepay-freight/station/dataStatistic/details");
    var postData = {
      billRuleId: document.querySelector('input[name=billRuleIdValue]').value
    };
    if (el.dataset) {
      for (var prop in el.dataset) {
        postData[prop] = el.dataset[prop];
      }
    }
    _Global__WEBPACK_IMPORTED_MODULE_4__["default"].submVirtForm(url, postData);
  } catch (e) {
    console.error(e.stack);
  }
}
function setParentLink(node, link) {
  var a = document.querySelector(node);
  var loc = window.location;
  a.setAttribute('href', "".concat(loc.protocol, "//").concat(loc.host, "/").concat(link));
}
function loadDataDetails(response, pageNumber, pageSize) {
  try {
    console.log(response);
    var table = document.getElementById('dataTable');
    var trInThead = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table.getThTr(table);
    setThead(trInThead);
    setTbody(table, response);
    (0,_Paginate__WEBPACK_IMPORTED_MODULE_5__["default"])(response, pageNumber, pageSize, _AjaxManager__WEBPACK_IMPORTED_MODULE_8__.fetchData, loadData);
  } catch (e) {
    console.error(e.stack);
  }
  try {
    chartHandler(response);
  } catch (e) {
    console.error(e.stack);
  }
  function setThead(tr) {
    var set = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table.setTh;
    var textArr = ['序号', '年月', '总金额', '结算客户名称'];
    textArr.forEach(function (text) {
      set(tr, text);
    });
  }
  function setTbody(table, res) {
    var tbody = table.querySelector('tbody');
    tbody.innerHTML = '';
    var data = res.data;
    if (!data || data.length < 1) {
      var tab = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table;
      var tr0 = tab.showNoData(tab.getThTr(table).querySelectorAll('th').length);
      tbody.appendChild(tr0);
      return;
    }
    data.forEach(function (line) {
      var tr = document.createElement('tr');
      tbody.appendChild(tr);
      var set = _Global__WEBPACK_IMPORTED_MODULE_4__["default"].Table.setTd;
      var propArr = ['serialNumber', 'billTime', 'totalAmount', 'esbCustomerName'];
      propArr.forEach(function (prop) {
        set(tr, line[prop]);
      });
    });
  }
  /* chart */
  function chartHandler(res) {
    var cvs = new _canvas__WEBPACK_IMPORTED_MODULE_6__["default"]('#dataStatisticChart').setSize([16, 9]).buildChart((0,_dataStatisticChartConfig__WEBPACK_IMPORTED_MODULE_7__["default"])(res));
    console.log(cvs);
  }
}

// canvas.setChartTitle(cvs, '图表')

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\dataStatisticChartConfig.js":
/*!*******************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\dataStatisticChartConfig.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.sort.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.sort.js");
/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_2__);



var color = {
  blue: 'rgb(3, 78, 162)',
  yellow: 'rgb(250, 166, 26)'
};
var legendLabel = '金额';
var type = 'bar';
var options = {
  layout: {
    padding: 20
  }
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(res) {
  var axisData = getAxisData(res);
  return {
    type: type,
    data: getData(axisData),
    options: options
  };
}
function getAxisData(res) {
  try {
    var data = res.data;
    var axisData = [];
    data.forEach(function (line) {
      var object = {};
      object.label = line.billTime;
      object.index = line.totalAmount;
      axisData.push(object);
    });
    axisData.sort(function (firstItem, secondItem) {
      return parseInt(firstItem.label) - parseInt(secondItem.label);
    });
    return axisData;
  } catch (e) {
    console.error(e.stack);
  }
}
function getData(data) {
  return {
    labels: getLabels(data),
    datasets: [{
      data: getIndex(data),
      label: legendLabel,
      backgroundColor: color.blue,
      borderColor: color.blue,
      maxBarThickness: 100
    }]
  };
  function getLabels(data) {
    var array = [];
    data.forEach(function (line) {
      array.push(line.label);
    });
    return array;
  }
  function getIndex(data) {
    var array = [];
    data.forEach(function (line) {
      array.push(line.index);
    });
    return array;
  }
}

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\initJqueryAjax.js":
/*!*********************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\initJqueryAjax.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");


// Global:
// Ajax设置：
$.ajaxSetup({
  headers: {
    accountId: $('header #accountId').val(),
    userId: $('header #userId').val(),
    type: $('header #userType').val()
  },
  type: 'POST',
  // for java api
  dataType: 'json',
  contentType: 'application/json',
  timeout: 10000
});
// Ajax错误处理：
$(document).ajaxError(function (event, xhr, settings) {
  var reqUrl = settings.url;
  var reqData = settings.data;
  var res = xhr.status + xhr.statusText;
  if (console) console.error(reqUrl, reqData, res);
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].errorHandler('服务器数据获取失败: 错误码: ' + xhr.status + ';<br>错误描述: ' + getStatusText(xhr.statusText));
  function getStatusText(statusStr) {
    var text = statusStr;
    if (statusStr === 'timeout') text = '请求超时';
    return text;
  }
});
// loading遮罩实现：
$(document).ajaxStart(function () {
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].loading.show();
});
$(document).ajaxStop(function () {
  _Global__WEBPACK_IMPORTED_MODULE_1__["default"].loading.hide();
});
// 获取表格数据：
$.fn.serializeObject = function () {
  var o = {};
  var a = this.serializeArray();
  $.each(a, function () {
    var value = _Global__WEBPACK_IMPORTED_MODULE_1__["default"].isJSON(this.value) ? JSON.parse(this.value) : this.value;
    if (o[this.name] !== undefined) {
      if (!o[this.name].push) {
        o[this.name] = [o[this.name]];
      }
      o[this.name].push(value || '');
    } else {
      o[this.name] = value || '';
    }
  });
  return o;
};

/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js":
/*!********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\a-callable.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-constructor.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\a-constructor.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-constructor.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a constructor');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-possible-prototype.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\a-possible-prototype.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");

var $String = String;
var $TypeError = TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw $TypeError("Can't set " + $String(argument) + ' as a prototype');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\add-to-unscopables.js":
/*!****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\add-to-unscopables.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var create = __webpack_require__(/*! ../internals/object-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-create.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js").f);

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\advance-string-index.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\advance-string-index.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var charAt = (__webpack_require__(/*! ../internals/string-multibyte */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-multibyte.js").charAt);

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-instance.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\an-instance.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js");

var $TypeError = TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw $TypeError('Incorrect invocation');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\an-object.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-for-each.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-for-each.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $forEach = (__webpack_require__(/*! ../internals/array-iteration */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-iteration.js").forEach);
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-method-is-strict.js");

var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
} : [].forEach;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-from.js":
/*!********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-from.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");
var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array-iterator-method.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-constructor.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator-method.js");

var $Array = Array;

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (;!(step = call(next, iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = lengthOfArrayLike(O);
    result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-includes.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-includes.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-iteration.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-iteration.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\indexed-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-species-create.js");

var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-method-has-species-support.js":
/*!******************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-method-has-species-support.js ***!
  \******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-v8-version.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-method-is-strict.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-method-is-strict.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call -- required for testing
    method.call(null, argument || function () { return 1; }, 1);
  });
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice-simple.js":
/*!****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-slice-simple.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property.js");

var $Array = Array;
var max = Math.max;

module.exports = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = $Array(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-slice.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");

module.exports = uncurryThis([].slice);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-sort.js":
/*!********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-sort.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arraySlice = __webpack_require__(/*! ../internals/array-slice-simple */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice-simple.js");

var floor = Math.floor;

var mergeSort = function (array, comparefn) {
  var length = array.length;
  var middle = floor(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(
    array,
    mergeSort(arraySlice(array, 0, middle), comparefn),
    mergeSort(arraySlice(array, middle), comparefn),
    comparefn
  );
};

var insertionSort = function (array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;

  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++) array[j] = element;
  } return array;
};

var merge = function (array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;

  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = (lindex < llength && rindex < rlength)
      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
      : lindex < llength ? left[lindex++] : right[rindex++];
  } return array;
};

module.exports = mergeSort;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-species-constructor.js":
/*!***********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-species-constructor.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ../internals/is-array */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-constructor.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? $Array : C;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-species-create.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\array-species-create.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arraySpeciesConstructor = __webpack_require__(/*! ../internals/array-species-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-species-constructor.js");

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js":
/*!******************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\call-with-safe-iteration-closing.js ***!
  \******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-close.js");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\check-correctness-of-iteration.js":
/*!****************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\check-correctness-of-iteration.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\classof-raw.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof.js":
/*!*****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\classof.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string-tag-support.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\copy-constructor-properties.js":
/*!*************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\copy-constructor-properties.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js");

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\correct-prototype-getter.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\correct-prototype-getter.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-html.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\create-html.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");

var quot = /"/g;
var replace = uncurryThis(''.replace);

// `CreateHTML` abstract operation
// https://tc39.es/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = toString(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + replace(toString(value), quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-iter-result-object.js":
/*!***********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\create-iter-result-object.js ***!
  \***********************************************************************************************************/
/***/ ((module) => {

// `CreateIterResultObject` abstract operation
// https://tc39.es/ecma262/#sec-createiterresultobject
module.exports = function (value, done) {
  return { value: value, done: done };
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-non-enumerable-property.js":
/*!****************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\create-non-enumerable-property.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property-descriptor.js":
/*!************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\create-property-descriptor.js ***!
  \************************************************************************************************************/
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\create-property.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-property-key.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property-descriptor.js");

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in-accessor.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\define-built-in-accessor.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\make-built-in.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js");

module.exports = function (target, name, descriptor) {
  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
  return defineProperty.f(target, name, descriptor);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\define-built-in.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js");
var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\make-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-global-property.js");

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-ins.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\define-built-ins.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");

module.exports = function (target, src, options) {
  for (var key in src) defineBuiltIn(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-global-property.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\define-global-property.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\delete-property-or-throw.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\delete-property-or-throw.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\try-to-string.js");

var $TypeError = TypeError;

module.exports = function (O, P) {
  if (!delete O[P]) throw $TypeError('Cannot delete property ' + tryToString(P) + ' of ' + tryToString(O));
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\descriptors.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-all.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\document-all.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

var documentAll = typeof document == 'object' && document.all;

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;

module.exports = {
  all: documentAll,
  IS_HTMLDDA: IS_HTMLDDA
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-create-element.js":
/*!*********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\document-create-element.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\does-not-exceed-safe-integer.js":
/*!**************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\does-not-exceed-safe-integer.js ***!
  \**************************************************************************************************************/
/***/ ((module) => {

var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\dom-iterables.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\dom-iterables.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\dom-token-list-prototype.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\dom-token-list-prototype.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-create-element.js");

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-ff-version.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-ff-version.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js");

var firefox = userAgent.match(/firefox\/(\d+)/i);

module.exports = !!firefox && +firefox[1];


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-browser.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-is-browser.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_DENO = __webpack_require__(/*! ../internals/engine-is-deno */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-deno.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-node.js");

module.exports = !IS_DENO && !IS_NODE
  && typeof window == 'object'
  && typeof document == 'object';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-deno.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-is-deno.js ***!
  \************************************************************************************************/
/***/ ((module) => {

/* global Deno -- Deno case */
module.exports = typeof Deno == 'object' && Deno && typeof Deno.version == 'object';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-ie-or-edge.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-is-ie-or-edge.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var UA = __webpack_require__(/*! ../internals/engine-user-agent */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js");

module.exports = /MSIE|Trident/.test(UA);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-ios-pebble.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-is-ios-pebble.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js");

module.exports = /ipad|iphone|ipod/i.test(userAgent) && typeof Pebble != 'undefined';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-ios.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-is-ios.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js");

// eslint-disable-next-line redos/no-vulnerable -- safe
module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-node.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-is-node.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");

module.exports = typeof process != 'undefined' && classof(process) == 'process';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-webos-webkit.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-is-webos-webkit.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js");

module.exports = /web0s(?!.*chrome)/i.test(userAgent);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-user-agent.js ***!
  \***************************************************************************************************/
/***/ ((module) => {

module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-v8-version.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-v8-version.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-webkit-version.js":
/*!*******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\engine-webkit-version.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-user-agent.js");

var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

module.exports = !!webkit && +webkit[1];


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\enum-bug-keys.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\enum-bug-keys.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js":
/*!****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\export.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-descriptor.js").f);
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-global-property.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-forced.js");

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js":
/*!***************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\fails.js ***!
  \***************************************************************************************/
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fix-regexp-well-known-symbol-logic.js":
/*!********************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\fix-regexp-well-known-symbol-logic.js ***!
  \********************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(/*! ../modules/es.regexp.exec */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.regexp.exec.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this-clause */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this-clause.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-exec.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-non-enumerable-property.js");

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

module.exports = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = uncurryThis(nativeMethod);
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
        }
        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
      }
      return { done: false };
    });

    defineBuiltIn(String.prototype, KEY, methods[0]);
    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-apply.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-apply.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-native.js");

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js":
/*!*******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-bind-context.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this-clause */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this-clause.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");
var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-native.js");

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-native.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-bind-native.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-call.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-native.js");

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-name.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-name.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this-accessor.js":
/*!****************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-uncurry-this-accessor.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");

module.exports = function (object, key, method) {
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
  } catch (error) { /* empty */ }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this-clause.js":
/*!**************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-uncurry-this-clause.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");

module.exports = function (fn) {
  // Nashorn bug:
  //   https://github.com/zloirock/core-js/issues/1128
  //   https://github.com/zloirock/core-js/issues/1130
  if (classofRaw(fn) === 'Function') return uncurryThis(fn);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js":
/*!*******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\function-uncurry-this.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-native.js");

var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\get-built-in.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator-method.js":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\get-iterator-method.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-method.js");
var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-null-or-undefined.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\get-iterator.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\try-to-string.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator-method.js");

var $TypeError = TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw $TypeError(tryToString(argument) + ' is not iterable');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-json-replacer-function.js":
/*!************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\get-json-replacer-function.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");

var push = uncurryThis([].push);

module.exports = function (replacer) {
  if (isCallable(replacer)) return replacer;
  if (!isArray(replacer)) return;
  var rawLength = replacer.length;
  var keys = [];
  for (var i = 0; i < rawLength; i++) {
    var element = replacer[i];
    if (typeof element == 'string') push(keys, element);
    else if (typeof element == 'number' || classof(element) == 'Number' || classof(element) == 'String') push(keys, toString(element));
  }
  var keysLength = keys.length;
  var root = true;
  return function (key, value) {
    if (root) {
      root = false;
      return value;
    }
    if (isArray(this)) return value;
    for (var j = 0; j < keysLength; j++) if (keys[j] === key) return value;
  };
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-method.js":
/*!********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\get-method.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");
var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-null-or-undefined.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-substitution.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\get-substitution.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");

var floor = Math.floor;
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
// eslint-disable-next-line redos/no-vulnerable -- safe
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }
  return replace(replacement, symbols, function (match, ch) {
    var capture;
    switch (charAt(ch, 0)) {
      case '$': return '$';
      case '&': return matched;
      case '`': return stringSlice(str, 0, position);
      case "'": return stringSlice(str, tailPos);
      case '<':
        capture = namedCaptures[stringSlice(ch, 1, -1)];
        break;
      default: // \d\d?
        var n = +ch;
        if (n === 0) return match;
        if (n > m) {
          var f = floor(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
          return match;
        }
        capture = captures[n - 1];
    }
    return capture === undefined ? '' : capture;
  });
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js":
/*!****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\global.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\has-own-property.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\hidden-keys.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\hidden-keys.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\host-report-errors.js":
/*!****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\host-report-errors.js ***!
  \****************************************************************************************************/
/***/ ((module) => {

module.exports = function (a, b) {
  try {
    // eslint-disable-next-line no-console -- safe
    arguments.length == 1 ? console.error(a) : console.error(a, b);
  } catch (error) { /* empty */ }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\html.js":
/*!**************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\html.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\ie8-dom-define.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\ie8-dom-define.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-create-element.js");

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\indexed-object.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\indexed-object.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\inherit-if-required.js":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\inherit-if-required.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-set-prototype-of.js");

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\inspect-source.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\inspect-source.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-store.js");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\internal-state.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/weak-map-basic-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\weak-map-basic-detection.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-non-enumerable-property.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function (it, metadata) {
    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function (it) {
    return store.get(it) || {};
  };
  has = function (it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array-iterator-method.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-array-iterator-method.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators.js");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array.js":
/*!******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-array.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-callable.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $documentAll = __webpack_require__(/*! ../internals/document-all */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-all.js");

var documentAll = $documentAll.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = $documentAll.IS_HTMLDDA ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-constructor.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-constructor.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\inspect-source.js");

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-forced.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-forced.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-null-or-undefined.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-null-or-undefined.js ***!
  \******************************************************************************************************/
/***/ ((module) => {

// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-object.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var $documentAll = __webpack_require__(/*! ../internals/document-all */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-all.js");

var documentAll = $documentAll.all;

module.exports = $documentAll.IS_HTMLDDA ? function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;
} : function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js":
/*!*****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-pure.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

module.exports = false;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-symbol.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\is-symbol.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\use-symbol-as-uid.js");

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterate.js":
/*!*****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\iterate.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\try-to-string.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array-iterator-method.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator-method.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-close.js");

var $TypeError = TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_RECORD) {
    iterator = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = IS_RECORD ? iterable.next : iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-close.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\iterator-close.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-method.js");

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-create-constructor.js":
/*!*************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\iterator-create-constructor.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var IteratorPrototype = (__webpack_require__(/*! ../internals/iterators-core */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators-core.js").IteratorPrototype);
var create = __webpack_require__(/*! ../internals/object-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-define.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\iterator-define.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var FunctionName = __webpack_require__(/*! ../internals/function-name */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-name.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/iterator-create-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-create-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-to-string-tag.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators-core.js");

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators-core.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\iterators-core.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var create = __webpack_require__(/*! ../internals/object-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-create.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-prototype-of.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  defineBuiltIn(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\iterators.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\length-of-array-like.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__(/*! ../internals/to-length */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-length.js");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\make-built-in.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\make-built-in.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-name.js").CONFIGURABLE);
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js");

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\math-trunc.js":
/*!********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\math-trunc.js ***!
  \********************************************************************************************/
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\microtask.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\microtask.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-descriptor.js").f);
var macrotask = (__webpack_require__(/*! ../internals/task */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\task.js").set);
var Queue = __webpack_require__(/*! ../internals/queue */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\queue.js");
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-ios.js");
var IS_IOS_PEBBLE = __webpack_require__(/*! ../internals/engine-is-ios-pebble */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-ios-pebble.js");
var IS_WEBOS_WEBKIT = __webpack_require__(/*! ../internals/engine-is-webos-webkit */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-webos-webkit.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-node.js");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var microtask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
var notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!microtask) {
  var queue = new Queue();

  var flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (fn = queue.get()) try {
      fn();
    } catch (error) {
      if (queue.head) notify();
      throw error;
    }
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessage
  // - onreadystatechange
  // - setTimeout
  } else {
    // `webpack` dev server bug on IE global methods - use bind(fn, global)
    macrotask = bind(macrotask, global);
    notify = function () {
      macrotask(flush);
    };
  }

  microtask = function (fn) {
    if (!queue.head) notify();
    queue.add(fn);
  };
}

module.exports = microtask;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\new-promise-capability.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\new-promise-capability.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");

var $TypeError = TypeError;

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw $TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-assign.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-assign.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-keys.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-symbols.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-property-is-enumerable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\indexed-object.js");

// eslint-disable-next-line es/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
var concat = uncurryThis([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-create.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-create.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var definePropertiesModule = __webpack_require__(/*! ../internals/object-define-properties */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-key.js");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-properties.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-define-properties.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\v8-prototype-define-bug.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-keys.js");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-define-property.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\ie8-dom-define.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\v8-prototype-define-bug.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-property-key.js");

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-descriptor.js":
/*!********************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-get-own-property-descriptor.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-property-key.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\ie8-dom-define.js");

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-names-external.js":
/*!************************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-get-own-property-names-external.js ***!
  \************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-object-getownpropertynames -- safe */
var classof = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var $getOwnPropertyNames = (__webpack_require__(/*! ../internals/object-get-own-property-names */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-names.js").f);
var arraySlice = __webpack_require__(/*! ../internals/array-slice-simple */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice-simple.js");

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySlice(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && classof(it) == 'Window'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-names.js":
/*!***************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-get-own-property-names.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-symbols.js":
/*!*****************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-get-own-property-symbols.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-prototype-of.js":
/*!*********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-get-prototype-of.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-key.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\correct-prototype-getter.js");

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-is-prototype-of.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-keys-internal.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-keys-internal.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var indexOf = (__webpack_require__(/*! ../internals/array-includes */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-includes.js").indexOf);
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\hidden-keys.js");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-keys.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-keys.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\enum-bug-keys.js");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-property-is-enumerable.js":
/*!***************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-property-is-enumerable.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-set-prototype-of.js":
/*!*********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-set-prototype-of.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable no-proto -- safe */
var uncurryThisAccessor = __webpack_require__(/*! ../internals/function-uncurry-this-accessor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this-accessor.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var aPossiblePrototype = __webpack_require__(/*! ../internals/a-possible-prototype */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-possible-prototype.js");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-to-string.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\object-to-string.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string-tag-support.js");
var classof = __webpack_require__(/*! ../internals/classof */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof.js");

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\ordinary-to-primitive.js":
/*!*******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\ordinary-to-primitive.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\own-keys.js":
/*!******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\own-keys.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\path.js":
/*!**************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\path.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");

module.exports = global;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\perform.js":
/*!*****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\perform.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-constructor-detection.js":
/*!***************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\promise-constructor-detection.js ***!
  \***************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-native-constructor.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-forced.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\inspect-source.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var IS_BROWSER = __webpack_require__(/*! ../internals/engine-is-browser */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-browser.js");
var IS_DENO = __webpack_require__(/*! ../internals/engine-is-deno */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-deno.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-v8-version.js");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var SPECIES = wellKnownSymbol('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);

var FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
    // Detect correctness of subclassing with @@species support
    var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });
    var FakePromise = function (exec) {
      exec(function () { /* empty */ }, function () { /* empty */ });
    };
    var constructor = promise.constructor = {};
    constructor[SPECIES] = FakePromise;
    SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
    if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  } return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
});

module.exports = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
  SUBCLASSING: SUBCLASSING
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-native-constructor.js":
/*!************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\promise-native-constructor.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");

module.exports = global.Promise;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-resolve.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\promise-resolve.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var newPromiseCapability = __webpack_require__(/*! ../internals/new-promise-capability */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-statics-incorrect-iteration.js":
/*!*********************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\promise-statics-incorrect-iteration.js ***!
  \*********************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-native-constructor.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\check-correctness-of-iteration.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-constructor-detection.js").CONSTRUCTOR);

module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {
  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\queue.js":
/*!***************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\queue.js ***!
  \***************************************************************************************/
/***/ ((module) => {

var Queue = function () {
  this.head = null;
  this.tail = null;
};

Queue.prototype = {
  add: function (item) {
    var entry = { item: item, next: null };
    var tail = this.tail;
    if (tail) tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function () {
    var entry = this.head;
    if (entry) {
      var next = this.head = entry.next;
      if (next === null) this.tail = null;
      return entry.item;
    }
  }
};

module.exports = Queue;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-exec-abstract.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\regexp-exec-abstract.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof-raw.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-exec.js");

var $TypeError = TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = call(exec, R, S);
    if (result !== null) anObject(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call(regexpExec, R, S);
  throw $TypeError('RegExp#exec called on incompatible receiver');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-exec.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\regexp-exec.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var regexpFlags = __webpack_require__(/*! ../internals/regexp-flags */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-flags.js");
var stickyHelpers = __webpack_require__(/*! ../internals/regexp-sticky-helpers */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-sticky-helpers.js");
var shared = __webpack_require__(/*! ../internals/shared */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared.js");
var create = __webpack_require__(/*! ../internals/object-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-create.js");
var getInternalState = (__webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js").get);
var UNSUPPORTED_DOT_ALL = __webpack_require__(/*! ../internals/regexp-unsupported-dot-all */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-unsupported-dot-all.js");
var UNSUPPORTED_NCG = __webpack_require__(/*! ../internals/regexp-unsupported-ncg */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-unsupported-ncg.js");

var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt = uncurryThis(''.charAt);
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call(nativeExec, re1, 'a');
  call(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = call(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = call(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice(match.input, charsAdded);
        match[0] = stringSlice(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn't work for /(.?)?/
      call(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-flags.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\regexp-flags.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.unicodeSets) result += 'v';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-get-flags.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\regexp-get-flags.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js");
var regExpFlags = __webpack_require__(/*! ../internals/regexp-flags */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-flags.js");

var RegExpPrototype = RegExp.prototype;

module.exports = function (R) {
  var flags = R.flags;
  return flags === undefined && !('flags' in RegExpPrototype) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype, R)
    ? call(regExpFlags, R) : flags;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-sticky-helpers.js":
/*!*******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\regexp-sticky-helpers.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp = global.RegExp;

var UNSUPPORTED_Y = fails(function () {
  var re = $RegExp('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y || fails(function () {
  return !$RegExp('a', 'y').sticky;
});

var BROKEN_CARET = UNSUPPORTED_Y || fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

module.exports = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-unsupported-dot-all.js":
/*!************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\regexp-unsupported-dot-all.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-unsupported-ncg.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\regexp-unsupported-ncg.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\require-object-coercible.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-null-or-undefined.js");

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-species.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\set-species.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in-accessor.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineBuiltInAccessor(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-to-string-tag.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\set-to-string-tag.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js").f);
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn(target, TO_STRING_TAG)) {
    defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-key.js":
/*!********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\shared-key.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(/*! ../internals/shared */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-store.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\shared-store.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-global-property.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared.js":
/*!****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\shared.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.29.0',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.29.0/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\species-constructor.js":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\species-constructor.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var aConstructor = __webpack_require__(/*! ../internals/a-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-constructor.js");
var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-null-or-undefined.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-html-forced.js":
/*!****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\string-html-forced.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-multibyte.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\string-multibyte.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-integer-or-infinity.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js");

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-punycode-to-ascii.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\string-punycode-to-ascii.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");

var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;

var $RangeError = RangeError;
var exec = uncurryThis(regexSeparators.exec);
var floor = Math.floor;
var fromCharCode = String.fromCharCode;
var charCodeAt = uncurryThis(''.charCodeAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var split = uncurryThis(''.split);
var toLowerCase = uncurryThis(''.toLowerCase);

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = charCodeAt(string, counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = charCodeAt(string, counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        push(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        push(output, value);
        counter--;
      }
    } else {
      push(output, value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  while (delta > baseMinusTMin * tMax >> 1) {
    delta = floor(delta / baseMinusTMin);
    k += base;
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      push(output, fromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    push(output, delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw $RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw $RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        var k = base;
        while (true) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          push(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
          k += base;
        }

        push(output, fromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        handledCPCount++;
      }
    }

    delta++;
    n++;
  }
  return join(output, '');
};

module.exports = function (input) {
  var encoded = [];
  var labels = split(replace(toLowerCase(input), regexSeparators, '\u002E'), '.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    push(encoded, exec(regexNonASCII, label) ? 'xn--' + encode(label) : label);
  }
  return join(encoded, '.');
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-trim-forced.js":
/*!****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\string-trim-forced.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var PROPER_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-name.js").PROPER);
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\whitespaces.js");

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]()
      || non[METHOD_NAME]() !== non
      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);
  });
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-trim.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\string-trim.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\whitespaces.js");

var replace = uncurryThis(''.replace);
var ltrim = RegExp('^[' + whitespaces + ']+');
var rtrim = RegExp('(^|[^' + whitespaces + '])[' + whitespaces + ']+$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = toString(requireObjectCoercible($this));
    if (TYPE & 1) string = replace(string, ltrim, '');
    if (TYPE & 2) string = replace(string, rtrim, '$1');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-constructor-detection.js":
/*!**************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\symbol-constructor-detection.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-define-to-primitive.js":
/*!************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\symbol-define-to-primitive.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");

module.exports = function () {
  var Symbol = getBuiltIn('Symbol');
  var SymbolPrototype = Symbol && Symbol.prototype;
  var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

  if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    // eslint-disable-next-line no-unused-vars -- required for .length
    defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function (hint) {
      return call(valueOf, this);
    }, { arity: 1 });
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-registry-detection.js":
/*!***********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\symbol-registry-detection.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-constructor-detection.js");

/* eslint-disable es/no-symbol -- safe */
module.exports = NATIVE_SYMBOL && !!Symbol['for'] && !!Symbol.keyFor;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\task.js":
/*!**************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\task.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var apply = __webpack_require__(/*! ../internals/function-apply */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-apply.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var html = __webpack_require__(/*! ../internals/html */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\html.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\document-create-element.js");
var validateArgumentsLength = __webpack_require__(/*! ../internals/validate-arguments-length */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\validate-arguments-length.js");
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-ios.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-node.js");

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var $location, defer, channel, port;

fails(function () {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  $location = global.location;
});

var run = function (id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var eventListener = function (event) {
  run(event.data);
};

var globalPostMessageDefer = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), $location.protocol + '//' + $location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = eventListener;
    defer = bind(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    $location && $location.protocol !== 'file:' &&
    !fails(globalPostMessageDefer)
  ) {
    defer = globalPostMessageDefer;
    global.addEventListener('message', eventListener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\this-number-value.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\this-number-value.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");

// `thisNumberValue` abstract operation
// https://tc39.es/ecma262/#sec-thisnumbervalue
module.exports = uncurryThis(1.0.valueOf);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-absolute-index.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-absolute-index.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-indexed-object.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-integer-or-infinity.js":
/*!********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-integer-or-infinity.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trunc = __webpack_require__(/*! ../internals/math-trunc */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\math-trunc.js");

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-length.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-length.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-integer-or-infinity.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-object.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js");

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-primitive.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-primitive.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-property-key.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-property-key.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string-tag-support.js":
/*!*******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-string-tag-support.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js":
/*!*******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\to-string.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof.js");

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\try-to-string.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\try-to-string.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\uid.js":
/*!*************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\uid.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\url-constructor-detection.js":
/*!***********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\url-constructor-detection.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  // eslint-disable-next-line unicorn/relative-url-style -- required for testing
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || (!searchParams.size && (IS_PURE || !DESCRIPTORS))
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\use-symbol-as-uid.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\use-symbol-as-uid.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-constructor-detection.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\v8-prototype-define-bug.js":
/*!*********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\v8-prototype-define-bug.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\validate-arguments-length.js":
/*!***********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\validate-arguments-length.js ***!
  \***********************************************************************************************************/
/***/ ((module) => {

var $TypeError = TypeError;

module.exports = function (passed, required) {
  if (passed < required) throw $TypeError('Not enough arguments');
  return passed;
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\weak-map-basic-detection.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\weak-map-basic-detection.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol-define.js":
/*!**********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\well-known-symbol-define.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var path = __webpack_require__(/*! ../internals/path */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\path.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/well-known-symbol-wrapped */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol-wrapped.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js").f);

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol-wrapped.js":
/*!***********************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\well-known-symbol-wrapped.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

exports.f = wellKnownSymbol;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\well-known-symbol.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var uid = __webpack_require__(/*! ../internals/uid */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-constructor-detection.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\use-symbol-as-uid.js");

var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)
      ? Symbol[name]
      : createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\whitespaces.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\internals\whitespaces.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

// a string of all valid unicode whitespaces
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.concat.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.array.concat.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");
var doesNotExceedSafeInteger = __webpack_require__(/*! ../internals/does-not-exceed-safe-integer */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\does-not-exceed-safe-integer.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-species-create.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-method-has-species-support.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-v8-version.js");

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport('concat');

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike(E);
        doesNotExceedSafeInteger(n + len);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        doesNotExceedSafeInteger(n + 1);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.iterator.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.array.iterator.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\add-to-unscopables.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterators.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js").f);
var defineIterator = __webpack_require__(/*! ../internals/iterator-define */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-define.js");
var createIterResultObject = __webpack_require__(/*! ../internals/create-iter-result-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-iter-result-object.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return createIterResultObject(undefined, true);
  }
  if (kind == 'keys') return createIterResultObject(index, false);
  if (kind == 'values') return createIterResultObject(target[index], false);
  return createIterResultObject([index, target[index]], false);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.slice.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.array.slice.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-array.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-constructor.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-method-has-species-support.js");
var nativeSlice = __webpack_require__(/*! ../internals/array-slice */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

var SPECIES = wellKnownSymbol('species');
var $Array = Array;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (isConstructor(Constructor) && (Constructor === $Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === $Array || Constructor === undefined) {
        return nativeSlice(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? $Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.sort.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.array.sort.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\length-of-array-like.js");
var deletePropertyOrThrow = __webpack_require__(/*! ../internals/delete-property-or-throw */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\delete-property-or-throw.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var internalSort = __webpack_require__(/*! ../internals/array-sort */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-sort.js");
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-method-is-strict.js");
var FF = __webpack_require__(/*! ../internals/engine-ff-version */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-ff-version.js");
var IE_OR_EDGE = __webpack_require__(/*! ../internals/engine-is-ie-or-edge */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-ie-or-edge.js");
var V8 = __webpack_require__(/*! ../internals/engine-v8-version */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-v8-version.js");
var WEBKIT = __webpack_require__(/*! ../internals/engine-webkit-version */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-webkit-version.js");

var test = [];
var nativeSort = uncurryThis(test.sort);
var push = uncurryThis(test.push);

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var STABLE_SORT = !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 70;
  if (FF && FF > 3) return;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 603;

  var result = '';
  var code, chr, value, index;

  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);

    switch (code) {
      case 66: case 69: case 70: case 72: value = 3; break;
      case 68: case 71: value = 4; break;
      default: value = 2;
    }

    for (index = 0; index < 47; index++) {
      test.push({ k: chr + index, v: value });
    }
  }

  test.sort(function (a, b) { return b.v - a.v; });

  for (index = 0; index < test.length; index++) {
    chr = test[index].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }

  return result !== 'DGBEFHACIJK';
});

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

var getSortCompare = function (comparefn) {
  return function (x, y) {
    if (y === undefined) return -1;
    if (x === undefined) return 1;
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    return toString(x) > toString(y) ? 1 : -1;
  };
};

// `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    if (comparefn !== undefined) aCallable(comparefn);

    var array = toObject(this);

    if (STABLE_SORT) return comparefn === undefined ? nativeSort(array) : nativeSort(array, comparefn);

    var items = [];
    var arrayLength = lengthOfArrayLike(array);
    var itemsLength, index;

    for (index = 0; index < arrayLength; index++) {
      if (index in array) push(items, array[index]);
    }

    internalSort(items, getSortCompare(comparefn));

    itemsLength = lengthOfArrayLike(items);
    index = 0;

    while (index < itemsLength) array[index] = items[index++];
    while (index < arrayLength) deletePropertyOrThrow(array, index++);

    return array;
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.function.name.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.function.name.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var FUNCTION_NAME_EXISTS = (__webpack_require__(/*! ../internals/function-name */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-name.js").EXISTS);
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in-accessor.js");

var FunctionPrototype = Function.prototype;
var functionToString = uncurryThis(FunctionPrototype.toString);
var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
var regExpExec = uncurryThis(nameRE.exec);
var NAME = 'name';

// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
  defineBuiltInAccessor(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return regExpExec(nameRE, functionToString(this))[1];
      } catch (error) {
        return '';
      }
    }
  });
}


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.json.stringify.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.json.stringify.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var apply = __webpack_require__(/*! ../internals/function-apply */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-apply.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-symbol.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice.js");
var getReplacerFunction = __webpack_require__(/*! ../internals/get-json-replacer-function */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-json-replacer-function.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-constructor-detection.js");

var $String = String;
var $stringify = getBuiltIn('JSON', 'stringify');
var exec = uncurryThis(/./.exec);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var replace = uncurryThis(''.replace);
var numberToString = uncurryThis(1.0.toString);

var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;

var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function () {
  var symbol = getBuiltIn('Symbol')();
  // MS Edge converts symbol values to JSON as {}
  return $stringify([symbol]) != '[null]'
    // WebKit converts symbol values to JSON as null
    || $stringify({ a: symbol }) != '{}'
    // V8 throws on boxed symbols
    || $stringify(Object(symbol)) != '{}';
});

// https://github.com/tc39/proposal-well-formed-stringify
var ILL_FORMED_UNICODE = fails(function () {
  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
    || $stringify('\uDEAD') !== '"\\udead"';
});

var stringifyWithSymbolsFix = function (it, replacer) {
  var args = arraySlice(arguments);
  var $replacer = getReplacerFunction(replacer);
  if (!isCallable($replacer) && (it === undefined || isSymbol(it))) return; // IE8 returns string on undefined
  args[1] = function (key, value) {
    // some old implementations (like WebKit) could pass numbers as keys
    if (isCallable($replacer)) value = call($replacer, this, $String(key), value);
    if (!isSymbol(value)) return value;
  };
  return apply($stringify, null, args);
};

var fixIllFormed = function (match, offset, string) {
  var prev = charAt(string, offset - 1);
  var next = charAt(string, offset + 1);
  if ((exec(low, match) && !exec(hi, next)) || (exec(hi, match) && !exec(low, prev))) {
    return '\\u' + numberToString(charCodeAt(match, 0), 16);
  } return match;
};

if ($stringify) {
  // `JSON.stringify` method
  // https://tc39.es/ecma262/#sec-json.stringify
  $({ target: 'JSON', stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = arraySlice(arguments);
      var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;
    }
  });
}


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.number.constructor.js":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.number.constructor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var path = __webpack_require__(/*! ../internals/path */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\path.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-forced.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\inherit-if-required.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-symbol.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-primitive.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var getOwnPropertyNames = (__webpack_require__(/*! ../internals/object-get-own-property-names */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-names.js").f);
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-descriptor.js").f);
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js").f);
var thisNumberValue = __webpack_require__(/*! ../internals/this-number-value */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\this-number-value.js");
var trim = (__webpack_require__(/*! ../internals/string-trim */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-trim.js").trim);

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var PureNumberNamespace = path[NUMBER];
var NumberPrototype = NativeNumber.prototype;
var TypeError = global.TypeError;
var stringSlice = uncurryThis(''.slice);
var charCodeAt = uncurryThis(''.charCodeAt);

// `ToNumeric` abstract operation
// https://tc39.es/ecma262/#sec-tonumeric
var toNumeric = function (value) {
  var primValue = toPrimitive(value, 'number');
  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
};

// `ToNumber` abstract operation
// https://tc39.es/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, 'number');
  var first, third, radix, maxCode, digits, length, index, code;
  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = charCodeAt(it, 0);
    if (first === 43 || first === 45) {
      third = charCodeAt(it, 2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (charCodeAt(it, 1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = stringSlice(it, 2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = charCodeAt(digits, index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

var FORCED = isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'));

var calledWithNew = function (dummy) {
  // includes check on 1..constructor(foo) case
  return isPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); });
};

// `Number` constructor
// https://tc39.es/ecma262/#sec-number-constructor
var NumberWrapper = function Number(value) {
  var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
  return calledWithNew(this) ? inheritIfRequired(Object(n), this, NumberWrapper) : n;
};

NumberWrapper.prototype = NumberPrototype;
if (FORCED && !IS_PURE) NumberPrototype.constructor = NumberWrapper;

$({ global: true, constructor: true, wrap: true, forced: FORCED }, {
  Number: NumberWrapper
});

// Use `internal/copy-constructor-properties` helper in `core-js@4`
var copyConstructorProperties = function (target, source) {
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(source) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +
    // ESNext
    'fromString,range'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (hasOwn(source, key = keys[j]) && !hasOwn(target, key)) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

if (IS_PURE && PureNumberNamespace) copyConstructorProperties(path[NUMBER], PureNumberNamespace);
if (FORCED || IS_PURE) copyConstructorProperties(path[NUMBER], NativeNumber);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.get-own-property-symbols.js":
/*!******************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.object.get-own-property-symbols.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-constructor-detection.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-symbols.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-object.js");

// V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FORCED = !NATIVE_SYMBOL || fails(function () { getOwnPropertySymbolsModule.f(1); });

// `Object.getOwnPropertySymbols` method
// https://tc39.es/ecma262/#sec-object.getownpropertysymbols
$({ target: 'Object', stat: true, forced: FORCED }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.to-string.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.object.to-string.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string-tag-support.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var toString = __webpack_require__(/*! ../internals/object-to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-to-string.js");

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  defineBuiltIn(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.all.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.promise.all.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterate.js");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(/*! ../internals/promise-statics-incorrect-iteration */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-statics-incorrect-iteration.js");

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.catch.js":
/*!************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.promise.catch.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-constructor-detection.js").CONSTRUCTOR);
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-native-constructor.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });
  }
}


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.constructor.js":
/*!******************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.promise.constructor.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\engine-is-node.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-to-string-tag.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-species.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-instance.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\species-constructor.js");
var task = (__webpack_require__(/*! ../internals/task */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\task.js").set);
var microtask = __webpack_require__(/*! ../internals/microtask */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\microtask.js");
var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\host-report-errors.js");
var perform = __webpack_require__(/*! ../internals/perform */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\perform.js");
var Queue = __webpack_require__(/*! ../internals/queue */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\queue.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-native-constructor.js");
var PromiseConstructorDetection = __webpack_require__(/*! ../internals/promise-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-constructor-detection.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\new-promise-capability.js");

var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var setInternalState = InternalStateModule.set;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var PromiseConstructor = NativePromiseConstructor;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;

var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var callReaction = function (reaction, state) {
  var value = state.value;
  var ok = state.state == FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;
      else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(TypeError('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call(then, value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };

  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  // `Promise.prototype.then` method
  // https://tc39.es/ecma262/#sec-promise.prototype.then
  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable(onRejected) && onRejected;
    reaction.domain = IS_NODE ? process.domain : undefined;
    if (state.state == PENDING) state.reactions.add(reaction);
    else microtask(function () {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });

  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.js":
/*!******************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.promise.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(/*! ../modules/es.promise.constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.constructor.js");
__webpack_require__(/*! ../modules/es.promise.all */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.all.js");
__webpack_require__(/*! ../modules/es.promise.catch */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.catch.js");
__webpack_require__(/*! ../modules/es.promise.race */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.race.js");
__webpack_require__(/*! ../modules/es.promise.reject */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.reject.js");
__webpack_require__(/*! ../modules/es.promise.resolve */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.resolve.js");


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.race.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.promise.race.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterate.js");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(/*! ../internals/promise-statics-incorrect-iteration */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-statics-incorrect-iteration.js");

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.reject.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.promise.reject.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\new-promise-capability.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-constructor-detection.js").CONSTRUCTOR);

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.promise.resolve.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.promise.resolve.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-native-constructor.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-constructor-detection.js").CONSTRUCTOR);
var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\promise-resolve.js");

var PromiseConstructorWrapper = getBuiltIn('Promise');
var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
  resolve: function resolve(x) {
    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.regexp.exec.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.regexp.exec.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var exec = __webpack_require__(/*! ../internals/regexp-exec */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-exec.js");

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.regexp.to-string.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.regexp.to-string.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var PROPER_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-name.js").PROPER);
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var getRegExpFlags = __webpack_require__(/*! ../internals/regexp-get-flags */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-get-flags.js");

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  defineBuiltIn(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var pattern = $toString(R.source);
    var flags = $toString(getRegExpFlags(R));
    return '/' + pattern + '/' + flags;
  }, { unsafe: true });
}


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.iterator.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.string.iterator.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var charAt = (__webpack_require__(/*! ../internals/string-multibyte */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-multibyte.js").charAt);
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/iterator-define */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-define.js");
var createIterResultObject = __webpack_require__(/*! ../internals/create-iter-result-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-iter-result-object.js");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return createIterResultObject(undefined, true);
  point = charAt(string, index);
  state.index += point.length;
  return createIterResultObject(point, false);
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.link.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.string.link.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var createHTML = __webpack_require__(/*! ../internals/create-html */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-html.js");
var forcedStringHTMLMethod = __webpack_require__(/*! ../internals/string-html-forced */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-html-forced.js");

// `String.prototype.link` method
// https://tc39.es/ecma262/#sec-string.prototype.link
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('link') }, {
  link: function link(url) {
    return createHTML(this, 'a', 'href', url);
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.match.js":
/*!***********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.string.match.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fix-regexp-well-known-symbol-logic.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-null-or-undefined.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-method.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\advance-string-index.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-exec-abstract.js");

// @@match logic
fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = isNullOrUndefined(regexp) ? undefined : getMethod(regexp, MATCH);
      return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function (string) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(nativeMatch, rx, S);

      if (res.done) return res.value;

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = toString(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.replace.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.string.replace.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var apply = __webpack_require__(/*! ../internals/function-apply */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-apply.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fix-regexp-well-known-symbol-logic.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-null-or-undefined.js");
var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-integer-or-infinity.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\require-object-coercible.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\advance-string-index.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-method.js");
var getSubstitution = __webpack_require__(/*! ../internals/get-substitution */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-substitution.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\regexp-exec-abstract.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var REPLACE = wellKnownSymbol('replace');
var max = Math.max;
var min = Math.min;
var concat = uncurryThis([].concat);
var push = uncurryThis([].push);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
})();

// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
  return ''.replace(re, '$<a>') !== '7';
});

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = isNullOrUndefined(searchValue) ? undefined : getMethod(searchValue, REPLACE);
      return replacer
        ? call(replacer, searchValue, O, replaceValue)
        : call(nativeReplace, toString(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function (string, replaceValue) {
      var rx = anObject(this);
      var S = toString(string);

      if (
        typeof replaceValue == 'string' &&
        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
        stringIndexOf(replaceValue, '$<') === -1
      ) {
        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
        if (res.done) return res.value;
      }

      var functionalReplace = isCallable(replaceValue);
      if (!functionalReplace) replaceValue = toString(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        push(results, result);
        if (!global) break;

        var matchStr = toString(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = toString(result[0]);
        var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = concat([matched], captures, position, S);
          if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);
          var replacement = toString(apply(replaceValue, undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + stringSlice(S, nextSourcePosition);
    }
  ];
}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.trim.js":
/*!**********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.string.trim.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var $trim = (__webpack_require__(/*! ../internals/string-trim */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-trim.js").trim);
var forcedStringTrimMethod = __webpack_require__(/*! ../internals/string-trim-forced */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-trim-forced.js");

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.constructor.js":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.symbol.constructor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-pure.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/symbol-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-constructor-detection.js");
var fails = __webpack_require__(/*! ../internals/fails */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\fails.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-property-key.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property-descriptor.js");
var nativeObjectCreate = __webpack_require__(/*! ../internals/object-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-create.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-keys.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-names.js");
var getOwnPropertyNamesExternal = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-names-external.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-symbols.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-property.js");
var definePropertiesModule = __webpack_require__(/*! ../internals/object-define-properties */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-define-properties.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-property-is-enumerable.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in-accessor.js");
var shared = __webpack_require__(/*! ../internals/shared */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\hidden-keys.js");
var uid = __webpack_require__(/*! ../internals/uid */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\uid.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/well-known-symbol-wrapped */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol-wrapped.js");
var defineWellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol-define */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol-define.js");
var defineSymbolToPrimitive = __webpack_require__(/*! ../internals/symbol-define-to-primitive */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-define-to-primitive.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-to-string-tag.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js");
var $forEach = (__webpack_require__(/*! ../internals/array-iteration */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-iteration.js").forEach);

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';

var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);

var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var TypeError = global.TypeError;
var QObject = global.QObject;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push = uncurryThis([].push);

var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var WellKnownSymbolsStore = shared('wks');

// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPropertyKey(P);
  anObject(Attributes);
  if (hasOwn(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPropertyKey(V);
  var enumerable = call(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P]
    ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPropertyKey(P);
  if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);
  });
  return result;
};

var $getOwnPropertySymbols = function (O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
      push(result, AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (isPrototypeOf(SymbolPrototype, this)) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);
      if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  SymbolPrototype = $Symbol[PROTOTYPE];

  defineBuiltIn(SymbolPrototype, 'toString', function toString() {
    return getInternalState(this).tag;
  });

  defineBuiltIn($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    defineBuiltInAccessor(SymbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      defineBuiltIn(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
defineSymbolToPrimitive();

// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.description.js":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.symbol.description.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-is-prototype-of.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in-accessor.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\copy-constructor-properties.js");

var NativeSymbol = global.Symbol;
var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);
    var result = isPrototypeOf(SymbolPrototype, this)
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };

  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  SymbolWrapper.prototype = SymbolPrototype;
  SymbolPrototype.constructor = SymbolWrapper;

  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
  var thisSymbolValue = uncurryThis(SymbolPrototype.valueOf);
  var symbolDescriptiveString = uncurryThis(SymbolPrototype.toString);
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  var replace = uncurryThis(''.replace);
  var stringSlice = uncurryThis(''.slice);

  defineBuiltInAccessor(SymbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = thisSymbolValue(this);
      if (hasOwn(EmptyStringDescriptionStore, symbol)) return '';
      var string = symbolDescriptiveString(symbol);
      var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, constructor: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.for.js":
/*!*********************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.symbol.for.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-built-in.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var shared = __webpack_require__(/*! ../internals/shared */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared.js");
var NATIVE_SYMBOL_REGISTRY = __webpack_require__(/*! ../internals/symbol-registry-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-registry-detection.js");

var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.for` method
// https://tc39.es/ecma262/#sec-symbol.for
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  'for': function (key) {
    var string = toString(key);
    if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = getBuiltIn('Symbol')(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.iterator.js":
/*!**************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.symbol.iterator.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol-define */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol-define.js");

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.js":
/*!*****************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.symbol.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(/*! ../modules/es.symbol.constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.constructor.js");
__webpack_require__(/*! ../modules/es.symbol.for */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.for.js");
__webpack_require__(/*! ../modules/es.symbol.key-for */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.key-for.js");
__webpack_require__(/*! ../modules/es.json.stringify */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.json.stringify.js");
__webpack_require__(/*! ../modules/es.object.get-own-property-symbols */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.object.get-own-property-symbols.js");


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.symbol.key-for.js":
/*!*************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\es.symbol.key-for.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-symbol.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\try-to-string.js");
var shared = __webpack_require__(/*! ../internals/shared */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\shared.js");
var NATIVE_SYMBOL_REGISTRY = __webpack_require__(/*! ../internals/symbol-registry-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\symbol-registry-detection.js");

var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.keyFor` method
// https://tc39.es/ecma262/#sec-symbol.keyfor
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(tryToString(sym) + ' is not a symbol');
    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  }
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.for-each.js":
/*!************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\web.dom-collections.for-each.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\dom-iterables.js");
var DOMTokenListPrototype = __webpack_require__(/*! ../internals/dom-token-list-prototype */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\dom-token-list-prototype.js");
var forEach = __webpack_require__(/*! ../internals/array-for-each */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-for-each.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-non-enumerable-property.js");

var handlePrototype = function (CollectionPrototype) {
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  if (DOMIterables[COLLECTION_NAME]) {
    handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype);
  }
}

handlePrototype(DOMTokenListPrototype);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.dom-collections.iterator.js":
/*!************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\web.dom-collections.iterator.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\dom-iterables.js");
var DOMTokenListPrototype = __webpack_require__(/*! ../internals/dom-token-list-prototype */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\dom-token-list-prototype.js");
var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.iterator.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-non-enumerable-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url-search-params.constructor.js":
/*!*****************************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\web.url-search-params.constructor.js ***!
  \*****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__(/*! ../modules/es.array.iterator */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.array.iterator.js");
var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var USE_NATIVE_URL = __webpack_require__(/*! ../internals/url-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\url-constructor-detection.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in-accessor.js");
var defineBuiltIns = __webpack_require__(/*! ../internals/define-built-ins */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-ins.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-to-string-tag.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/iterator-create-constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\iterator-create-constructor.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-instance.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js");
var classof = __webpack_require__(/*! ../internals/classof */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\classof.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\is-object.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var create = __webpack_require__(/*! ../internals/object-create */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\create-property-descriptor.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\get-iterator-method.js");
var validateArgumentsLength = __webpack_require__(/*! ../internals/validate-arguments-length */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\validate-arguments-length.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\well-known-symbol.js");
var arraySort = __webpack_require__(/*! ../internals/array-sort */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-sort.js");

var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Avoid NodeJS experimental warning
var safeGetBuiltIn = function (name) {
  if (!DESCRIPTORS) return global[name];
  var descriptor = getOwnPropertyDescriptor(global, name);
  return descriptor && descriptor.value;
};

var nativeFetch = safeGetBuiltIn('fetch');
var NativeRequest = safeGetBuiltIn('Request');
var Headers = safeGetBuiltIn('Headers');
var RequestPrototype = NativeRequest && NativeRequest.prototype;
var HeadersPrototype = Headers && Headers.prototype;
var RegExp = global.RegExp;
var TypeError = global.TypeError;
var decodeURIComponent = global.decodeURIComponent;
var encodeURIComponent = global.encodeURIComponent;
var charAt = uncurryThis(''.charAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var splice = uncurryThis([].splice);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = replace(it, plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = replace(result, percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replacements = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replacements[match];
};

var serialize = function (it) {
  return replace(encodeURIComponent(it), find, replacer);
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
}, true);

var URLSearchParamsState = function (init) {
  this.entries = [];
  this.url = null;

  if (init !== undefined) {
    if (isObject(init)) this.parseObject(init);
    else this.parseQuery(typeof init == 'string' ? charAt(init, 0) === '?' ? stringSlice(init, 1) : init : $toString(init));
  }
};

URLSearchParamsState.prototype = {
  type: URL_SEARCH_PARAMS,
  bindURL: function (url) {
    this.url = url;
    this.update();
  },
  parseObject: function (object) {
    var iteratorMethod = getIteratorMethod(object);
    var iterator, next, step, entryIterator, entryNext, first, second;

    if (iteratorMethod) {
      iterator = getIterator(object, iteratorMethod);
      next = iterator.next;
      while (!(step = call(next, iterator)).done) {
        entryIterator = getIterator(anObject(step.value));
        entryNext = entryIterator.next;
        if (
          (first = call(entryNext, entryIterator)).done ||
          (second = call(entryNext, entryIterator)).done ||
          !call(entryNext, entryIterator).done
        ) throw TypeError('Expected sequence with length 2');
        push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
      }
    } else for (var key in object) if (hasOwn(object, key)) {
      push(this.entries, { key: key, value: $toString(object[key]) });
    }
  },
  parseQuery: function (query) {
    if (query) {
      var attributes = split(query, '&');
      var index = 0;
      var attribute, entry;
      while (index < attributes.length) {
        attribute = attributes[index++];
        if (attribute.length) {
          entry = split(attribute, '=');
          push(this.entries, {
            key: deserialize(shift(entry)),
            value: deserialize(join(entry, '='))
          });
        }
      }
    }
  },
  serialize: function () {
    var entries = this.entries;
    var result = [];
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      push(result, serialize(entry.key) + '=' + serialize(entry.value));
    } return join(result, '&');
  },
  update: function () {
    this.entries.length = 0;
    this.parseQuery(this.url.query);
  },
  updateURL: function () {
    if (this.url) this.url.update();
  }
};

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsPrototype);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  var state = setInternalState(this, new URLSearchParamsState(init));
  if (!DESCRIPTORS) this.length = state.entries.length;
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

defineBuiltIns(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.append` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    push(state.entries, { key: $toString(name), value: $toString(value) });
    if (!DESCRIPTORS) this.length++;
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) splice(entries, index, 1);
      else index++;
    }
    if (!DESCRIPTORS) this.length = entries.length;
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) push(result, entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = $toString(name);
    var val = $toString(value);
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) splice(entries, index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) push(entries, { key: key, value: val });
    if (!DESCRIPTORS) this.length = entries.length;
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    arraySort(state.entries, function (a, b) {
      return a.key > b.key ? 1 : -1;
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
defineBuiltIn(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: 'entries' });

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
defineBuiltIn(URLSearchParamsPrototype, 'toString', function toString() {
  return getInternalParamsState(this).serialize();
}, { enumerable: true });

// `URLSearchParams.prototype.size` getter
// https://github.com/whatwg/url/pull/734
if (DESCRIPTORS) defineBuiltInAccessor(URLSearchParamsPrototype, 'size', {
  get: function size() {
    return getInternalParamsState(this).entries.length;
  },
  configurable: true,
  enumerable: true
});

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, constructor: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
if (!USE_NATIVE_URL && isCallable(Headers)) {
  var headersHas = uncurryThis(HeadersPrototype.has);
  var headersSet = uncurryThis(HeadersPrototype.set);

  var wrapRequestOptions = function (init) {
    if (isObject(init)) {
      var body = init.body;
      var headers;
      if (classof(body) === URL_SEARCH_PARAMS) {
        headers = init.headers ? new Headers(init.headers) : new Headers();
        if (!headersHas(headers, 'content-type')) {
          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
        return create(init, {
          body: createPropertyDescriptor(0, $toString(body)),
          headers: createPropertyDescriptor(0, headers)
        });
      }
    } return init;
  };

  if (isCallable(nativeFetch)) {
    $({ global: true, enumerable: true, dontCallGetSet: true, forced: true }, {
      fetch: function fetch(input /* , init */) {
        return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
      }
    });
  }

  if (isCallable(NativeRequest)) {
    var RequestConstructor = function Request(input /* , init */) {
      anInstance(this, RequestPrototype);
      return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
    };

    RequestPrototype.constructor = RequestConstructor;
    RequestConstructor.prototype = RequestPrototype;

    $({ global: true, constructor: true, dontCallGetSet: true, forced: true }, {
      Request: RequestConstructor
    });
  }
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url-search-params.js":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\web.url-search-params.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(/*! ../modules/web.url-search-params.constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url-search-params.constructor.js");


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url.constructor.js":
/*!***************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\web.url.constructor.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__(/*! ../modules/es.string.iterator */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\es.string.iterator.js");
var $ = __webpack_require__(/*! ../internals/export */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\descriptors.js");
var USE_NATIVE_URL = __webpack_require__(/*! ../internals/url-constructor-detection */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\url-constructor-detection.js");
var global = __webpack_require__(/*! ../internals/global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-bind-context.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\function-uncurry-this.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\define-built-in-accessor.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\an-instance.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\has-own-property.js");
var assign = __webpack_require__(/*! ../internals/object-assign */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\object-assign.js");
var arrayFrom = __webpack_require__(/*! ../internals/array-from */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-from.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice-simple */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\array-slice-simple.js");
var codeAt = (__webpack_require__(/*! ../internals/string-multibyte */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-multibyte.js").codeAt);
var toASCII = __webpack_require__(/*! ../internals/string-punycode-to-ascii */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\string-punycode-to-ascii.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\to-string.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\set-to-string-tag.js");
var validateArgumentsLength = __webpack_require__(/*! ../internals/validate-arguments-length */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\validate-arguments-length.js");
var URLSearchParamsModule = __webpack_require__(/*! ../modules/web.url-search-params.constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url-search-params.constructor.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\internals\\internal-state.js");

var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;

var NativeURL = global.URL;
var TypeError = global.TypeError;
var parseInt = global.parseInt;
var floor = Math.floor;
var pow = Math.pow;
var charAt = uncurryThis(''.charAt);
var exec = uncurryThis(/./.exec);
var join = uncurryThis([].join);
var numberToString = uncurryThis(1.0.toString);
var pop = uncurryThis([].pop);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);
var toLowerCase = uncurryThis(''.toLowerCase);
var unshift = uncurryThis([].unshift);

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[a-z]/i;
// eslint-disable-next-line regexp/no-obscure-range -- safe
var ALPHANUMERIC = /[\d+-.a-z]/i;
var DIGIT = /\d/;
var HEX_START = /^0x/i;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\da-f]+$/i;
/* eslint-disable regexp/no-control-character -- safe */
var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
var LEADING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+/;
var TRAILING_C0_CONTROL_OR_SPACE = /(^|[^\u0000-\u0020])[\u0000-\u0020]+$/;
var TAB_AND_NEW_LINE = /[\t\n\r]/g;
/* eslint-enable regexp/no-control-character -- safe */
var EOF;

// https://url.spec.whatwg.org/#ipv4-number-parser
var parseIPv4 = function (input) {
  var parts = split(input, '.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.length--;
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && charAt(part, 0) == '0') {
      radix = exec(HEX_START, part) ? 16 : 8;
      part = stringSlice(part, radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
      number = parseInt(part, radix);
    }
    push(numbers, number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = pop(numbers);
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// https://url.spec.whatwg.org/#concept-ipv6-parser
// eslint-disable-next-line max-statements -- TODO
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var chr = function () {
    return charAt(input, pointer);
  };

  if (chr() == ':') {
    if (charAt(input, 1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (chr()) {
    if (pieceIndex == 8) return;
    if (chr() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && exec(HEX, chr())) {
      value = value * 16 + parseInt(chr(), 16);
      pointer++;
      length++;
    }
    if (chr() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (chr()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (chr() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!exec(DIGIT, chr())) return;
        while (exec(DIGIT, chr())) {
          number = parseInt(chr(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (chr() == ':') {
      pointer++;
      if (!chr()) return;
    } else if (chr()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

// https://url.spec.whatwg.org/#host-serializing
var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      unshift(result, host % 256);
      host = floor(host / 256);
    } return join(result, '.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += numberToString(host[index], 16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (chr, set) {
  var code = codeAt(chr, 0);
  return code > 0x20 && code < 0x7F && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
};

// https://url.spec.whatwg.org/#special-scheme
var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

// https://url.spec.whatwg.org/#windows-drive-letter
var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && exec(ALPHA, charAt(string, 0))
    && ((second = charAt(string, 1)) == ':' || (!normalized && second == '|'));
};

// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter
var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (
    string.length == 2 ||
    ((third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

// https://url.spec.whatwg.org/#single-dot-path-segment
var isSingleDot = function (segment) {
  return segment === '.' || toLowerCase(segment) === '%2e';
};

// https://url.spec.whatwg.org/#double-dot-path-segment
var isDoubleDot = function (segment) {
  segment = toLowerCase(segment);
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

var URLState = function (url, isBase, base) {
  var urlString = $toString(url);
  var baseState, failure, searchParams;
  if (isBase) {
    failure = this.parse(urlString);
    if (failure) throw TypeError(failure);
    this.searchParams = null;
  } else {
    if (base !== undefined) baseState = new URLState(base, true);
    failure = this.parse(urlString, null, baseState);
    if (failure) throw TypeError(failure);
    searchParams = getInternalSearchParamsState(new URLSearchParams());
    searchParams.bindURL(this);
    this.searchParams = searchParams;
  }
};

URLState.prototype = {
  type: 'URL',
  // https://url.spec.whatwg.org/#url-parsing
  // eslint-disable-next-line max-statements -- TODO
  parse: function (input, stateOverride, base) {
    var url = this;
    var state = stateOverride || SCHEME_START;
    var pointer = 0;
    var buffer = '';
    var seenAt = false;
    var seenBracket = false;
    var seenPasswordToken = false;
    var codePoints, chr, bufferCodePoints, failure;

    input = $toString(input);

    if (!stateOverride) {
      url.scheme = '';
      url.username = '';
      url.password = '';
      url.host = null;
      url.port = null;
      url.path = [];
      url.query = null;
      url.fragment = null;
      url.cannotBeABaseURL = false;
      input = replace(input, LEADING_C0_CONTROL_OR_SPACE, '');
      input = replace(input, TRAILING_C0_CONTROL_OR_SPACE, '$1');
    }

    input = replace(input, TAB_AND_NEW_LINE, '');

    codePoints = arrayFrom(input);

    while (pointer <= codePoints.length) {
      chr = codePoints[pointer];
      switch (state) {
        case SCHEME_START:
          if (chr && exec(ALPHA, chr)) {
            buffer += toLowerCase(chr);
            state = SCHEME;
          } else if (!stateOverride) {
            state = NO_SCHEME;
            continue;
          } else return INVALID_SCHEME;
          break;

        case SCHEME:
          if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
            buffer += toLowerCase(chr);
          } else if (chr == ':') {
            if (stateOverride && (
              (url.isSpecial() != hasOwn(specialSchemes, buffer)) ||
              (buffer == 'file' && (url.includesCredentials() || url.port !== null)) ||
              (url.scheme == 'file' && !url.host)
            )) return;
            url.scheme = buffer;
            if (stateOverride) {
              if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
              return;
            }
            buffer = '';
            if (url.scheme == 'file') {
              state = FILE;
            } else if (url.isSpecial() && base && base.scheme == url.scheme) {
              state = SPECIAL_RELATIVE_OR_AUTHORITY;
            } else if (url.isSpecial()) {
              state = SPECIAL_AUTHORITY_SLASHES;
            } else if (codePoints[pointer + 1] == '/') {
              state = PATH_OR_AUTHORITY;
              pointer++;
            } else {
              url.cannotBeABaseURL = true;
              push(url.path, '');
              state = CANNOT_BE_A_BASE_URL_PATH;
            }
          } else if (!stateOverride) {
            buffer = '';
            state = NO_SCHEME;
            pointer = 0;
            continue;
          } else return INVALID_SCHEME;
          break;

        case NO_SCHEME:
          if (!base || (base.cannotBeABaseURL && chr != '#')) return INVALID_SCHEME;
          if (base.cannotBeABaseURL && chr == '#') {
            url.scheme = base.scheme;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            url.cannotBeABaseURL = true;
            state = FRAGMENT;
            break;
          }
          state = base.scheme == 'file' ? FILE : RELATIVE;
          continue;

        case SPECIAL_RELATIVE_OR_AUTHORITY:
          if (chr == '/' && codePoints[pointer + 1] == '/') {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
            pointer++;
          } else {
            state = RELATIVE;
            continue;
          } break;

        case PATH_OR_AUTHORITY:
          if (chr == '/') {
            state = AUTHORITY;
            break;
          } else {
            state = PATH;
            continue;
          }

        case RELATIVE:
          url.scheme = base.scheme;
          if (chr == EOF) {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
          } else if (chr == '/' || (chr == '\\' && url.isSpecial())) {
            state = RELATIVE_SLASH;
          } else if (chr == '?') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.path.length--;
            state = PATH;
            continue;
          } break;

        case RELATIVE_SLASH:
          if (url.isSpecial() && (chr == '/' || chr == '\\')) {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          } else if (chr == '/') {
            state = AUTHORITY;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            state = PATH;
            continue;
          } break;

        case SPECIAL_AUTHORITY_SLASHES:
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
          pointer++;
          break;

        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
          if (chr != '/' && chr != '\\') {
            state = AUTHORITY;
            continue;
          } break;

        case AUTHORITY:
          if (chr == '@') {
            if (seenAt) buffer = '%40' + buffer;
            seenAt = true;
            bufferCodePoints = arrayFrom(buffer);
            for (var i = 0; i < bufferCodePoints.length; i++) {
              var codePoint = bufferCodePoints[i];
              if (codePoint == ':' && !seenPasswordToken) {
                seenPasswordToken = true;
                continue;
              }
              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
              if (seenPasswordToken) url.password += encodedCodePoints;
              else url.username += encodedCodePoints;
            }
            buffer = '';
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial())
          ) {
            if (seenAt && buffer == '') return INVALID_AUTHORITY;
            pointer -= arrayFrom(buffer).length + 1;
            buffer = '';
            state = HOST;
          } else buffer += chr;
          break;

        case HOST:
        case HOSTNAME:
          if (stateOverride && url.scheme == 'file') {
            state = FILE_HOST;
            continue;
          } else if (chr == ':' && !seenBracket) {
            if (buffer == '') return INVALID_HOST;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PORT;
            if (stateOverride == HOSTNAME) return;
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial())
          ) {
            if (url.isSpecial() && buffer == '') return INVALID_HOST;
            if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PATH_START;
            if (stateOverride) return;
            continue;
          } else {
            if (chr == '[') seenBracket = true;
            else if (chr == ']') seenBracket = false;
            buffer += chr;
          } break;

        case PORT:
          if (exec(DIGIT, chr)) {
            buffer += chr;
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial()) ||
            stateOverride
          ) {
            if (buffer != '') {
              var port = parseInt(buffer, 10);
              if (port > 0xFFFF) return INVALID_PORT;
              url.port = (url.isSpecial() && port === specialSchemes[url.scheme]) ? null : port;
              buffer = '';
            }
            if (stateOverride) return;
            state = PATH_START;
            continue;
          } else return INVALID_PORT;
          break;

        case FILE:
          url.scheme = 'file';
          if (chr == '/' || chr == '\\') state = FILE_SLASH;
          else if (base && base.scheme == 'file') {
            if (chr == EOF) {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
            } else if (chr == '?') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
              url.fragment = '';
              state = FRAGMENT;
            } else {
              if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
                url.host = base.host;
                url.path = arraySlice(base.path);
                url.shortenPath();
              }
              state = PATH;
              continue;
            }
          } else {
            state = PATH;
            continue;
          } break;

        case FILE_SLASH:
          if (chr == '/' || chr == '\\') {
            state = FILE_HOST;
            break;
          }
          if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
            if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);
            else url.host = base.host;
          }
          state = PATH;
          continue;

        case FILE_HOST:
          if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
            if (!stateOverride && isWindowsDriveLetter(buffer)) {
              state = PATH;
            } else if (buffer == '') {
              url.host = '';
              if (stateOverride) return;
              state = PATH_START;
            } else {
              failure = url.parseHost(buffer);
              if (failure) return failure;
              if (url.host == 'localhost') url.host = '';
              if (stateOverride) return;
              buffer = '';
              state = PATH_START;
            } continue;
          } else buffer += chr;
          break;

        case PATH_START:
          if (url.isSpecial()) {
            state = PATH;
            if (chr != '/' && chr != '\\') continue;
          } else if (!stateOverride && chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            state = PATH;
            if (chr != '/') continue;
          } break;

        case PATH:
          if (
            chr == EOF || chr == '/' ||
            (chr == '\\' && url.isSpecial()) ||
            (!stateOverride && (chr == '?' || chr == '#'))
          ) {
            if (isDoubleDot(buffer)) {
              url.shortenPath();
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else if (isSingleDot(buffer)) {
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else {
              if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                if (url.host) url.host = '';
                buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
              }
              push(url.path, buffer);
            }
            buffer = '';
            if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
              while (url.path.length > 1 && url.path[0] === '') {
                shift(url.path);
              }
            }
            if (chr == '?') {
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            }
          } else {
            buffer += percentEncode(chr, pathPercentEncodeSet);
          } break;

        case CANNOT_BE_A_BASE_URL_PATH:
          if (chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
          } break;

        case QUERY:
          if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            if (chr == "'" && url.isSpecial()) url.query += '%27';
            else if (chr == '#') url.query += '%23';
            else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
          } break;

        case FRAGMENT:
          if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
          break;
      }

      pointer++;
    }
  },
  // https://url.spec.whatwg.org/#host-parsing
  parseHost: function (input) {
    var result, codePoints, index;
    if (charAt(input, 0) == '[') {
      if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
      result = parseIPv6(stringSlice(input, 1, -1));
      if (!result) return INVALID_HOST;
      this.host = result;
    // opaque host
    } else if (!this.isSpecial()) {
      if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
      result = '';
      codePoints = arrayFrom(input);
      for (index = 0; index < codePoints.length; index++) {
        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
      }
      this.host = result;
    } else {
      input = toASCII(input);
      if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
      result = parseIPv4(input);
      if (result === null) return INVALID_HOST;
      this.host = result;
    }
  },
  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
  cannotHaveUsernamePasswordPort: function () {
    return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
  },
  // https://url.spec.whatwg.org/#include-credentials
  includesCredentials: function () {
    return this.username != '' || this.password != '';
  },
  // https://url.spec.whatwg.org/#is-special
  isSpecial: function () {
    return hasOwn(specialSchemes, this.scheme);
  },
  // https://url.spec.whatwg.org/#shorten-a-urls-path
  shortenPath: function () {
    var path = this.path;
    var pathSize = path.length;
    if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
      path.length--;
    }
  },
  // https://url.spec.whatwg.org/#concept-url-serializer
  serialize: function () {
    var url = this;
    var scheme = url.scheme;
    var username = url.username;
    var password = url.password;
    var host = url.host;
    var port = url.port;
    var path = url.path;
    var query = url.query;
    var fragment = url.fragment;
    var output = scheme + ':';
    if (host !== null) {
      output += '//';
      if (url.includesCredentials()) {
        output += username + (password ? ':' + password : '') + '@';
      }
      output += serializeHost(host);
      if (port !== null) output += ':' + port;
    } else if (scheme == 'file') output += '//';
    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
    if (query !== null) output += '?' + query;
    if (fragment !== null) output += '#' + fragment;
    return output;
  },
  // https://url.spec.whatwg.org/#dom-url-href
  setHref: function (href) {
    var failure = this.parse(href);
    if (failure) throw TypeError(failure);
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-origin
  getOrigin: function () {
    var scheme = this.scheme;
    var port = this.port;
    if (scheme == 'blob') try {
      return new URLConstructor(scheme.path[0]).origin;
    } catch (error) {
      return 'null';
    }
    if (scheme == 'file' || !this.isSpecial()) return 'null';
    return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
  },
  // https://url.spec.whatwg.org/#dom-url-protocol
  getProtocol: function () {
    return this.scheme + ':';
  },
  setProtocol: function (protocol) {
    this.parse($toString(protocol) + ':', SCHEME_START);
  },
  // https://url.spec.whatwg.org/#dom-url-username
  getUsername: function () {
    return this.username;
  },
  setUsername: function (username) {
    var codePoints = arrayFrom($toString(username));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.username = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-password
  getPassword: function () {
    return this.password;
  },
  setPassword: function (password) {
    var codePoints = arrayFrom($toString(password));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.password = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-host
  getHost: function () {
    var host = this.host;
    var port = this.port;
    return host === null ? ''
      : port === null ? serializeHost(host)
      : serializeHost(host) + ':' + port;
  },
  setHost: function (host) {
    if (this.cannotBeABaseURL) return;
    this.parse(host, HOST);
  },
  // https://url.spec.whatwg.org/#dom-url-hostname
  getHostname: function () {
    var host = this.host;
    return host === null ? '' : serializeHost(host);
  },
  setHostname: function (hostname) {
    if (this.cannotBeABaseURL) return;
    this.parse(hostname, HOSTNAME);
  },
  // https://url.spec.whatwg.org/#dom-url-port
  getPort: function () {
    var port = this.port;
    return port === null ? '' : $toString(port);
  },
  setPort: function (port) {
    if (this.cannotHaveUsernamePasswordPort()) return;
    port = $toString(port);
    if (port == '') this.port = null;
    else this.parse(port, PORT);
  },
  // https://url.spec.whatwg.org/#dom-url-pathname
  getPathname: function () {
    var path = this.path;
    return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
  },
  setPathname: function (pathname) {
    if (this.cannotBeABaseURL) return;
    this.path = [];
    this.parse(pathname, PATH_START);
  },
  // https://url.spec.whatwg.org/#dom-url-search
  getSearch: function () {
    var query = this.query;
    return query ? '?' + query : '';
  },
  setSearch: function (search) {
    search = $toString(search);
    if (search == '') {
      this.query = null;
    } else {
      if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
      this.query = '';
      this.parse(search, QUERY);
    }
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-searchparams
  getSearchParams: function () {
    return this.searchParams.facade;
  },
  // https://url.spec.whatwg.org/#dom-url-hash
  getHash: function () {
    var fragment = this.fragment;
    return fragment ? '#' + fragment : '';
  },
  setHash: function (hash) {
    hash = $toString(hash);
    if (hash == '') {
      this.fragment = null;
      return;
    }
    if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
    this.fragment = '';
    this.parse(hash, FRAGMENT);
  },
  update: function () {
    this.query = this.searchParams.serialize() || null;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLPrototype);
  var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
  var state = setInternalState(that, new URLState(url, false, base));
  if (!DESCRIPTORS) {
    that.href = state.serialize();
    that.origin = state.getOrigin();
    that.protocol = state.getProtocol();
    that.username = state.getUsername();
    that.password = state.getPassword();
    that.host = state.getHost();
    that.hostname = state.getHostname();
    that.port = state.getPort();
    that.pathname = state.getPathname();
    that.search = state.getSearch();
    that.searchParams = state.getSearchParams();
    that.hash = state.getHash();
  }
};

var URLPrototype = URLConstructor.prototype;

var accessorDescriptor = function (getter, setter) {
  return {
    get: function () {
      return getInternalURLState(this)[getter]();
    },
    set: setter && function (value) {
      return getInternalURLState(this)[setter](value);
    },
    configurable: true,
    enumerable: true
  };
};

if (DESCRIPTORS) {
  // `URL.prototype.href` accessors pair
  // https://url.spec.whatwg.org/#dom-url-href
  defineBuiltInAccessor(URLPrototype, 'href', accessorDescriptor('serialize', 'setHref'));
  // `URL.prototype.origin` getter
  // https://url.spec.whatwg.org/#dom-url-origin
  defineBuiltInAccessor(URLPrototype, 'origin', accessorDescriptor('getOrigin'));
  // `URL.prototype.protocol` accessors pair
  // https://url.spec.whatwg.org/#dom-url-protocol
  defineBuiltInAccessor(URLPrototype, 'protocol', accessorDescriptor('getProtocol', 'setProtocol'));
  // `URL.prototype.username` accessors pair
  // https://url.spec.whatwg.org/#dom-url-username
  defineBuiltInAccessor(URLPrototype, 'username', accessorDescriptor('getUsername', 'setUsername'));
  // `URL.prototype.password` accessors pair
  // https://url.spec.whatwg.org/#dom-url-password
  defineBuiltInAccessor(URLPrototype, 'password', accessorDescriptor('getPassword', 'setPassword'));
  // `URL.prototype.host` accessors pair
  // https://url.spec.whatwg.org/#dom-url-host
  defineBuiltInAccessor(URLPrototype, 'host', accessorDescriptor('getHost', 'setHost'));
  // `URL.prototype.hostname` accessors pair
  // https://url.spec.whatwg.org/#dom-url-hostname
  defineBuiltInAccessor(URLPrototype, 'hostname', accessorDescriptor('getHostname', 'setHostname'));
  // `URL.prototype.port` accessors pair
  // https://url.spec.whatwg.org/#dom-url-port
  defineBuiltInAccessor(URLPrototype, 'port', accessorDescriptor('getPort', 'setPort'));
  // `URL.prototype.pathname` accessors pair
  // https://url.spec.whatwg.org/#dom-url-pathname
  defineBuiltInAccessor(URLPrototype, 'pathname', accessorDescriptor('getPathname', 'setPathname'));
  // `URL.prototype.search` accessors pair
  // https://url.spec.whatwg.org/#dom-url-search
  defineBuiltInAccessor(URLPrototype, 'search', accessorDescriptor('getSearch', 'setSearch'));
  // `URL.prototype.searchParams` getter
  // https://url.spec.whatwg.org/#dom-url-searchparams
  defineBuiltInAccessor(URLPrototype, 'searchParams', accessorDescriptor('getSearchParams'));
  // `URL.prototype.hash` accessors pair
  // https://url.spec.whatwg.org/#dom-url-hash
  defineBuiltInAccessor(URLPrototype, 'hash', accessorDescriptor('getHash', 'setHash'));
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
defineBuiltIn(URLPrototype, 'toJSON', function toJSON() {
  return getInternalURLState(this).serialize();
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
defineBuiltIn(URLPrototype, 'toString', function toString() {
  return getInternalURLState(this).serialize();
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  if (nativeCreateObjectURL) defineBuiltIn(URLConstructor, 'createObjectURL', bind(nativeCreateObjectURL, NativeURL));
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  if (nativeRevokeObjectURL) defineBuiltIn(URLConstructor, 'revokeObjectURL', bind(nativeRevokeObjectURL, NativeURL));
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, constructor: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url.js":
/*!***************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\core-js\modules\web.url.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(/*! ../modules/web.url.constructor */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\core-js\\modules\\web.url.constructor.js");


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\chart.js\\auto\\auto.mjs":
/*!***********************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\chart.js\auto\auto.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dist_chart_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/chart.mjs */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\chart.js\\dist\\chart.mjs");


_dist_chart_mjs__WEBPACK_IMPORTED_MODULE_0__.Chart.register(..._dist_chart_mjs__WEBPACK_IMPORTED_MODULE_0__.registerables);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_dist_chart_mjs__WEBPACK_IMPORTED_MODULE_0__.Chart);


/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\chart.js\\dist\\chart.mjs":
/*!************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\chart.js\dist\chart.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Animations": () => (/* binding */ Animations),
/* harmony export */   "ArcElement": () => (/* binding */ ArcElement),
/* harmony export */   "BarController": () => (/* binding */ BarController),
/* harmony export */   "BarElement": () => (/* binding */ BarElement),
/* harmony export */   "BasePlatform": () => (/* binding */ BasePlatform),
/* harmony export */   "BasicPlatform": () => (/* binding */ BasicPlatform),
/* harmony export */   "BubbleController": () => (/* binding */ BubbleController),
/* harmony export */   "CategoryScale": () => (/* binding */ CategoryScale),
/* harmony export */   "Chart": () => (/* binding */ Chart),
/* harmony export */   "DatasetController": () => (/* binding */ DatasetController),
/* harmony export */   "Decimation": () => (/* binding */ plugin_decimation),
/* harmony export */   "DomPlatform": () => (/* binding */ DomPlatform),
/* harmony export */   "DoughnutController": () => (/* binding */ DoughnutController),
/* harmony export */   "Element": () => (/* binding */ Element),
/* harmony export */   "Filler": () => (/* binding */ index),
/* harmony export */   "Interaction": () => (/* binding */ Interaction),
/* harmony export */   "Legend": () => (/* binding */ plugin_legend),
/* harmony export */   "LineController": () => (/* binding */ LineController),
/* harmony export */   "LineElement": () => (/* binding */ LineElement),
/* harmony export */   "LinearScale": () => (/* binding */ LinearScale),
/* harmony export */   "LogarithmicScale": () => (/* binding */ LogarithmicScale),
/* harmony export */   "PieController": () => (/* binding */ PieController),
/* harmony export */   "PointElement": () => (/* binding */ PointElement),
/* harmony export */   "PolarAreaController": () => (/* binding */ PolarAreaController),
/* harmony export */   "RadarController": () => (/* binding */ RadarController),
/* harmony export */   "RadialLinearScale": () => (/* binding */ RadialLinearScale),
/* harmony export */   "Scale": () => (/* binding */ Scale),
/* harmony export */   "ScatterController": () => (/* binding */ ScatterController),
/* harmony export */   "SubTitle": () => (/* binding */ plugin_subtitle),
/* harmony export */   "Ticks": () => (/* binding */ Ticks),
/* harmony export */   "TimeScale": () => (/* binding */ TimeScale),
/* harmony export */   "TimeSeriesScale": () => (/* binding */ TimeSeriesScale),
/* harmony export */   "Title": () => (/* binding */ plugin_title),
/* harmony export */   "Tooltip": () => (/* binding */ plugin_tooltip),
/* harmony export */   "_adapters": () => (/* binding */ adapters),
/* harmony export */   "_detectPlatform": () => (/* binding */ _detectPlatform),
/* harmony export */   "animator": () => (/* binding */ animator),
/* harmony export */   "controllers": () => (/* binding */ controllers),
/* harmony export */   "defaults": () => (/* reexport safe */ _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d),
/* harmony export */   "elements": () => (/* binding */ elements),
/* harmony export */   "layouts": () => (/* binding */ layouts),
/* harmony export */   "plugins": () => (/* binding */ plugins),
/* harmony export */   "registerables": () => (/* binding */ registerables),
/* harmony export */   "registry": () => (/* binding */ registry),
/* harmony export */   "scales": () => (/* binding */ scales)
/* harmony export */ });
/* harmony import */ var _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/helpers.segment.mjs */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\chart.js\\dist\\chunks\\helpers.segment.mjs");
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */



class Animator {
  constructor() {
    this._request = null;
    this._charts = new Map();
    this._running = false;
    this._lastDate = undefined;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach(fn => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.r.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i = items.length - 1;
      let draw = false;
      let item;
      for (; i >= 0; --i) {
        item = items[i];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw = true;
        } else {
          items[i] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw) {
        chart.draw();
        this._notify(chart, anims, date, 'progress');
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, 'complete');
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb) {
    this._getAnims(chart).listeners[event].push(cb);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i = items.length - 1;
    for (; i >= 0; --i) {
      items[i].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), 'complete');
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = new Animator();

const transparent = 'transparent';
const interpolators = {
  boolean(from, to, factor) {
    return factor > 0.5 ? to : from;
  },
  color(from, to, factor) {
    const c0 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(from || transparent);
    const c1 = c0.valid && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(to || transparent);
    return c1 && c1.valid
      ? c1.mix(c0, factor).hexString()
      : to;
  },
  number(from, to, factor) {
    return from + (to - from) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to) {
    const currentValue = target[prop];
    to = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.to, to, currentValue, cfg.from]);
    const from = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.from, currentValue, to]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from];
    this._easing = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.e[cfg.easing] || _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.e.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from;
    this._to = to;
    this._promises = undefined;
  }
  active() {
    return this._active;
  }
  update(cfg, to, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.to, to, currentValue, cfg.from]);
      this._from = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.from, currentValue, to]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from = this._from;
    const loop = this._loop;
    const to = this._to;
    let factor;
    this._active = from !== to && (loop || (elapsed < duration));
    if (!this._active) {
      this._target[prop] = to;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from;
      return;
    }
    factor = (elapsed / duration) % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from, to, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({res, rej});
    });
  }
  _notify(resolved) {
    const method = resolved ? 'res' : 'rej';
    const promises = this._promises || [];
    for (let i = 0; i < promises.length; i++) {
      promises[i][method]();
    }
  }
}

const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];
const colors = ['color', 'borderColor', 'backgroundColor'];
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('animation', {
  delay: undefined,
  duration: 1000,
  easing: 'easeOutQuart',
  fn: undefined,
  from: undefined,
  loop: undefined,
  to: undefined,
  type: undefined,
});
const animationOptions = Object.keys(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.animation);
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('animation', {
  _fallback: false,
  _indexable: false,
  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',
});
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('animations', {
  colors: {
    type: 'color',
    properties: colors
  },
  numbers: {
    type: 'number',
    properties: numbers
  },
});
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('animations', {
  _fallback: 'animation',
});
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('transitions', {
  active: {
    animation: {
      duration: 400
    }
  },
  resize: {
    animation: {
      duration: 0
    }
  },
  show: {
    animations: {
      colors: {
        from: 'transparent'
      },
      visible: {
        type: 'boolean',
        duration: 0
      },
    }
  },
  hide: {
    animations: {
      colors: {
        to: 'transparent'
      },
      visible: {
        type: 'boolean',
        easing: 'linear',
        fn: v => v | 0
      },
    }
  }
});
class Animations {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = new Map();
    this.configure(config);
  }
  configure(config) {
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(config)) {
      return;
    }
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach(key => {
      const cfg = config[key];
      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(cfg.properties) && cfg.properties || [key]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i;
    for (i = props.length - 1; i >= 0; --i) {
      const prop = props[i];
      if (prop.charAt(0) === '$') {
        continue;
      }
      if (prop === 'options') {
        animations.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }
    return animations;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations = this._createAnimations(target, values);
    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }
}
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i = 0; i < keys.length; i++) {
    const anim = animations[keys[i]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});
  }
  return options;
}

function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min = opts.min === undefined ? allowedOverflow : 0;
  const max = opts.max === undefined ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x = scaleClip(xScale, allowedOverflow);
  const y = scaleClip(yScale, allowedOverflow);
  return {
    top: y.end,
    right: x.end,
    bottom: y.start,
    left: x.start
  };
}
function toClip(value) {
  let t, r, b, l;
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value)) {
    t = value.top;
    r = value.right;
    b = value.bottom;
    l = value.left;
  } else {
    t = r = b = l = value;
  }
  return {
    top: t,
    right: r,
    bottom: b,
    left: l,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i, ilen;
  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys.push(metasets[i].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
  const keys = stack.keys;
  const singleMode = options.mode === 'single';
  let i, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    datasetIndex = +keys[i];
    if (datasetIndex === dsIndex) {
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(otherValue) && (singleMode || (value === 0 || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(value) === (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(otherValue)))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i, ilen, key;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    key = keys[i];
    adata[i] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || (stacked === undefined && meta.stack !== undefined);
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const {min, max, minDefined, maxDefined} = scale.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if ((positive && value > 0) || (!positive && value < 0)) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const {chart, _cachedMeta: meta} = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const {iScale, vScale, index: datasetIndex} = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i = 0; i < ilen; ++i) {
    const item = parsed[i];
    const {[iAxis]: index, [vAxis]: value} = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
  }
}
function getFirstScaleId(chart, axis) {
  const scales = chart.scales;
  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent,
    {
      active: false,
      dataset: undefined,
      datasetIndex: index,
      index,
      mode: 'default',
      type: 'dataset'
    }
  );
}
function createDataContext(parent, index, element) {
  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {
    active: false,
    dataIndex: index,
    parsed: undefined,
    raw: undefined,
    element,
    index,
    mode: 'default',
    type: 'data'
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
      return;
    }
    delete stacks[axis][datasetIndex];
  }
}
const isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked
  && {keys: getSortedDatasetIndices(chart, true), values: null};
class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = undefined;
    this._parsing = false;
    this._data = undefined;
    this._objectData = undefined;
    this._sharedOptions = undefined;
    this._drawStart = undefined;
    this._drawCount = undefined;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = undefined;
    this._syncList = [];
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;
    const xid = meta.xAxisID = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.xAxisID, getFirstScaleId(chart, 'x'));
    const yid = meta.yAxisID = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.yAxisID, getFirstScaleId(chart, 'y'));
    const rid = meta.rAxisID = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.rAxisID, getFirstScaleId(chart, 'r'));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale
      ? meta.vScale
      : meta.iScale;
  }
  reset() {
    this._update('reset');
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(data)) {
      this._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
    }
  }
  configure() {
    const config = this.chart.config;
    const scopeKeys = config.datasetScopeKeys(this._type);
    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config.createResolver(scopes, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const {_cachedMeta: meta, _data: data} = this;
    const {iScale, _stacked} = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);
      for (i = 0; i < count; ++i) {
        meta._parsed[i + start] = cur = parsed[i];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const {iScale, vScale} = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i, ilen, index;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      parsed[i] = {
        [iAxis]: singleScale || iScale.parse(labels[index], index),
        [vAxis]: vScale.parse(data[index], index)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const {xScale, yScale} = meta;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse(item[0], index),
        y: yScale.parse(item[1], index)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const {xScale, yScale} = meta;
    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(item, xAxisKey), index),
        y: yScale.parse((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(item, yAxisKey), index)
      };
    }
    return parsed;
  }
  getParsed(index) {
    return this._cachedMeta._parsed[index];
  }
  getDataElement(index) {
    return this._cachedMeta.data[index];
  }
  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]
    };
    return applyStack(stack, value, meta.index, {mode});
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale);
    const stack = createStack(canStack, meta, this.chart);
    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};
    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);
    let i, parsed;
    function _skip() {
      parsed = _parsed[i];
      const otherValue = parsed[otherScale.axis];
      return !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i = 0; i < ilen; ++i) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range, scale, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i = ilen - 1; i >= 0; --i) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i, ilen, value;
    for (i = 0, ilen = parsed.length; i < ilen; ++i) {
      value = parsed[i][scale.axis];
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index);
    return {
      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
    };
  }
  _update(mode) {
    const meta = this._cachedMeta;
    this.update(mode || 'default');
    meta._clip = toClip((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode) {}
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || (elements.length - start);
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i = start; i < start + count; ++i) {
      const element = elements[i];
      if (element.hidden) {
        continue;
      }
      if (element.active && drawActiveElementsOnTop) {
        active.push(element);
      } else {
        element.draw(ctx, area);
      }
    }
    for (i = 0; i < active.length; ++i) {
      active[i].draw(ctx, area);
    }
  }
  getStyle(index, active) {
    const mode = active ? 'active' : 'default';
    return index === undefined && this._cachedMeta.dataset
      ? this.resolveDatasetElementOptions(mode)
      : this.resolveDataElementOptions(index || 0, mode);
  }
  getContext(index, active, mode) {
    const dataset = this.getDataset();
    let context;
    if (index >= 0 && index < this._cachedMeta.data.length) {
      const element = this._cachedMeta.data[index];
      context = element.$context ||
        (element.$context = createDataContext(this.getContext(), index, element));
      context.parsed = this.getParsed(index);
      context.raw = dataset.data[index];
      context.index = context.dataIndex = index;
    } else {
      context = this.$context ||
        (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = this.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index);
  }
  _resolveElementOptions(elementType, mode = 'default', index) {
    const active = mode === 'active';
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + '-' + mode;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(index);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config = this.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];
    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
    const names = Object.keys(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.elements[elementType]);
    const context = () => this.getContext(index, active);
    const values = config.resolveNamedOptions(scopes, names, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index, transition, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config = this.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
      options = config.createResolver(scopes, this.getContext(index, active, transition));
    }
    const animations = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }
    return animations;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode) {
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
    return {sharedOptions, includeOptions};
  }
  updateElement(element, index, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element, properties);
    } else {
      this._resolveAnimations(index, mode).update(element, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element, index, mode, active) {
    element.active = active;
    const options = this.getStyle(index, active);
    this._resolveAnimations(index, mode, active).update(element, {
      options: (!active && this.getSharedOptions(options)) || options
    });
  }
  removeHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, 'active', false);
  }
  setHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, 'active', true);
  }
  _removeDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, undefined, 'active', false);
    }
  }
  _setDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, undefined, 'active', true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i;
    const move = (arr) => {
      arr.length += count;
      for (i = arr.length - 1; i >= end; i--) {
        arr[i] = arr[i - count];
      }
    };
    move(data);
    for (i = start; i < end; ++i) {
      data[i] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, 'reset');
    }
  }
  updateElements(element, start, count, mode) {}
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([this.index, ...args]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync(['_insertElements', this.getDataset().data.length - count, count]);
  }
  _onDataPop() {
    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);
  }
  _onDataShift() {
    this._sync(['_removeElements', 0, 1]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync(['_removeElements', start, count]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync(['_insertElements', start, newCount]);
    }
  }
  _onDataUnshift() {
    this._sync(['_insertElements', 0, arguments.length]);
  }
}
DatasetController.defaults = {};
DatasetController.prototype.datasetElementType = null;
DatasetController.prototype.dataElementType = null;

function getAllScaleValues(scale, type) {
  if (!scale._cache.$bar) {
    const visibleMetas = scale.getMatchingVisibleMetas(type);
    let values = [];
    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {
      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
    }
    scale._cache.$bar = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__._)(values.sort((a, b) => a - b));
  }
  return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
  const scale = meta.iScale;
  const values = getAllScaleValues(scale, meta.type);
  let min = scale._length;
  let i, ilen, curr, prev;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(prev)) {
      min = Math.min(min, Math.abs(curr - prev) || min);
    }
    prev = curr;
  };
  for (i = 0, ilen = values.length; i < ilen; ++i) {
    curr = scale.getPixelForValue(values[i]);
    updateMinAndPrev();
  }
  prev = undefined;
  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
    curr = scale.getPixelForTick(i);
    updateMinAndPrev();
  }
  return min;
}
function computeFitCategoryTraits(index, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size, ratio;
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size / stackCount,
    ratio,
    start: ruler.pixels[index] - (size / 2)
  };
}
function computeFlexCategoryTraits(index, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index];
  let prev = index > 0 ? pixels[index - 1] : null;
  let next = index < pixels.length - 1 ? pixels[index + 1] : null;
  const percent = options.categoryPercentage;
  if (prev === null) {
    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
  }
  if (next === null) {
    next = curr + curr - prev;
  }
  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
  const size = Math.abs(next - prev) / 2 * percent;
  return {
    chunk: size / stackCount,
    ratio: options.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i) {
  const startValue = vScale.parse(entry[0], i);
  const endValue = vScale.parse(entry[1], i);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}
function parseValue(entry, item, vScale, i) {
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(entry)) {
    parseFloatBar(entry, item, vScale, i);
  } else {
    item[vScale.axis] = vScale.parse(entry, i);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i, ilen, item, entry;
  for (i = start, ilen = start + count; i < ilen; ++i) {
    entry = data[i];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
    parsed.push(parseValue(entry, item, vScale, i));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function barSign(size, vScale, actualBase) {
  if (size !== 0) {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(size);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = 'left';
    end = 'right';
  } else {
    reverse = properties.base < properties.y;
    start = 'bottom';
    end = 'top';
  }
  if (reverse) {
    top = 'end';
    bottom = 'start';
  } else {
    top = 'start';
    bottom = 'end';
  }
  return {start, end, reverse, top, bottom};
}
function setBorderSkipped(properties, options, stack, index) {
  let edge = options.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  if (edge === true) {
    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};
    return;
  }
  const {start, end, reverse, top, bottom} = borderProps(properties);
  if (edge === 'middle' && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index) {
      edge = top;
    } else if ((stack._bottom || 0) === index) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
  if (reverse) {
    edge = swap(edge, a, b);
    edge = startEnd(edge, b, a);
  } else {
    edge = startEnd(edge, a, b);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
  return v === 'start' ? start : v === 'end' ? end : v;
}
function setInflateAmount(properties, {inflateAmount}, ratio) {
  properties.inflateAmount = inflateAmount === 'auto'
    ? ratio === 1 ? 0.33 : 0
    : inflateAmount;
}
class BarController extends DatasetController {
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseObjectData(meta, data, start, count) {
    const {iScale, vScale} = meta;
    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
    const parsed = [];
    let i, ilen, item, obj;
    for (i = start, ilen = start + count; i < ilen; ++i) {
      obj = data[i];
      item = {};
      item[iScale.axis] = iScale.parse((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(obj, iAxisKey), i);
      parsed.push(parseValue((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(obj, vAxisKey), item, vScale, i));
    }
    return parsed;
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    super.updateRangeFromParsed(range, scale, parsed, stack);
    const custom = parsed._custom;
    if (custom && scale === this._cachedMeta.vScale) {
      range.min = Math.min(range.min, custom.min);
      range.max = Math.max(range.max, custom.max);
    }
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const {iScale, vScale} = meta;
    const parsed = this.getParsed(index);
    const custom = parsed._custom;
    const value = isFloatBar(custom)
      ? '[' + custom.start + ', ' + custom.end + ']'
      : '' + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
    const meta = this._cachedMeta;
    meta.stack = this.getDataset().stack;
  }
  update(mode) {
    const meta = this._cachedMeta;
    this.updateElements(meta.data, 0, meta.data.length, mode);
  }
  updateElements(bars, start, count, mode) {
    const reset = mode === 'reset';
    const {index, _cachedMeta: {vScale}} = this;
    const base = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();
    const ruler = this._getRuler();
    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);
    for (let i = start; i < start + count; i++) {
      const parsed = this.getParsed(i);
      const vpixels = reset || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);
      const ipixels = this._calculateBarIndexPixels(i, ruler);
      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
      }
      const options = properties.options || bars[i].options;
      setBorderSkipped(properties, options, stack, index);
      setInflateAmount(properties, options, ruler.ratio);
      this.updateElement(bars[i], i, properties, mode);
    }
  }
  _getStacks(last, dataIndex) {
    const {iScale} = this._cachedMeta;
    const metasets = iScale.getMatchingVisibleMetas(this._type)
      .filter(meta => meta.controller.options.grouped);
    const stacked = iScale.options.stacked;
    const stacks = [];
    const skipNull = (meta) => {
      const parsed = meta.controller.getParsed(dataIndex);
      const val = parsed && parsed[meta.vScale.axis];
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(val) || isNaN(val)) {
        return true;
      }
    };
    for (const meta of metasets) {
      if (dataIndex !== undefined && skipNull(meta)) {
        continue;
      }
      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
				(stacked === undefined && meta.stack === undefined)) {
        stacks.push(meta.stack);
      }
      if (meta.index === last) {
        break;
      }
    }
    if (!stacks.length) {
      stacks.push(undefined);
    }
    return stacks;
  }
  _getStackCount(index) {
    return this._getStacks(undefined, index).length;
  }
  _getStackIndex(datasetIndex, name, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);
    const index = (name !== undefined)
      ? stacks.indexOf(name)
      : -1;
    return (index === -1)
      ? stacks.length - 1
      : index;
  }
  _getRuler() {
    const opts = this.options;
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i, ilen;
    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
    }
    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(meta);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: this._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }
  _calculateBarValuePixels(index) {
    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;
    const actualBase = baseValue || 0;
    const parsed = this.getParsed(index);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
    let head, size;
    if (length !== value) {
      start = length - value;
      length = value;
    }
    if (floating) {
      value = custom.barStart;
      length = custom.barEnd - custom.barStart;
      if (value !== 0 && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(value) !== (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(custom.barEnd)) {
        start = 0;
      }
      start += value;
    }
    const startValue = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(baseValue) && !floating ? baseValue : start;
    let base = vScale.getPixelForValue(startValue);
    if (this.chart.getDataVisibility(index)) {
      head = vScale.getPixelForValue(start + length);
    } else {
      head = base;
    }
    size = head - base;
    if (Math.abs(size) < minBarLength) {
      size = barSign(size, vScale, actualBase) * minBarLength;
      if (value === actualBase) {
        base -= size / 2;
      }
      const startPixel = vScale.getPixelForDecimal(0);
      const endPixel = vScale.getPixelForDecimal(1);
      const min = Math.min(startPixel, endPixel);
      const max = Math.max(startPixel, endPixel);
      base = Math.max(Math.min(base, max), min);
      head = base + size;
    }
    if (base === vScale.getPixelForValue(actualBase)) {
      const halfGrid = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
      base += halfGrid;
      size -= halfGrid;
    }
    return {
      size,
      base,
      head,
      center: head + size / 2
    };
  }
  _calculateBarIndexPixels(index, ruler) {
    const scale = ruler.scale;
    const options = this.options;
    const skipNull = options.skipNull;
    const maxBarThickness = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(options.maxBarThickness, Infinity);
    let center, size;
    if (ruler.grouped) {
      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
      const range = options.barThickness === 'flex'
        ? computeFlexCategoryTraits(index, ruler, options, stackCount)
        : computeFitCategoryTraits(index, ruler, options, stackCount);
      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
      size = Math.min(maxBarThickness, range.chunk * range.ratio);
    } else {
      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }
    return {
      base: center - size / 2,
      head: center + size / 2,
      center,
      size
    };
  }
  draw() {
    const meta = this._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i = 0;
    for (; i < ilen; ++i) {
      if (this.getParsed(i)[vScale.axis] !== null) {
        rects[i].draw(this._ctx);
      }
    }
  }
}
BarController.id = 'bar';
BarController.defaults = {
  datasetElementType: false,
  dataElementType: 'bar',
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'base', 'width', 'height']
    }
  }
};
BarController.overrides = {
  scales: {
    _index_: {
      type: 'category',
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: 'linear',
      beginAtZero: true,
    }
  }
};

class BubbleController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }
  parsePrimitiveData(meta, data, start, count) {
    const parsed = super.parsePrimitiveData(meta, data, start, count);
    for (let i = 0; i < parsed.length; i++) {
      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const parsed = super.parseArrayData(meta, data, start, count);
    for (let i = 0; i < parsed.length; i++) {
      const item = data[start + i];
      parsed[i]._custom = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(item[2], this.resolveDataElementOptions(i + start).radius);
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const parsed = super.parseObjectData(meta, data, start, count);
    for (let i = 0; i < parsed.length; i++) {
      const item = data[start + i];
      parsed[i]._custom = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
    }
    return parsed;
  }
  getMaxOverflow() {
    const data = this._cachedMeta.data;
    let max = 0;
    for (let i = data.length - 1; i >= 0; --i) {
      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
    }
    return max > 0 && max;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const {xScale, yScale} = meta;
    const parsed = this.getParsed(index);
    const x = xScale.getLabelForValue(parsed.x);
    const y = yScale.getLabelForValue(parsed.y);
    const r = parsed._custom;
    return {
      label: meta.label,
      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
    };
  }
  update(mode) {
    const points = this._cachedMeta.data;
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === 'reset';
    const {iScale, vScale} = this._cachedMeta;
    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const parsed = !reset && this.getParsed(i);
      const properties = {};
      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
      properties.skip = isNaN(iPixel) || isNaN(vPixel);
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
        if (reset) {
          properties.options.radius = 0;
        }
      }
      this.updateElement(point, i, properties, mode);
    }
  }
  resolveDataElementOptions(index, mode) {
    const parsed = this.getParsed(index);
    let values = super.resolveDataElementOptions(index, mode);
    if (values.$shared) {
      values = Object.assign({}, values, {$shared: false});
    }
    const radius = values.radius;
    if (mode !== 'active') {
      values.radius = 0;
    }
    values.radius += (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(parsed && parsed._custom, radius);
    return values;
  }
}
BubbleController.id = 'bubble';
BubbleController.defaults = {
  datasetElementType: false,
  dataElementType: 'point',
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'borderWidth', 'radius']
    }
  }
};
BubbleController.overrides = {
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  },
  plugins: {
    tooltip: {
      callbacks: {
        title() {
          return '';
        }
      }
    }
  }
};

function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a, b) => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
    const calcMin = (angle, a, b) => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);
    const minX = calcMin(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P, startX, endX);
    const minY = calcMin(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {ratioX, ratioY, offsetX, offsetY};
}
class DoughnutController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = undefined;
    this.outerRadius = undefined;
    this.offsetX = undefined;
    this.offsetY = undefined;
  }
  linkScales() {}
  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    if (this._parsing === false) {
      meta._parsed = data;
    } else {
      let getter = (i) => +data[i];
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(data[start])) {
        const {key = 'value'} = this._parsing;
        getter = (i) => +(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(data[i], key);
      }
      let i, ilen;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        meta._parsed[i] = getter(i);
      }
    }
  }
  _getRotation() {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.rotation - 90);
  }
  _getCircumference() {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.circumference);
  }
  _getRotationExtents() {
    let min = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;
    let max = -_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;
    for (let i = 0; i < this.chart.data.datasets.length; ++i) {
      if (this.chart.isDatasetVisible(i)) {
        const controller = this.chart.getDatasetMeta(i).controller;
        const rotation = controller._getRotation();
        const circumference = controller._getCircumference();
        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }
    return {
      rotation: min,
      circumference: max - min,
    };
  }
  update(mode) {
    const chart = this.chart;
    const {chartArea} = chart;
    const meta = this._cachedMeta;
    const arcs = meta.data;
    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
    const cutout = Math.min((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(this.options.cutout, maxSize), 1);
    const chartWeight = this._getRingWeight(this.index);
    const {circumference, rotation} = this._getRotationExtents();
    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing) / ratioX;
    const maxHeight = (chartArea.height - spacing) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(this.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);
    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
    this.offsetX = offsetX * outerRadius;
    this.offsetY = offsetY * outerRadius;
    meta.total = this.calculateTotal();
    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  _circumference(i, reset) {
    const opts = this.options;
    const meta = this._cachedMeta;
    const circumference = this._getCircumference();
    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
      return 0;
    }
    return this.calculateCircumference(meta._parsed[i] * circumference / _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === 'reset';
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : this.innerRadius;
    const outerRadius = animateScale ? 0 : this.outerRadius;
    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);
    let startAngle = this._getRotation();
    let i;
    for (i = 0; i < start; ++i) {
      startAngle += this._circumference(i, reset);
    }
    for (i = start; i < start + count; ++i) {
      const circumference = this._circumference(i, reset);
      const arc = arcs[i];
      const properties = {
        x: centerX + this.offsetX,
        y: centerY + this.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);
      }
      startAngle += circumference;
      this.updateElement(arc, i, properties, mode);
    }
  }
  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i;
    for (i = 0; i < metaData.length; i++) {
      const value = meta._parsed[i];
      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
        total += Math.abs(value);
      }
    }
    return total;
  }
  calculateCircumference(value) {
    const total = this._cachedMeta.total;
    if (total > 0 && !isNaN(value)) {
      return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T * (Math.abs(value) / total);
    }
    return 0;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(meta._parsed[index], chart.options.locale);
    return {
      label: labels[index] || '',
      value,
    };
  }
  getMaxBorderWidth(arcs) {
    let max = 0;
    const chart = this.chart;
    let i, ilen, meta, controller, options;
    if (!arcs) {
      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
        if (chart.isDatasetVisible(i)) {
          meta = chart.getDatasetMeta(i);
          arcs = meta.data;
          controller = meta.controller;
          break;
        }
      }
    }
    if (!arcs) {
      return 0;
    }
    for (i = 0, ilen = arcs.length; i < ilen; ++i) {
      options = controller.resolveDataElementOptions(i);
      if (options.borderAlign !== 'inner') {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }
    return max;
  }
  getMaxOffset(arcs) {
    let max = 0;
    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {
      const options = this.resolveDataElementOptions(i);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }
    return max;
  }
  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;
    for (let i = 0; i < datasetIndex; ++i) {
      if (this.chart.isDatasetVisible(i)) {
        ringWeightOffset += this._getRingWeight(i);
      }
    }
    return ringWeightOffset;
  }
  _getRingWeight(datasetIndex) {
    return Math.max((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
}
DoughnutController.id = 'doughnut';
DoughnutController.defaults = {
  datasetElementType: false,
  dataElementType: 'arc',
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: 'number',
      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']
    },
  },
  cutout: '50%',
  rotation: 0,
  circumference: 360,
  radius: '100%',
  spacing: 0,
  indexAxis: 'r',
};
DoughnutController.descriptors = {
  _scriptable: (name) => name !== 'spacing',
  _indexable: (name) => name !== 'spacing',
};
DoughnutController.overrides = {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const {labels: {pointStyle}} = chart.legend.options;
            return data.labels.map((label, i) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                lineWidth: style.borderWidth,
                pointStyle: pointStyle,
                hidden: !chart.getDataVisibility(i),
                index: i
              };
            });
          }
          return [];
        }
      },
      onClick(e, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    },
    tooltip: {
      callbacks: {
        title() {
          return '';
        },
        label(tooltipItem) {
          let dataLabel = tooltipItem.label;
          const value = ': ' + tooltipItem.formattedValue;
          if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(dataLabel)) {
            dataLabel = dataLabel.slice();
            dataLabel[0] += value;
          } else {
            dataLabel += value;
          }
          return dataLabel;
        }
      }
    }
  }
};

class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    this.supportsDecimation = true;
    super.initialize();
  }
  update(mode) {
    const meta = this._cachedMeta;
    const {dataset: line, data: points = [], _dataset} = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let {start, count} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(meta)) {
      start = 0;
      count = points.length;
    }
    line._chart = this.chart;
    line._datasetIndex = this.index;
    line._decimated = !!_dataset._decimated;
    line.points = points;
    const options = this.resolveDatasetElementOptions(mode);
    if (!this.options.showLine) {
      options.borderWidth = 0;
    }
    options.segment = this.options.segment;
    this.updateElement(line, undefined, {
      animated: !animationsDisabled,
      options
    }, mode);
    this.updateElements(points, start, count, mode);
  }
  updateElements(points, start, count, mode) {
    const reset = mode === 'reset';
    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;
    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const {spanGaps, segment} = this.options;
    const maxGapLength = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i = start; i < start + count; ++i) {
      const point = points[i];
      const parsed = this.getParsed(i);
      const properties = directUpdate ? point : {};
      const nullData = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i, properties, mode);
      }
      prevParsed = parsed;
    }
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
LineController.id = 'line';
LineController.defaults = {
  datasetElementType: 'line',
  dataElementType: 'point',
  showLine: true,
  spanGaps: false,
};
LineController.overrides = {
  scales: {
    _index_: {
      type: 'category',
    },
    _value_: {
      type: 'linear',
    },
  }
};

class PolarAreaController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.innerRadius = undefined;
    this.outerRadius = undefined;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(meta._parsed[index].r, chart.options.locale);
    return {
      label: labels[index] || '',
      value,
    };
  }
  parseObjectData(meta, data, start, count) {
    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.y.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const arcs = this._cachedMeta.data;
    this._updateRadius();
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  getMinMax() {
    const meta = this._cachedMeta;
    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};
    meta.data.forEach((element, index) => {
      const parsed = this.getParsed(index).r;
      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
        if (parsed < range.min) {
          range.min = parsed;
        }
        if (parsed > range.max) {
          range.max = parsed;
        }
      }
    });
    return range;
  }
  _updateRadius() {
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
    const outerRadius = Math.max(minSize / 2, 0);
    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
    this.outerRadius = outerRadius - (radiusLength * this.index);
    this.innerRadius = this.outerRadius - radiusLength;
  }
  updateElements(arcs, start, count, mode) {
    const reset = mode === 'reset';
    const chart = this.chart;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const scale = this._cachedMeta.rScale;
    const centerX = scale.xCenter;
    const centerY = scale.yCenter;
    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P;
    let angle = datasetStartAngle;
    let i;
    const defaultAngle = 360 / this.countVisibleElements();
    for (i = 0; i < start; ++i) {
      angle += this._computeAngle(i, mode, defaultAngle);
    }
    for (i = start; i < start + count; i++) {
      const arc = arcs[i];
      let startAngle = angle;
      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
      angle = endAngle;
      if (reset) {
        if (animationOpts.animateScale) {
          outerRadius = 0;
        }
        if (animationOpts.animateRotate) {
          startAngle = endAngle = datasetStartAngle;
        }
      }
      const properties = {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius,
        startAngle,
        endAngle,
        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)
      };
      this.updateElement(arc, i, properties, mode);
    }
  }
  countVisibleElements() {
    const meta = this._cachedMeta;
    let count = 0;
    meta.data.forEach((element, index) => {
      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {
        count++;
      }
    });
    return count;
  }
  _computeAngle(index, mode, defaultAngle) {
    return this.chart.getDataVisibility(index)
      ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle)
      : 0;
  }
}
PolarAreaController.id = 'polarArea';
PolarAreaController.defaults = {
  dataElementType: 'arc',
  animation: {
    animateRotate: true,
    animateScale: true
  },
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']
    },
  },
  indexAxis: 'r',
  startAngle: 0,
};
PolarAreaController.overrides = {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const {labels: {pointStyle}} = chart.legend.options;
            return data.labels.map((label, i) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                lineWidth: style.borderWidth,
                pointStyle: pointStyle,
                hidden: !chart.getDataVisibility(i),
                index: i
              };
            });
          }
          return [];
        }
      },
      onClick(e, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    },
    tooltip: {
      callbacks: {
        title() {
          return '';
        },
        label(context) {
          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;
        }
      }
    }
  },
  scales: {
    r: {
      type: 'radialLinear',
      angleLines: {
        display: false
      },
      beginAtZero: true,
      grid: {
        circular: true
      },
      pointLabels: {
        display: false
      },
      startAngle: 0
    }
  }
};

class PieController extends DoughnutController {
}
PieController.id = 'pie';
PieController.defaults = {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: '100%'
};

class RadarController extends DatasetController {
  getLabelAndValue(index) {
    const vScale = this._cachedMeta.vScale;
    const parsed = this.getParsed(index);
    return {
      label: vScale.getLabels()[index],
      value: '' + vScale.getLabelForValue(parsed[vScale.axis])
    };
  }
  parseObjectData(meta, data, start, count) {
    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.y.bind(this)(meta, data, start, count);
  }
  update(mode) {
    const meta = this._cachedMeta;
    const line = meta.dataset;
    const points = meta.data || [];
    const labels = meta.iScale.getLabels();
    line.points = points;
    if (mode !== 'resize') {
      const options = this.resolveDatasetElementOptions(mode);
      if (!this.options.showLine) {
        options.borderWidth = 0;
      }
      const properties = {
        _loop: true,
        _fullLoop: labels.length === points.length,
        options
      };
      this.updateElement(line, undefined, properties, mode);
    }
    this.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const scale = this._cachedMeta.rScale;
    const reset = mode === 'reset';
    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);
      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
      const x = reset ? scale.xCenter : pointPosition.x;
      const y = reset ? scale.yCenter : pointPosition.y;
      const properties = {
        x,
        y,
        angle: pointPosition.angle,
        skip: isNaN(x) || isNaN(y),
        options
      };
      this.updateElement(point, i, properties, mode);
    }
  }
}
RadarController.id = 'radar';
RadarController.defaults = {
  datasetElementType: 'line',
  dataElementType: 'point',
  indexAxis: 'r',
  showLine: true,
  elements: {
    line: {
      fill: 'start'
    }
  },
};
RadarController.overrides = {
  aspectRatio: 1,
  scales: {
    r: {
      type: 'radialLinear',
    }
  }
};

class Element {
  constructor() {
    this.x = undefined;
    this.y = undefined;
    this.active = false;
    this.options = undefined;
    this.$animations = undefined;
  }
  tooltipPosition(useFinalPosition) {
    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
    return {x, y};
  }
  hasValue() {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(this.x) && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(this.y);
  }
  getProps(props, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props.forEach(prop => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
}
Element.defaults = {};
Element.defaultRoutes = undefined;

const formatters = {
  values(value) {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(value) ? value : '' + value;
  },
  numeric(tickValue, index, ticks) {
    if (tickValue === 0) {
      return '0';
    }
    const locale = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e+15) {
        notation = 'scientific';
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(Math.abs(delta));
    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};
    Object.assign(options, this.options.ticks.format);
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(tickValue, locale, options);
  },
  logarithmic(tickValue, index, ticks) {
    if (tickValue === 0) {
      return '0';
    }
    const remain = tickValue / (Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(tickValue))));
    if (remain === 1 || remain === 2 || remain === 5) {
      return formatters.numeric.call(this, tickValue, index, ticks);
    }
    return '';
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {formatters};

_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('scale', {
  display: true,
  offset: false,
  reverse: false,
  beginAtZero: false,
  bounds: 'ticks',
  grace: 0,
  grid: {
    display: true,
    lineWidth: 1,
    drawBorder: true,
    drawOnChartArea: true,
    drawTicks: true,
    tickLength: 8,
    tickWidth: (_ctx, options) => options.lineWidth,
    tickColor: (_ctx, options) => options.color,
    offset: false,
    borderDash: [],
    borderDashOffset: 0.0,
    borderWidth: 1
  },
  title: {
    display: false,
    text: '',
    padding: {
      top: 4,
      bottom: 4
    }
  },
  ticks: {
    minRotation: 0,
    maxRotation: 50,
    mirror: false,
    textStrokeWidth: 0,
    textStrokeColor: '',
    padding: 3,
    display: true,
    autoSkip: true,
    autoSkipPadding: 3,
    labelOffset: 0,
    callback: Ticks.formatters.values,
    minor: {},
    major: {},
    align: 'center',
    crossAlign: 'near',
    showLabelBackdrop: false,
    backdropColor: 'rgba(255, 255, 255, 0.75)',
    backdropPadding: 2,
  }
});
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.ticks', 'color', '', 'color');
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.grid', 'color', '', 'borderColor');
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.grid', 'borderColor', '', 'borderColor');
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.title', 'color', '', 'color');
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('scale', {
  _fallback: false,
  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',
});
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('scales', {
  _fallback: 'scale',
});
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('scale.ticks', {
  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',
  _indexable: (name) => name !== 'backdropPadding',
});

function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
    }
    skip(ticks, newTicks, spacing, last, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.A)(evenMajorSpacing);
  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
    const factor = factors[i];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i, ilen;
  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next = majorIndices[0];
  let i;
  spacing = Math.ceil(spacing);
  for (i = 0; i < ticks.length; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(majorStart, 0);
  const end = Math.min((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i, next;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next = start;
  while (next < 0) {
    count++;
    next = Math.round(start + count * spacing);
  }
  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }
  return diff;
}

const reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;
const offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i = 0;
  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }
  return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex = Math.min(index, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex);
  let offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
    }
    lineValue += validIndex < index ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(caches, (cache) => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i;
    if (gcLen > length) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc[i]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.font, fallback);
  const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);
  const lines = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(options.text) ? options.text.length : 1;
  return (lines * font.lineHeight) + padding.height;
}
function createScaleContext(parent, scale) {
  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {
    scale,
    type: 'scale'
  });
}
function createTickContext(parent, index, tick) {
  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {
    tick,
    index,
    type: 'tick'
  });
}
function titleAlign(align, position, reverse) {
  let ret = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.R)(align);
  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset, position, align) {
  const {top, left, bottom, right, chart} = scale;
  const {chartArea, scales} = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, left, right);
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === 'center') {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position, offset);
    }
    maxWidth = right - left;
  } else {
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position === 'center') {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position, offset);
    }
    titleY = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, bottom, top);
    rotation = position === 'left' ? -_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H : _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H;
  }
  return {titleX, titleY, maxWidth, rotation};
}
class Scale extends Element {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = undefined;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.width = undefined;
    this.height = undefined;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = undefined;
    this.maxHeight = undefined;
    this.paddingTop = undefined;
    this.paddingBottom = undefined;
    this.paddingLeft = undefined;
    this.paddingRight = undefined;
    this.axis = undefined;
    this.labelRotation = undefined;
    this.min = undefined;
    this.max = undefined;
    this._range = undefined;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = undefined;
    this._endPixel = undefined;
    this._reversePixels = false;
    this._userMax = undefined;
    this._userMin = undefined;
    this._suggestedMax = undefined;
    this._suggestedMin = undefined;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = undefined;
  }
  init(options) {
    this.options = options.setContext(this.getContext());
    this.axis = options.axis;
    this._userMin = this.parse(options.min);
    this._userMax = this.parse(options.max);
    this._suggestedMin = this.parse(options.suggestedMin);
    this._suggestedMax = this.parse(options.suggestedMax);
  }
  parse(raw, index) {
    return raw;
  }
  getUserBounds() {
    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;
    _userMin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMin, Number.POSITIVE_INFINITY);
    _userMax = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMin, _suggestedMin),
      max: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMax, _suggestedMax),
      minDefined: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_userMin),
      maxDefined: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_userMax)
    };
  }
  getMinMax(canStack) {
    let {min, max, minDefined, maxDefined} = this.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {min, max};
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i = 0, ilen = metas.length; i < ilen; ++i) {
      range = metas[i].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min = Math.min(min, range.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }
    min = maxDefined && min > max ? max : min;
    max = minDefined && min > max ? min : max;
    return {
      min: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(min, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(max, min)),
      max: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(max, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(min, max))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeUpdate, [this]);
  }
  update(maxWidth, maxHeight, margins) {
    const {beginAtZero, grace, ticks: tickOpts} = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal()
      ? this.width + margins.left + margins.right
      : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.D)(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterUpdate, [this]);
  }
  beforeSetDimensions() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeSetDimensions, [this]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterSetDimensions, [this]);
  }
  _callHooks(name) {
    this.chart.notifyPlugins(name, this.getContext());
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options[name], [this]);
  }
  beforeDataLimits() {
    this._callHooks('beforeDataLimits');
  }
  determineDataLimits() {}
  afterDataLimits() {
    this._callHooks('afterDataLimits');
  }
  beforeBuildTicks() {
    this._callHooks('beforeBuildTicks');
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks('afterBuildTicks');
  }
  beforeTickToLabelConversion() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeTickToLabelConversion, [this]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      tick = ticks[i];
      tick.label = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(tickOpts.callback, [tick.value, i, ticks], this);
    }
  }
  afterTickToLabelConversion() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterTickToLabelConversion, [this]);
  }
  beforeCalculateLabelRotation() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeCalculateLabelRotation, [this]);
  }
  calculateLabelRotation() {
    const options = this.options;
    const tickOpts = options.ticks;
    const numTicks = this.ticks.length;
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options.grid)
				- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.F)(Math.min(
        Math.asin((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)((labelSizes.highest.height + 6) / tickWidth, -1, 1)),
        Math.asin((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(maxLabelHeight / maxLabelDiagonal, -1, 1))
      ));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterCalculateLabelRotation, [this]);
  }
  afterAutoSkip() {}
  beforeFit() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeFit, [this]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const {first, last, widest, highest} = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const {ticks: {align, padding}, position} = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position !== 'top' && this.axis === 'x';
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === 'start') {
        paddingRight = last.width;
      } else if (align === 'end') {
        paddingLeft = first.width;
      } else if (align !== 'inner') {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === 'start') {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === 'end') {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterFit, [this]);
  }
  isHorizontal() {
    const {axis, position} = this.options;
    return position === 'top' || position === 'bottom' || axis === 'x';
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i, ilen;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(ticks[i].label)) {
        ticks.splice(i, 1);
        ilen--;
        i--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length) {
    const {ctx, _longestTextCache: caches} = this;
    const widths = [];
    const heights = [];
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i = 0; i < length; ++i) {
      label = ticks[i].label;
      tickFont = this._resolveTickFontOptions(i);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(label) && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {
        width = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(nestedLabel) && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(nestedLabel)) {
            width = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});
    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights,
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index) {
    return NaN;
  }
  getValueForPixel(pixel) {}
  getPixelForTick(index) {
    const ticks = this.ticks;
    if (index < 0 || index > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.I)(this._alignToPixels ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const {min, max} = this;
    return min < 0 && max < 0 ? max :
      min > 0 && max > 0 ? min :
      0;
  }
  getContext(index) {
    const ticks = this.ticks || [];
    if (index >= 0 && index < ticks.length) {
      const tick = ticks[index];
      return tick.$context ||
				(tick.$context = createTickContext(this.getContext(), index, tick));
    }
    return this.$context ||
			(this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w = labelSizes ? labelSizes.widest.width + padding : 0;
    const h = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal()
      ? h * cos > w * sin ? w / cos : h / sin
      : h * sin < w * cos ? h / cos : w / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== 'auto') {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options = this.options;
    const {grid, position} = options;
    const offset = grid.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl = getTickMarkLength(grid);
    const items = [];
    const borderOpts = grid.setContext(this.getContext());
    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, pixel, axisWidth);
    };
    let borderValue, i, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
    if (position === 'top') {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y2 = chartArea.bottom;
    } else if (position === 'bottom') {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl;
    } else if (position === 'left') {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === 'right') {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl;
    } else if (axis === 'x') {
      if (position === 'center') {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y2 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl;
    } else if (axis === 'y') {
      if (position === 'center') {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i = 0; i < ticksLength; i += step) {
      const optsAtIndex = grid.setContext(this.getContext(i));
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndex.borderDash || [];
      const borderDashOffset = optsAtIndex.borderDashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i, offset);
      if (lineValue === undefined) {
        continue;
      }
      alignedLineValue = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y2 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset,
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options = this.options;
    const {position, ticks: optionTicks} = options;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const {align, crossAlign, padding, mirror} = optionTicks;
    const tl = getTickMarkLength(options.grid);
    const tickAndPadding = tl + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
    const items = [];
    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = 'middle';
    if (position === 'top') {
      y = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === 'bottom') {
      y = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === 'left') {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x = ret.x;
    } else if (position === 'right') {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x = ret.x;
    } else if (axis === 'x') {
      if (position === 'center') {
        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;
      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === 'y') {
      if (position === 'center') {
        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;
      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        x = this.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = this._getYAxisLabelAlignment(tl).textAlign;
    }
    if (axis === 'y') {
      if (align === 'start') {
        textBaseline = 'top';
      } else if (align === 'end') {
        textBaseline = 'bottom';
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i));
      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i);
      lineHeight = font.lineHeight;
      lineCount = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x = pixel;
        if (textAlign === 'inner') {
          if (i === ilen - 1) {
            tickTextAlign = !this.options.reverse ? 'right' : 'left';
          } else if (i === 0) {
            tickTextAlign = !this.options.reverse ? 'left' : 'right';
          } else {
            tickTextAlign = 'center';
          }
        }
        if (position === 'top') {
          if (crossAlign === 'near' || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === 'center') {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === 'near' || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === 'center') {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
      } else {
        y = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i];
        const width = labelSizes.widths[i];
        let top = y + textOffset - labelPadding.top;
        let left = x - labelPadding.left;
        switch (textBaseline) {
        case 'middle':
          top -= height / 2;
          break;
        case 'bottom':
          top -= height;
          break;
        }
        switch (textAlign) {
        case 'center':
          left -= width / 2;
          break;
        case 'right':
          left -= width;
          break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor,
        };
      }
      items.push({
        rotation,
        label,
        font,
        color,
        strokeColor,
        strokeWidth,
        textOffset,
        textAlign: tickTextAlign,
        textBaseline,
        translation: [x, y],
        backdrop,
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const {position, ticks} = this.options;
    const rotation = -(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);
    if (rotation) {
      return position === 'top' ? 'left' : 'right';
    }
    let align = 'center';
    if (ticks.align === 'start') {
      align = 'left';
    } else if (ticks.align === 'end') {
      align = 'right';
    } else if (ticks.align === 'inner') {
      align = 'inner';
    }
    return align;
  }
  _getYAxisLabelAlignment(tl) {
    const {position, ticks: {crossAlign, mirror, padding}} = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x;
    if (position === 'left') {
      if (mirror) {
        x = this.right + padding;
        if (crossAlign === 'near') {
          textAlign = 'left';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x += (widest / 2);
        } else {
          textAlign = 'right';
          x += widest;
        }
      } else {
        x = this.right - tickAndPadding;
        if (crossAlign === 'near') {
          textAlign = 'right';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x -= (widest / 2);
        } else {
          textAlign = 'left';
          x = this.left;
        }
      }
    } else if (position === 'right') {
      if (mirror) {
        x = this.left + padding;
        if (crossAlign === 'near') {
          textAlign = 'right';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x -= (widest / 2);
        } else {
          textAlign = 'left';
          x -= widest;
        }
      } else {
        x = this.left + tickAndPadding;
        if (crossAlign === 'near') {
          textAlign = 'left';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x += widest / 2;
        } else {
          textAlign = 'right';
          x = this.right;
        }
      }
    } else {
      textAlign = 'right';
    }
    return {textAlign, x};
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position = this.options.position;
    if (position === 'left' || position === 'right') {
      return {top: 0, left: this.left, bottom: chart.height, right: this.right};
    } if (position === 'top' || position === 'bottom') {
      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};
    }
  }
  drawBackground() {
    const {ctx, options: {backgroundColor}, left, top, width, height} = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid = this.options.grid;
    if (!this._isVisible() || !grid.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index = ticks.findIndex(t => t.value === value);
    if (index >= 0) {
      const opts = grid.setContext(this.getContext(index));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid.display) {
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        const item = items[i];
        if (grid.drawOnChartArea) {
          drawLine(
            {x: item.x1, y: item.y1},
            {x: item.x2, y: item.y2},
            item
          );
        }
        if (grid.drawTicks) {
          drawLine(
            {x: item.tx1, y: item.ty1},
            {x: item.tx2, y: item.ty2},
            {
              color: item.tickColor,
              width: item.tickWidth,
              borderDash: item.tickBorderDash,
              borderDashOffset: item.tickBorderDashOffset
            }
          );
        }
      }
    }
  }
  drawBorder() {
    const {chart, ctx, options: {grid}} = this;
    const borderOpts = grid.setContext(this.getContext());
    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y2;
    if (this.isHorizontal()) {
      x1 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y2 = borderValue;
    } else {
      y1 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.top, axisWidth) - axisWidth / 2;
      y2 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.borderWidth;
    ctx.strokeStyle = borderOpts.borderColor;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, area);
    }
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    let i, ilen;
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      const item = items[i];
      const tickFont = item.font;
      const label = item.label;
      if (item.backdrop) {
        ctx.fillStyle = item.backdrop.color;
        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
      }
      let y = item.textOffset;
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, label, 0, y, tickFont, item);
    }
    if (area) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);
    }
  }
  drawTitle() {
    const {ctx, options: {position, title, reverse}} = this;
    if (!title.display) {
      return;
    }
    const font = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(title.font);
    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position === 'bottom' || position === 'center' || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
      offset += padding.bottom;
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: 'middle',
      translation: [titleX, titleY],
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(opts.grid && opts.grid.z, -1);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [{
        z: tz,
        draw: (chartArea) => {
          this.draw(chartArea);
        }
      }];
    }
    return [{
      z: gz,
      draw: (chartArea) => {
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawTitle();
      }
    }, {
      z: gz + 1,
      draw: () => {
        this.drawBorder();
      }
    }, {
      z: tz,
      draw: (chartArea) => {
        this.drawLabels(chartArea);
      }
    }];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + 'AxisID';
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      const meta = metas[i];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index) {
    const opts = this.options.ticks.setContext(this.getContext(index));
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
}

class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id = item.id;
    const scope = this.scope + '.' + id;
    if (!id) {
      throw new Error('class does not have id: ' + item);
    }
    if (id in items) {
      return scope;
    }
    items[id] = item;
    registerDefaults(item, scope, parentScope);
    if (this.override) {
      _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id) {
    return this.items[id];
  }
  unregister(item) {
    const items = this.items;
    const id = item.id;
    const scope = this.scope;
    if (id in items) {
      delete items[id];
    }
    if (scope && id in _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d[scope]) {
      delete _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d[scope][id];
      if (this.override) {
        delete _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[id];
      }
    }
  }
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.V)(Object.create(null), [
    parentScope ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.get(parentScope) : {},
    _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.get(scope),
    item.defaults
  ]);
  _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach(property => {
    const propertyParts = property.split('.');
    const sourceName = propertyParts.pop();
    const sourceScope = [scope].concat(propertyParts).join('.');
    const parts = routes[property].split('.');
    const targetName = parts.pop();
    const targetScope = parts.join('.');
    _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return 'id' in proto && 'defaults' in proto;
}

class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
    this.elements = new TypedRegistry(Element, 'elements');
    this.plugins = new TypedRegistry(Object, 'plugins');
    this.scales = new TypedRegistry(Scale, 'scales');
    this._typedRegistries = [this.controllers, this.scales, this.elements];
  }
  add(...args) {
    this._each('register', args);
  }
  remove(...args) {
    this._each('unregister', args);
  }
  addControllers(...args) {
    this._each('register', args, this.controllers);
  }
  addElements(...args) {
    this._each('register', args, this.elements);
  }
  addPlugins(...args) {
    this._each('register', args, this.plugins);
  }
  addScales(...args) {
    this._each('register', args, this.scales);
  }
  getController(id) {
    return this._get(id, this.controllers, 'controller');
  }
  getElement(id) {
    return this._get(id, this.elements, 'element');
  }
  getPlugin(id) {
    return this._get(id, this.plugins, 'plugin');
  }
  getScale(id) {
    return this._get(id, this.scales, 'scale');
  }
  removeControllers(...args) {
    this._each('unregister', args, this.controllers);
  }
  removeElements(...args) {
    this._each('unregister', args, this.elements);
  }
  removePlugins(...args) {
    this._each('unregister', args, this.plugins);
  }
  removeScales(...args) {
    this._each('unregister', args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [...args].forEach(arg => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {
        this._exec(method, reg, arg);
      } else {
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(arg, item => {
          const itemReg = typedRegistry || this._getRegistryForType(item);
          this._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry, component) {
    const camelMethod = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.W)(method);
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(component['before' + camelMethod], [], component);
    registry[method](component);
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(component['after' + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i = 0; i < this._typedRegistries.length; i++) {
      const reg = this._typedRegistries[i];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id, typedRegistry, type) {
    const item = typedRegistry.get(id);
    if (item === undefined) {
      throw new Error('"' + id + '" is not a registered ' + type + '.');
    }
    return item;
  }
}
var registry = new Registry();

class ScatterController extends DatasetController {
  update(mode) {
    const meta = this._cachedMeta;
    const {data: points = []} = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let {start, count} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(meta)) {
      start = 0;
      count = points.length;
    }
    if (this.options.showLine) {
      const {dataset: line, _dataset} = meta;
      line._chart = this.chart;
      line._datasetIndex = this.index;
      line._decimated = !!_dataset._decimated;
      line.points = points;
      const options = this.resolveDatasetElementOptions(mode);
      options.segment = this.options.segment;
      this.updateElement(line, undefined, {
        animated: !animationsDisabled,
        options
      }, mode);
    }
    this.updateElements(points, start, count, mode);
  }
  addElements() {
    const {showLine} = this.options;
    if (!this.datasetElementType && showLine) {
      this.datasetElementType = registry.getElement('line');
    }
    super.addElements();
  }
  updateElements(points, start, count, mode) {
    const reset = mode === 'reset';
    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const {spanGaps, segment} = this.options;
    const maxGapLength = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i = start; i < start + count; ++i) {
      const point = points[i];
      const parsed = this.getParsed(i);
      const properties = directUpdate ? point : {};
      const nullData = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
      }
      if (!directUpdate) {
        this.updateElement(point, i, properties, mode);
      }
      prevParsed = parsed;
    }
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const data = meta.data || [];
    if (!this.options.showLine) {
      let max = 0;
      for (let i = data.length - 1; i >= 0; --i) {
        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
      }
      return max > 0 && max;
    }
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
}
ScatterController.id = 'scatter';
ScatterController.defaults = {
  datasetElementType: false,
  dataElementType: 'point',
  showLine: false,
  fill: false
};
ScatterController.overrides = {
  interaction: {
    mode: 'point'
  },
  plugins: {
    tooltip: {
      callbacks: {
        title() {
          return '';
        },
        label(item) {
          return '(' + item.label + ', ' + item.formattedValue + ')';
        }
      }
    }
  },
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  }
};

var controllers = /*#__PURE__*/Object.freeze({
__proto__: null,
BarController: BarController,
BubbleController: BubbleController,
DoughnutController: DoughnutController,
LineController: LineController,
PolarAreaController: PolarAreaController,
PieController: PieController,
RadarController: RadarController,
ScatterController: ScatterController
});

function abstract() {
  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
}
class DateAdapter {
  constructor(options) {
    this.options = options || {};
  }
  init(chartOptions) {}
  formats() {
    return abstract();
  }
  parse(value, format) {
    return abstract();
  }
  format(timestamp, format) {
    return abstract();
  }
  add(timestamp, amount, unit) {
    return abstract();
  }
  diff(a, b, unit) {
    return abstract();
  }
  startOf(timestamp, unit, weekday) {
    return abstract();
  }
  endOf(timestamp, unit) {
    return abstract();
  }
}
DateAdapter.override = function(members) {
  Object.assign(DateAdapter.prototype, members);
};
var adapters = {
  _date: DateAdapter
};

function binarySearch(metaset, axis, value, intersect) {
  const {controller, data, _sorted} = metaset;
  const iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Y : _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === 'function' && el.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {lo: start.lo, hi: end.hi};
      }
    }
  }
  return {lo: 0, hi: data.length - 1};
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    const {index, data} = metasets[i];
    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);
    for (let j = lo; j <= hi; ++j) {
      const element = data[j];
      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf('x') !== -1;
  const useY = axis.indexOf('y') !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index) {
    if (!includeInvisible && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.$)(element, chart.chartArea, 0)) {
      return;
    }
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      items.push({element, datasetIndex, index});
    }
  };
  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element, datasetIndex, index) {
    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);
    const {angle} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a0)(element, {x: position.x, y: position.y});
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle)) {
      items.push({element, datasetIndex, index});
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element, datasetIndex, index) {
    const inRange = element.inRange(position.x, position.y, useFinalPosition);
    if (intersect && !inRange) {
      return;
    }
    const center = element.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange) {
      return;
    }
    const distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [{element, datasetIndex, index}];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({element, datasetIndex, index});
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return [];
  }
  return axis === 'r' && !intersect
    ? getNearestRadialItems(chart, position, axis, useFinalPosition)
    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {
    if (element[rangeMethod](position[axis], useFinalPosition)) {
      items.push({element, datasetIndex, index});
      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  evaluateInteractionItems,
  modes: {
    index(chart, e, options, useFinalPosition) {
      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);
      const axis = options.axis || 'x';
      const includeInvisible = options.includeInvisible || false;
      const items = options.intersect
        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)
        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      const elements = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index = items[0].index;
        const element = meta.data[index];
        if (element && !element.skip) {
          elements.push({element, datasetIndex: meta.index, index});
        }
      });
      return elements;
    },
    dataset(chart, e, options, useFinalPosition) {
      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);
      const axis = options.axis || 'xy';
      const includeInvisible = options.includeInvisible || false;
      let items = options.intersect
        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :
        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i = 0; i < data.length; ++i) {
          items.push({element: data[i], datasetIndex, index: i});
        }
      }
      return items;
    },
    point(chart, e, options, useFinalPosition) {
      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);
      const axis = options.axis || 'xy';
      const includeInvisible = options.includeInvisible || false;
      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e, options, useFinalPosition) {
      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);
      const axis = options.axis || 'xy';
      const includeInvisible = options.includeInvisible || false;
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e, options, useFinalPosition) {
      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);
      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);
    },
    y(chart, e, options, useFinalPosition) {
      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);
      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);
    }
  }
};

const STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];
function filterByPosition(array, position) {
  return array.filter(v => v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a, b) => {
    const v0 = reverse ? b : a;
    const v1 = reverse ? a : b;
    return v0.weight === v1.weight ?
      v0.index - v1.index :
      v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i, ilen, box, pos, stack, stackWeight;
  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    ({position: pos, options: {stack, stackWeight = 1}} = box);
    layoutBoxes.push({
      index: i,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && (pos + stack),
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts) {
  const stacks = {};
  for (const wrap of layouts) {
    const {stack, pos, stackWeight} = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts, params) {
  const stacks = buildStacks(layouts);
  const {vBoxMaxWidth, hBoxMaxHeight} = params;
  let i, ilen, layout;
  for (i = 0, ilen = layouts.length; i < ilen; ++i) {
    layout = layouts[i];
    const {fullSize} = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, 'chartArea'),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const {pos, box} = layout;
  const maxPadding = chartArea.maxPadding;
  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {size: 0, count: 1};
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal
    ? {same: widthChanged, other: heightChanged}
    : {same: heightChanged, other: widthChanged};
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos('top');
  chartArea.x += updatePos('left');
  updatePos('right');
  updatePos('bottom');
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions) {
    const margin = {left: 0, top: 0, right: 0, bottom: 0};
    positions.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal
    ? marginForPositions(['left', 'right'])
    : marginForPositions(['top', 'bottom']);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i, ilen, layout, box, refit, changed;
  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
    layout = boxes[i];
    box = layout.box;
    box.update(
      layout.width || chartArea.w,
      layout.height || chartArea.h,
      getMargins(layout.horizontal, chartArea)
    );
    const {same, other} = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let {x, y} = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};
    const weight = (layout.stackWeight / stack.weight) || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(stack.start)) {
        y = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y, width, height);
      }
      stack.start = y;
      stack.placed += width;
      y = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(stack.start)) {
        x = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x, chartArea.top + stack.placed, width, height);
      }
      stack.start = x;
      stack.placed += height;
      x = box.right;
    }
  }
  chartArea.x = x;
  chartArea.y = y;
}
_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('layout', {
  autoPadding: true,
  padding: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
});
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || 'top';
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [{
        z: 0,
        draw(chartArea) {
          item.draw(chartArea);
        }
      }];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index !== -1) {
      chart.boxes.splice(index, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(chart.boxes, box => {
      if (typeof box.beforeLayout === 'function') {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>
      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w,
    };
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(boxes.chartArea, (layout) => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});
    });
  }
};

class BasePlatform {
  acquireContext(canvas, aspectRatio) {}
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {}
  removeEventListener(chart, type, listener) {}
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element, width, height, aspectRatio) {
    width = Math.max(0, width || element.width);
    height = height || element.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config) {
  }
}

class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext('2d') || null;
  }
  updateConfig(config) {
    config.options.animation = false;
  }
}

const EXPANDO_KEY = '$chartjs';
const EVENT_TYPES = {
  touchstart: 'mousedown',
  touchmove: 'mousemove',
  touchend: 'mouseup',
  pointerenter: 'mouseenter',
  pointerdown: 'mousedown',
  pointermove: 'mousemove',
  pointerup: 'mouseup',
  pointerleave: 'mouseout',
  pointerout: 'mouseout'
};
const isNullOrEmpty = value => value === null || value === '';
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute('height');
  const renderWidth = canvas.getAttribute('width');
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || 'block';
  style.boxSizing = style.boxSizing || 'border-box';
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a3)(canvas, 'width');
    if (displayWidth !== undefined) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === '') {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a3)(canvas, 'height');
      if (displayHeight !== undefined) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a5 ? {passive: true} : false;
function addListener(node, type, listener) {
  node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
  chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const {x, y} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x !== undefined ? x : null,
    y: y !== undefined ? y : null,
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node of nodeList) {
    if (node === canvas || node.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver(entries => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {childList: true, subtree: true});
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver(entries => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {childList: true, subtree: true});
  return observer;
}
const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener('resize', onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener('resize', onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a2)(canvas);
  if (!container) {
    return;
  }
  const resize = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a4)((width, height) => {
    const w = container.clientWidth;
    listener(width, height);
    if (w < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver(entries => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === 'resize') {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a4)((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart, (args) => {
    const event = args[0];
    return [event, event.offsetX, event.offsetY];
  });
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext('2d');
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    ['height', 'width'].forEach((prop) => {
      const value = initial[prop];
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = undefined;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio) {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a1)(canvas, width, height, aspectRatio);
  }
  isAttached(canvas) {
    const container = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a2)(canvas);
    return !!(container && container.isConnected);
  }
}

function _detectPlatform(canvas) {
  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a6)() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {
    return BasicPlatform;
  }
  return DomPlatform;
}

class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter) {
    if (hook === 'beforeInit') {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, 'install');
    }
    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
    const result = this._notify(descriptors, chart, hook, args);
    if (hook === 'afterDestroy') {
      this._notify(descriptors, chart, 'stop');
      this._notify(this._init, chart, 'uninstall');
    }
    return result;
  }
  _notify(descriptors, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [chart, args, descriptor.options];
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(this._cache)) {
      this._oldCache = this._cache;
      this._cache = undefined;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors;
  }
  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(config.options && config.options.plugins, {});
    const plugins = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors = this._cache;
    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));
    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
    this._notify(diff(descriptors, previousDescriptors), chart, 'start');
  }
}
function allPlugins(config) {
  const localIds = {};
  const plugins = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i = 0; i < keys.length; i++) {
    plugins.push(registry.getPlugin(keys[i]));
  }
  const local = config.plugins || [];
  for (let i = 0; i < local.length; i++) {
    const plugin = local[i];
    if (plugins.indexOf(plugin) === -1) {
      plugins.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {plugins, localIds};
}
function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, {plugins, localIds}, options, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins) {
    const id = plugin.id;
    const opts = getOpts(options[id], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, {plugin, local}, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes = config.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes.push(plugin.defaults);
  }
  return config.createResolver(scopes, context, [''], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}

function getIndexAxis(type, options) {
  const datasetDefaults = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
}
function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;
  if (id === '_index_') {
    axis = indexAxis;
  } else if (id === '_value_') {
    axis = indexAxis === 'x' ? 'y' : 'x';
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? '_index_' : '_value_';
}
function axisFromPosition(position) {
  if (position === 'top' || position === 'bottom') {
    return 'x';
  }
  if (position === 'left' || position === 'right') {
    return 'y';
  }
}
function determineAxis(id, scaleOptions) {
  if (id === 'x' || id === 'y') {
    return id;
  }
  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
}
function mergeScaleConfig(config, options) {
  const chartDefaults = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[config.type] || {scales: {}};
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const firstIDs = Object.create(null);
  const scales = Object.create(null);
  Object.keys(configScales).forEach(id => {
    const scaleConf = configScales[id];
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
    }
    const axis = determineAxis(id, scaleConf);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    firstIDs[axis] = firstIDs[axis] || id;
    scales[id] = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);
  });
  config.data.datasets.forEach(dataset => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach(defaultID => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;
      scales[id] = scales[id] || Object.create(null);
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);
    });
  });
  Object.keys(scales).forEach(key => {
    const scale = scales[key];
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(scale, [_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.scales[scale.type], _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.scale]);
  });
  return scales;
}
function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
const keyCache = new Map();
const keysCached = new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
const addIfFound = (set, obj, key) => {
  const opts = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(obj, key);
  if (opts !== undefined) {
    set.add(opts);
  }
};
class Config {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = new Map();
    this._resolverCache = new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType,
      () => [[
        `datasets.${datasetType}`,
        ''
      ]]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`,
      () => [
        [
          `datasets.${datasetType}.transitions.${transition}`,
          `transitions.${transition}`,
        ],
        [
          `datasets.${datasetType}`,
          ''
        ]
      ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`,
      () => [[
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ''
      ]]);
  }
  pluginScopeKeys(plugin) {
    const id = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id}`,
      () => [[
        `plugins.${id}`,
        ...plugin.additionalOptionScopes || [],
      ]]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const {options, type} = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes = new Set();
    keyLists.forEach(keys => {
      if (mainScope) {
        scopes.add(mainScope);
        keys.forEach(key => addIfFound(scopes, mainScope, key));
      }
      keys.forEach(key => addIfFound(scopes, options, key));
      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[type] || {}, key));
      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d, key));
      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a7, key));
    });
    const array = Array.from(scopes);
    if (array.length === 0) {
      array.push(Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const {options, type} = this;
    return [
      options,
      _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[type] || {},
      _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {},
      {type},
      _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d,
      _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a7
    ];
  }
  resolveNamedOptions(scopes, names, context, prefixes = ['']) {
    const result = {$shared: true};
    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);
    let options = resolver;
    if (needContext(resolver, names)) {
      result.$shared = false;
      context = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(context) ? context() : context;
      const subResolver = this.createResolver(scopes, context, subPrefixes);
      options = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a9)(resolver, context, subResolver);
    }
    for (const prop of names) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {
    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(context)
      ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a9)(resolver, context, undefined, descriptorDefaults)
      : resolver;
  }
}
function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);
  if (!cache) {
    cache = new Map();
    resolverCache.set(scopes, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aa)(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
const hasFunction = value => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value)
  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(value[key]), false);
function needContext(proxy, names) {
  const {isScriptable, isIndexable} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ab)(proxy);
  for (const prop of names) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if ((scriptable && ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(value) || hasFunction(value)))
      || (indexable && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(value))) {
      return true;
    }
  }
  return false;
}

var version = "3.9.1";

const KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];
function positionIsHorizontal(position, axis) {
  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');
}
function compare2Level(l1, l2) {
  return function(a, b) {
    return a[l1] === b[l1]
      ? a[l2] - b[l2]
      : a[l1] - b[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins('afterRender');
  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(animationOptions && animationOptions.onComplete, [context], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(animationOptions && animationOptions.onProgress, [context], chart);
}
function getCanvas(item) {
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a6)() && typeof item === 'string') {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c) => c.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key of keys) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e.type === 'mouseout') {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e;
}
class Chart {
  constructor(item, userConfig) {
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error(
        'Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' +
				' must be destroyed before the canvas with ID \'' + existingChart.canvas.id + '\' can be reused.'
      );
    }
    const options = config.createResolver(config.chartOptionScopes(), this.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config);
    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ad)();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = undefined;
    this.boxes = [];
    this.currentDevicePixelRatio = undefined;
    this.chartArea = undefined;
    this._active = [];
    this._lastEvent = undefined;
    this._listeners = {};
    this._responsiveListeners = undefined;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = undefined;
    this.$context = undefined;
    this._doResize = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ae)(mode => this.update(mode), options.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, 'complete', onAnimationsComplete);
    animator.listen(this, 'progress', onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(aspectRatio)) {
      return aspectRatio;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  _initialize() {
    this.notifyPlugins('beforeInit');
    if (this.options.responsive) {
      this.resize();
    } else {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.af)(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins('afterInit');
    return this;
  }
  clear() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ag)(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {width, height};
    }
  }
  _resize(width, height) {
    const options = this.options;
    const canvas = this.canvas;
    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode = this.width ? 'resize' : 'attach';
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.af)(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins('resize', {size: newSize});
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(options.onResize, [this, newSize], this);
    if (this.attached) {
      if (this._doResize(mode)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options = this.options;
    const scaleOpts = options.scales;
    const scales = this.scales;
    const updated = Object.keys(scales).reduce((obj, id) => {
      obj[id] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(
        Object.keys(scaleOpts).map((id) => {
          const scaleOptions = scaleOpts[id];
          const axis = determineAxis(id, scaleOptions);
          const isRadial = axis === 'r';
          const isHorizontal = axis === 'x';
          return {
            options: scaleOptions,
            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
          };
        })
      );
    }
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(items, (item) => {
      const scaleOptions = item.options;
      const id = scaleOptions.id;
      const axis = determineAxis(id, scaleOptions);
      const scaleType = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(scaleOptions.type, item.dtype);
      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id] = true;
      let scale = null;
      if (id in scales && scales[id].type === scaleType) {
        scale = scales[id];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales[scale.id] = scale;
      }
      scale.init(scaleOptions, options);
    });
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(updated, (hasUpdated, id) => {
      if (!hasUpdated) {
        delete scales[id];
      }
    });
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(scales, (scale) => {
      layouts.configure(this, scale, scale.options);
      layouts.addBox(this, scale);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a, b) => a.index - b.index);
    if (numMeta > numData) {
      for (let i = numData; i < numMeta; ++i) {
        this._destroyDatasetMeta(i);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
  }
  _removeUnreferencedMetasets() {
    const {_metasets: metasets, data: {datasets}} = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index) => {
      if (datasets.filter(x => x === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i, ilen;
    this._removeUnreferencedMetasets();
    for (i = 0, ilen = datasets.length; i < ilen; i++) {
      const dataset = datasets[i];
      let meta = this.getDatasetMeta(i);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i);
        meta = this.getDatasetMeta(i);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i;
      meta.label = '' + dataset.label;
      meta.visible = this.isDatasetVisible(i);
      if (meta.controller) {
        meta.controller.updateIndex(i);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const {datasetElementType, dataElementType} = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type];
        Object.assign(ControllerClass.prototype, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins('reset');
  }
  update(mode) {
    const config = this.config;
    config.update();
    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins('beforeElementsUpdate');
    let minPadding = 0;
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {
      const {controller} = this.getDatasetMeta(i);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode);
    this.notifyPlugins('afterUpdate', {mode});
    this._layers.sort(compare2Level('z', '_idx'));
    const {_active, _lastEvent} = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.scales, (scale) => {
      layouts.removeBox(this, scale);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options.events);
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ah)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const {_hiddenIndices} = this;
    const changes = this._getUniformDataChanges() || [];
    for (const {method, start, count} of changes) {
      const move = method === '_removeElements' ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(
      _dataChanges
        .filter(c => c[0] === idx)
        .map((c, i) => i + ',' + c.splice(1).join(','))
    );
    const changeSet = makeSet(0);
    for (let i = 1; i < datasetCount; i++) {
      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ah)(changeSet, makeSet(i))) {
        return;
      }
    }
    return Array.from(changeSet)
      .map(c => c.split(','))
      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.boxes, (box) => {
      if (noArea && box.position === 'chartArea') {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item, index) => {
      item._idx = index;
    });
    this.notifyPlugins('afterLayout');
  }
  _updateDatasets(mode) {
    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {
      return;
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this.getDatasetMeta(i).controller.configure();
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._updateDataset(i, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(mode) ? mode({datasetIndex: i}) : mode);
    }
    this.notifyPlugins('afterDatasetsUpdate', {mode});
  }
  _updateDataset(index, mode) {
    const meta = this.getDatasetMeta(index);
    const args = {meta, index, mode, cancelable: true};
    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    this.notifyPlugins('afterDatasetUpdate', args);
  }
  render() {
    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({chart: this});
    }
  }
  draw() {
    let i;
    if (this._resizeBeforeDraw) {
      const {width, height} = this._resizeBeforeDraw;
      this._resize(width, height);
      this._resizeBeforeDraw = null;
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {
      return;
    }
    const layers = this._layers;
    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
      layers[i].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i < layers.length; ++i) {
      layers[i].draw(this.chartArea);
    }
    this.notifyPlugins('afterDraw');
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metasets.length; i < ilen; ++i) {
      const meta = metasets[i];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      this._drawDataset(metasets[i]);
    }
    this.notifyPlugins('afterDatasetsDraw');
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = this.chartArea;
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {
      return;
    }
    if (useClip) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? this.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
      });
    }
    meta.controller.draw();
    if (useClip) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins('afterDatasetDraw', args);
  }
  isPointInArea(point) {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.$)(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === 'function') {
      return method(this, e, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter(x => x && x._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(null, {chart: this, type: 'chart'}));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index) {
    this._hiddenIndices[index] = !this._hiddenIndices[index];
  }
  getDataVisibility(index) {
    return !this._hiddenIndices[index];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode = visible ? 'show' : 'hide';
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(undefined, mode);
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {visible});
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i, ilen;
    this.stop();
    animator.remove(this);
    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._destroyDatasetMeta(i);
    }
  }
  destroy() {
    this.notifyPlugins('beforeDestroy');
    const {canvas, ctx} = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ag)(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    this.notifyPlugins('destroy');
    delete instances[this.id];
    this.notifyPlugins('afterDestroy');
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform = this.platform;
    const _add = (type, listener) => {
      platform.addEventListener(this, type, listener);
      listeners[type] = listener;
    };
    const listener = (e, x, y) => {
      e.offsetX = x;
      e.offsetY = y;
      this._eventHandler(e);
    };
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform = this.platform;
    const _add = (type, listener) => {
      platform.addEventListener(this, type, listener);
      listeners[type] = listener;
    };
    const _remove = (type, listener) => {
      if (listeners[type]) {
        platform.removeEventListener(this, type, listener);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove('attach', attached);
      this.attached = true;
      this.resize();
      _add('resize', listener);
      _add('detach', detached);
    };
    detached = () => {
      this.attached = false;
      _remove('resize', listener);
      this._stop();
      this._resize(0, 0);
      _add('attach', attached);
    };
    if (platform.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = undefined;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? 'set' : 'remove';
    let meta, item, i, ilen;
    if (mode === 'dataset') {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller['_' + prefix + 'DatasetHoverStyle']();
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      item = items[i];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({datasetIndex, index}) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error('No dataset found at index ' + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index],
        index,
      };
    });
    const changed = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter) {
    return this._plugins.notify(this, hook, args, filter);
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e, replay) {
    const args = {
      event: e,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);
    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins('afterEvent', args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e, replay, inChartArea) {
    const {_active: lastActive = [], options} = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
    const isClick = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aj)(e);
    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(options.onHover, [e, active, this], this);
      if (isClick) {
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(options.onClick, [e, active, this], this);
      }
    }
    const changed = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
    if (e.type === 'mouseout') {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
}
const invalidatePlugins = () => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(Chart.instances, (chart) => chart._plugins.invalidate());
const enumerable = true;
Object.defineProperties(Chart, {
  defaults: {
    enumerable,
    value: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d
  },
  instances: {
    enumerable,
    value: instances
  },
  overrides: {
    enumerable,
    value: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U
  },
  registry: {
    enumerable,
    value: registry
  },
  version: {
    enumerable,
    value: version
  },
  getChart: {
    enumerable,
    value: getChart
  },
  register: {
    enumerable,
    value: (...items) => {
      registry.add(...items);
      invalidatePlugins();
    }
  },
  unregister: {
    enumerable,
    value: (...items) => {
      registry.remove(...items);
      invalidatePlugins();
    }
  }
});

function clipArc(ctx, element, endAngle) {
  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x, y, pixelMargin, endAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, startAngle - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.al)(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(o.innerStart, 0, innerLimit),
    innerEnd: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(o.innerEnd, 0, innerLimit),
  };
}
function rThetaToXY(r, theta, x, y) {
  return {
    x: x + r * Math.cos(theta),
    y: y + r * Math.sin(theta),
  };
}
function pathArc(ctx, element, offset, spacing, end, circular) {
  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;
  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha = end - start;
  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;
    spacingOffset = (alpha - adjustedAngle) / 2;
  }
  const beta = Math.max(0.001, alpha * outerRadius - offset / _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P) / outerRadius;
  const angleOffset = (alpha - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  if (circular) {
    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H);
    }
    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, innerEndAdjustedAngle + Math.PI);
    }
    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);
    if (innerStart > 0) {
      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H);
    }
    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, outerStartAdjustedAngle);
    }
  } else {
    ctx.moveTo(x, y);
    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
    ctx.lineTo(outerStartX, outerStartY);
    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
    ctx.lineTo(outerEndX, outerEndY);
  }
  ctx.closePath();
}
function drawArc(ctx, element, offset, spacing, circular) {
  const {fullCircles, startAngle, circumference} = element;
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset, spacing, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T, circular);
    for (let i = 0; i < fullCircles; ++i) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + circumference % _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;
      if (circumference % _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T === 0) {
        endAngle += _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;
      }
    }
  }
  pathArc(ctx, element, offset, spacing, endAngle, circular);
  ctx.fill();
  return endAngle;
}
function drawFullCircleBorders(ctx, element, inner) {
  const {x, y, startAngle, pixelMargin, fullCircles} = element;
  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
  const innerRadius = element.innerRadius + pixelMargin;
  let i;
  if (inner) {
    clipArc(ctx, element, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);
  }
  ctx.beginPath();
  ctx.arc(x, y, innerRadius, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T, startAngle, true);
  for (i = 0; i < fullCircles; ++i) {
    ctx.stroke();
  }
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, startAngle, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);
  for (i = 0; i < fullCircles; ++i) {
    ctx.stroke();
  }
}
function drawBorder(ctx, element, offset, spacing, endAngle, circular) {
  const {options} = element;
  const {borderWidth, borderJoinStyle} = options;
  const inner = options.borderAlign === 'inner';
  if (!borderWidth) {
    return;
  }
  if (inner) {
    ctx.lineWidth = borderWidth * 2;
    ctx.lineJoin = borderJoinStyle || 'round';
  } else {
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = borderJoinStyle || 'bevel';
  }
  if (element.fullCircles) {
    drawFullCircleBorders(ctx, element, inner);
  }
  if (inner) {
    clipArc(ctx, element, endAngle);
  }
  pathArc(ctx, element, offset, spacing, endAngle, circular);
  ctx.stroke();
}
class ArcElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.circumference = undefined;
    this.startAngle = undefined;
    this.endAngle = undefined;
    this.innerRadius = undefined;
    this.outerRadius = undefined;
    this.pixelMargin = 0;
    this.fullCircles = 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps(['x', 'y'], useFinalPosition);
    const {angle, distance} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a0)(point, {x: chartX, y: chartY});
    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([
      'startAngle',
      'endAngle',
      'innerRadius',
      'outerRadius',
      'circumference'
    ], useFinalPosition);
    const rAdjust = this.options.spacing / 2;
    const _circumference = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(circumference, endAngle - startAngle);
    const betweenAngles = _circumference >= _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle);
    const withinRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(distance, innerRadius + rAdjust, outerRadius + rAdjust);
    return (betweenAngles && withinRadius);
  }
  getCenterPoint(useFinalPosition) {
    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([
      'x',
      'y',
      'startAngle',
      'endAngle',
      'innerRadius',
      'outerRadius',
      'circumference',
    ], useFinalPosition);
    const {offset, spacing} = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
    return {
      x: x + Math.cos(halfAngle) * halfRadius,
      y: y + Math.sin(halfAngle) * halfRadius
    };
  }
  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }
  draw(ctx) {
    const {options, circumference} = this;
    const offset = (options.offset || 0) / 2;
    const spacing = (options.spacing || 0) / 2;
    const circular = options.circular;
    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;
    this.fullCircles = circumference > _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T ? Math.floor(circumference / _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T) : 0;
    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
      return;
    }
    ctx.save();
    let radiusOffset = 0;
    if (offset) {
      radiusOffset = offset / 2;
      const halfAngle = (this.startAngle + this.endAngle) / 2;
      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);
      if (this.circumference >= _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P) {
        radiusOffset = offset;
      }
    }
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);
    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);
    ctx.restore();
  }
}
ArcElement.id = 'arc';
ArcElement.defaults = {
  borderAlign: 'center',
  borderColor: '#fff',
  borderJoinStyle: undefined,
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: undefined,
  circular: true,
};
ArcElement.defaultRoutes = {
  backgroundColor: 'backgroundColor'
};

function setStyle(ctx, options, style = options) {
  ctx.lineCap = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDash, options.borderDash));
  ctx.lineDashOffset = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.as;
  }
  if (options.tension || options.cubicInterpolationMode === 'monotone') {
    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.at;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;
  const {start: segmentStart, end: segmentEnd} = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line, segment, params) {
  const {points, options} = line;
  const {count, start, loop, ilen} = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let {move = true, reverse} = params || {};
  let i, point, prev;
  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    prev = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const {count, start, ilen} = pathVars(points, segment, params);
  const {move = true, reverse} = params || {};
  let avgX = 0;
  let countX = 0;
  let i, point, prevX, minY, maxY, lastY;
  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i = 0; i <= ilen; ++i) {
    point = points[pointIndex(i)];
    if (point.skip) {
      continue;
    }
    const x = point.x;
    const y = point.y;
    const truncX = x | 0;
    if (truncX === prevX) {
      if (y < minY) {
        minY = y;
      } else if (y > maxY) {
        maxY = y;
      }
      avgX = (countX * avgX + x) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x, y);
      prevX = truncX;
      countX = 0;
      minY = maxY = y;
    }
    lastY = y;
  }
  drawX();
}
function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ap;
  }
  if (options.tension || options.cubicInterpolationMode === 'monotone') {
    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aq;
  }
  return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ar;
}
function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;
  if (!path) {
    path = line._path = new Path2D();
    if (line.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
  const {segments, options} = line;
  const segmentMethod = _getSegmentMethod(line);
  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === 'function';
function draw(ctx, line, start, count) {
  if (usePath2D && !line.options.segment) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}
class LineElement extends Element {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = undefined;
    this._chart = undefined;
    this._loop = undefined;
    this._fullLoop = undefined;
    this._path = undefined;
    this._points = undefined;
    this._segments = undefined;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = undefined;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const options = this.options;
    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {
      const loop = options.spanGaps ? this._loop : this._fullLoop;
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.am)(this._points, options, chartArea, loop, indexAxis);
      this._pointsUpdated = true;
    }
  }
  set points(points) {
    this._points = points;
    delete this._segments;
    delete this._path;
    this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.an)(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const options = this.options;
    const value = point[property];
    const points = this.points;
    const segments = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ao)(this, {property, start: value, end: value});
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options);
    let i, ilen;
    for (i = 0, ilen = segments.length; i < ilen; ++i) {
      const {start, end} = segments[i];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t, options.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const segments = this.segments;
    const segmentMethod = _getSegmentMethod(this);
    let loop = this._loop;
    start = start || 0;
    count = count || (this.points.length - start);
    for (const segment of segments) {
      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});
    }
    return !!loop;
  }
  draw(ctx, chartArea, start, count) {
    const options = this.options || {};
    const points = this.points || [];
    if (points.length && options.borderWidth) {
      ctx.save();
      draw(ctx, this, start, count);
      ctx.restore();
    }
    if (this.animated) {
      this._pointsUpdated = false;
      this._path = undefined;
    }
  }
}
LineElement.id = 'line';
LineElement.defaults = {
  borderCapStyle: 'butt',
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: 'miter',
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: 'default',
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0,
};
LineElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};
LineElement.descriptors = {
  _scriptable: true,
  _indexable: (name) => name !== 'borderDash' && name !== 'fill',
};

function inRange$1(el, pos, axis, useFinalPosition) {
  const options = el.options;
  const {[axis]: value} = el.getProps([axis], useFinalPosition);
  return (Math.abs(pos - value) < options.radius + options.hitRadius);
}
class PointElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.parsed = undefined;
    this.skip = undefined;
    this.stop = undefined;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, 'x', useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, 'y', useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
    return {x, y};
  }
  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const options = this.options;
    if (this.skip || options.radius < 0.1 || !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.$)(this, area, this.size(options) / 2)) {
      return;
    }
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, options, this.x, this.y);
  }
  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }
}
PointElement.id = 'point';
PointElement.defaults = {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: 'circle',
  radius: 3,
  rotation: 0
};
PointElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};

function getBarBounds(bar, useFinalPosition) {
  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x, base);
    right = Math.max(x, base);
    top = y - half;
    bottom = y + half;
  } else {
    half = width / 2;
    left = x - half;
    right = x + half;
    top = Math.min(y, base);
    bottom = Math.max(y, base);
  }
  return {left, top, right, bottom};
}
function skipOrLimit(skip, value, min, max) {
  return skip ? 0 : (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip = bar.borderSkipped;
  const o = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aw)(value);
  return {
    t: skipOrLimit(skip.top, o.top, 0, maxH),
    r: skipOrLimit(skip.right, o.right, 0, maxW),
    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip.left, o.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);
  const value = bar.options.borderRadius;
  const o = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(value);
  const maxR = Math.min(maxW, maxH);
  const skip = bar.borderSkipped;
  const enableBorder = enableBorderRadius || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),
      }
    }
  };
}
function inRange(bar, x, y, useFinalPosition) {
  const skipX = x === null;
  const skipY = y === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds
		&& (skipX || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(x, bounds.left, bounds.right))
		&& (skipY || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(y, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x = rect.x !== refRect.x ? -amount : 0;
  const y = rect.y !== refRect.y ? -amount : 0;
  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
  return {
    x: rect.x + x,
    y: rect.y + y,
    w: rect.w + w,
    h: rect.h + h,
    radius: rect.radius
  };
}
class BarElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.horizontal = undefined;
    this.base = undefined;
    this.width = undefined;
    this.height = undefined;
    this.inflateAmount = undefined;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  draw(ctx) {
    const {inflateAmount, options: {borderColor, backgroundColor}} = this;
    const {inner, outer} = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av : addNormalRectPath;
    ctx.save();
    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = borderColor;
      ctx.fill('evenodd');
    }
    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount));
    ctx.fillStyle = backgroundColor;
    ctx.fill();
    ctx.restore();
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);
    return {
      x: horizontal ? (x + base) / 2 : x,
      y: horizontal ? y : (y + base) / 2
    };
  }
  getRange(axis) {
    return axis === 'x' ? this.width / 2 : this.height / 2;
  }
}
BarElement.id = 'bar';
BarElement.defaults = {
  borderSkipped: 'start',
  borderWidth: 0,
  borderRadius: 0,
  inflateAmount: 'auto',
  pointStyle: undefined
};
BarElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};

var elements = /*#__PURE__*/Object.freeze({
__proto__: null,
ArcElement: ArcElement,
LineElement: LineElement,
PointElement: PointElement,
BarElement: BarElement
});

function lttbDecimation(data, start, count, availableWidth, options) {
  const samples = options.samples || availableWidth;
  if (samples >= count) {
    return data.slice(start, start + count);
  }
  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a = start;
  let i, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a];
  for (i = 0; i < samples - 2; i++) {
    let avgX = 0;
    let avgY = 0;
    let j;
    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;
    for (j = avgRangeStart; j < avgRangeEnd; j++) {
      avgX += data[j].x;
      avgY += data[j].y;
    }
    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
    const {x: pointAx, y: pointAy} = data[a];
    maxArea = area = -1;
    for (j = rangeOffs; j < rangeTo; j++) {
      area = 0.5 * Math.abs(
        (pointAx - avgX) * (data[j].y - pointAy) -
        (pointAx - data[j].x) * (avgY - pointAy)
      );
      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j];
        nextA = j;
      }
    }
    decimated[sampledIndex++] = maxAreaPoint;
    a = nextA;
  }
  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;
  for (i = start; i < start + count; ++i) {
    point = data[i];
    x = (point.x - xMin) / dx * availableWidth;
    y = point.y;
    const truncX = x | 0;
    if (truncX === prevX) {
      if (y < minY) {
        minY = y;
        minIndex = i;
      } else if (y > maxY) {
        maxY = y;
        maxIndex = i;
      }
      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i - 1;
      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(minIndex) && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);
        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex1],
            x: avgX,
          });
        }
        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex2],
            x: avgX
          });
        }
      }
      if (i > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }
      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y;
      minIndex = maxIndex = startIndex = i;
    }
  }
  return decimated;
}
function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, 'data', {value: data});
  }
}
function cleanDecimatedData(chart) {
  chart.data.datasets.forEach((dataset) => {
    cleanDecimatedDataset(dataset);
  });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const {iScale} = meta;
  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
  if (minDefined) {
    start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(points, iScale.axis, min).lo, 0, pointCount - 1);
  }
  if (maxDefined) {
    count = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }
  return {start, count};
}
var plugin_decimation = {
  id: 'decimation',
  defaults: {
    algorithm: 'min-max',
    enabled: false,
  },
  beforeElementsUpdate: (chart, args, options) => {
    if (!options.enabled) {
      cleanDecimatedData(chart);
      return;
    }
    const availableWidth = chart.width;
    chart.data.datasets.forEach((dataset, datasetIndex) => {
      const {_data, indexAxis} = dataset;
      const meta = chart.getDatasetMeta(datasetIndex);
      const data = _data || dataset.data;
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([indexAxis, chart.options.indexAxis]) === 'y') {
        return;
      }
      if (!meta.controller.supportsDecimation) {
        return;
      }
      const xAxis = chart.scales[meta.xAxisID];
      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
        return;
      }
      if (chart.options.parsing) {
        return;
      }
      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);
      const threshold = options.threshold || 4 * availableWidth;
      if (count <= threshold) {
        cleanDecimatedDataset(dataset);
        return;
      }
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(_data)) {
        dataset._data = data;
        delete dataset.data;
        Object.defineProperty(dataset, 'data', {
          configurable: true,
          enumerable: true,
          get: function() {
            return this._decimated;
          },
          set: function(d) {
            this._data = d;
          }
        });
      }
      let decimated;
      switch (options.algorithm) {
      case 'lttb':
        decimated = lttbDecimation(data, start, count, availableWidth, options);
        break;
      case 'min-max':
        decimated = minMaxDecimation(data, start, count, availableWidth);
        break;
      default:
        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
      }
      dataset._decimated = decimated;
    });
  },
  destroy(chart) {
    cleanDecimatedData(chart);
  }
};

function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let {start, end} = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ao)(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ay)(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, 'start', Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, 'end', Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === 'angle') {
    start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(start);
    end = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(end);
  }
  return {property, start, end};
}
function _pointsFromSegments(boundary, line) {
  const {x = null, y = null} = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({start, end}) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y !== null) {
      points.push({x: first.x, y});
      points.push({x: last.x, y});
    } else if (x !== null) {
      points.push({x, y: first.y});
      points.push({x, y: last.y});
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (;end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a, b, prop, fn) {
  if (a && b) {
    return fn(a[prop], b[prop]);
  }
  return a ? a[prop] : b ? b[prop] : 0;
}

function _createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line);
  }
  return points.length ? new LineElement({
    points,
    options: {tension: 0},
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}

function _resolveTarget(sources, index, propagate) {
  const source = sources[index];
  let fill = source.fill;
  const visited = [index];
  let target;
  if (!propagate) {
    return fill;
  }
  while (fill !== false && visited.indexOf(fill) === -1) {
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {
      return fill;
    }
    target = sources[fill];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill;
    }
    visited.push(fill);
    fill = target.fill;
  }
  return false;
}
function _decodeFill(line, index, count) {
  const fill = parseFillOption(line);
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
    return isNaN(fill.value) ? false : fill;
  }
  let target = parseFloat(fill);
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill[0], index, target, count);
  }
  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;
}
function decodeTargetIndex(firstCh, index, target, count) {
  if (firstCh === '-' || firstCh === '+') {
    target = index + target;
  }
  if (target === index || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill, scale) {
  let pixel = null;
  if (fill === 'start') {
    pixel = scale.bottom;
  } else if (fill === 'end') {
    pixel = scale.top;
  } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
    pixel = scale.getPixelForValue(fill.value);
  } else if (scale.getBasePixel) {
    pixel = scale.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill, scale, startValue) {
  let value;
  if (fill === 'start') {
    value = startValue;
  } else if (fill === 'end') {
    value = scale.options.reverse ? scale.min : scale.max;
  } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
    value = fill.value;
  } else {
    value = scale.getBaseValue();
  }
  return value;
}
function parseFillOption(line) {
  const options = line.options;
  const fillOption = options.fill;
  let fill = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(fillOption && fillOption.target, fillOption);
  if (fill === undefined) {
    fill = !!options.backgroundColor;
  }
  if (fill === false || fill === null) {
    return false;
  }
  if (fill === true) {
    return 'origin';
  }
  return fill;
}

function _buildStackLine(source) {
  const {scale, index, line} = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(scale, index);
  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({points, options: {}});
}
function getLinesBelow(scale, index) {
  const below = [];
  const metas = scale.getMatchingVisibleMetas('line');
  for (let i = 0; i < metas.length; i++) {
    const meta = metas[i];
    if (meta.index === index) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line = linesBelow[j];
    const {first, last, point} = findPoint(line, sourcePoint, 'x');
    if (!point || (first && last)) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last = false;
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {first, last, point};
}

class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const {x, y, radius} = this;
    bounds = bounds || {start: 0, end: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T};
    ctx.arc(x, y, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const {x, y, radius} = this;
    const angle = point.angle;
    return {
      x: x + Math.cos(angle) * radius,
      y: y + Math.sin(angle) * radius,
      angle
    };
  }
}

function _getTarget(source) {
  const {chart, fill, line} = source;
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {
    return getLineByIndex(chart, fill);
  }
  if (fill === 'stack') {
    return _buildStackLine(source);
  }
  if (fill === 'shape') {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index) {
  const meta = chart.getDatasetMeta(index);
  const visible = meta && chart.isDatasetVisible(index);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const {scale = {}, fill} = source;
  const pixel = _getTargetPixel(fill, scale);
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(pixel)) {
    const horizontal = scale.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const {scale, fill} = source;
  const options = scale.options;
  const length = scale.getLabels().length;
  const start = options.reverse ? scale.max : scale.min;
  const value = _getTargetValue(fill, scale, start);
  const target = [];
  if (options.grid.circular) {
    const center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (let i = 0; i < length; ++i) {
    target.push(scale.getPointPositionForValue(i, value));
  }
  return target;
}

function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const {line, scale, axis} = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color = lineOpts.backgroundColor;
  const {above = color, below = color} = fillOption || {};
  if (target && line.points.length) {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, area);
    doFill(ctx, {line, target, above, below, area, scale, axis});
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);
  }
}
function doFill(ctx, cfg) {
  const {line, target, above, below, area, scale} = cfg;
  const property = line._loop ? 'angle' : cfg.axis;
  ctx.save();
  if (property === 'x' && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {line, target, color: above, scale, property});
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {line, target, color: below, scale, property});
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const {segments, points} = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const {start, end} = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const {line, target, property, color, scale} = cfg;
  const segments = _segments(line, target, property);
  for (const {source: src, target: tgt, start, end} of segments) {
    const {style: {backgroundColor = color} = {}} = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? 'evenodd' : 'nonzero');
    ctx.restore();
  }
}
function clipBounds(ctx, scale, bounds) {
  const {top, bottom} = scale.chart.chartArea;
  const {property, start, end} = bounds || {};
  if (property === 'x') {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}

var index = {
  id: 'filler',
  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i, line, source;
    for (i = 0; i < count; ++i) {
      meta = chart.getDatasetMeta(i);
      line = meta.dataset;
      source = null;
      if (line && line.options && line instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i),
          index: i,
          fill: _decodeFill(line, i, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line,
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i = 0; i < count; ++i) {
      source = sources[i];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = _resolveTarget(sources, i, options.propagate);
    }
  },
  beforeDraw(chart, _args, options) {
    const draw = options.drawTime === 'beforeDraw';
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw && source.fill) {
        _drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== 'beforeDatasetsDraw') {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (_shouldApplyFill(source)) {
        _drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;
    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {
      return;
    }
    _drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: 'beforeDatasetDraw'
  }
};

const getBoxSize = (labelOpts, fontSize) => {
  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
class Legend extends Element {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = undefined;
    this.columnSizes = undefined;
    this.lineWidths = undefined;
    this.maxHeight = undefined;
    this.maxWidth = undefined;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.height = undefined;
    this.width = undefined;
    this._margins = undefined;
    this.position = undefined;
    this.weight = undefined;
    this.fullSize = undefined;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(labelOpts.generateLabels, [this.chart], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const {options, ctx} = this;
    if (!options.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options.maxWidth || this.maxWidth);
    this.height = Math.min(height, options.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const {ctx, maxWidth, options: {labels: {padding}}} = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [0];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = 'left';
    ctx.textBaseline = 'middle';
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
    const {ctx, maxHeight, options: {labels: {padding}}} = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({width: currentColWidth, height: currentColHeight});
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({width: currentColWidth, height: currentColHeight});
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;
    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += this.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === 'top' || this.options.position === 'bottom';
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, this);
      this._draw();
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);
    }
  }
  _draw() {
    const {options: opts, columnSizes, lineWidths, ctx} = this;
    const {align, labels: labelOpts} = opts;
    const defaultColor = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.color;
    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(opts.rtl, this.left, this.width);
    const labelFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(labelOpts.font);
    const {color: fontColor, padding} = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign('left');
    ctx.textBaseline = 'middle';
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x, y, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineWidth, 1);
      ctx.fillStyle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.fillStyle, defaultColor);
      ctx.lineCap = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineCap, 'butt');
      ctx.lineDashOffset = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDashOffset, 0);
      ctx.lineJoin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineJoin, 'miter');
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x, boxWidth / 2);
        const centerY = y + halfFontSize;
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aE)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
        const borderRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some(v => v !== 0)) {
          (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius,
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x, y, legendItem) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor = {
        x: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: this.left + padding,
        y: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aB)(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i) => {
      ctx.strokeStyle = legendItem.fontColor || fontColor;
      ctx.fillStyle = legendItem.fontColor || fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x = cursor.x;
      let y = cursor.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i > 0 && x + width + padding > this.right) {
          y = cursor.y += lineHeight;
          cursor.line++;
          x = cursor.x = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - lineWidths[cursor.line]);
        }
      } else if (i > 0 && y + lineHeight > this.bottom) {
        x = cursor.x = x + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y = cursor.y = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
      }
      const realX = rtlHelper.x(x);
      drawLegendBox(realX, y, legendItem);
      x = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aC)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x), y, legendItem);
      if (isHorizontal) {
        cursor.x += width + padding;
      } else {
        cursor.y += lineHeight;
      }
    });
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aD)(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(titleOpts.font);
    const titlePadding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y = this.top + topPaddingPlusHalfFontSize;
      left = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y = topPaddingPlusHalfFontSize + (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.R)(position));
    ctx.textBaseline = 'middle';
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, titleOpts.text, x, y, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(titleOpts.font);
    const titlePadding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x, y) {
    let i, hitBox, lh;
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(x, this.left, this.right)
      && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(y, this.top, this.bottom)) {
      lh = this.legendHitBoxes;
      for (i = 0; i < lh.length; ++i) {
        hitBox = lh[i];
        if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(x, hitBox.left, hitBox.left + hitBox.width)
          && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(y, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i];
        }
      }
    }
    return null;
  }
  handleEvent(e) {
    const opts = this.options;
    if (!isListened(e.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e.x, e.y);
    if (e.type === 'mousemove' || e.type === 'mouseout') {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(opts.onLeave, [e, previous, this], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(opts.onHover, [e, hoveredItem, this], this);
      }
    } else if (hoveredItem) {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(opts.onClick, [e, hoveredItem, this], this);
    }
  }
}
function isListened(type, opts) {
  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === 'click' || type === 'mouseup')) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: 'legend',
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: 'top',
    align: 'center',
    fullSize: true,
    reverse: false,
    weight: 1000,
    onClick(e, legendItem, legend) {
      const index = legendItem.datasetIndex;
      const ci = legend.chart;
      if (ci.isDatasetVisible(index)) {
        ci.hide(index);
        legendItem.hidden = true;
      } else {
        ci.show(index);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
          const borderWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: 0,
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: 'center',
      text: '',
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith('on'),
    labels: {
      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),
    }
  },
};

class Title extends Element {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = undefined;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.width = undefined;
    this.height = undefined;
    this.position = undefined;
    this.weight = undefined;
    this.fullSize = undefined;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(opts.text) ? opts.text.length : 1;
    this._padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(opts.padding);
    const textSize = lineCount * (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === 'top' || pos === 'bottom';
  }
  _drawArgs(offset) {
    const {top, left, bottom, right, options} = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === 'left') {
        titleX = left + offset;
        titleY = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, bottom, top);
        rotation = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P * -0.5;
      } else {
        titleX = right - offset;
        titleY = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, top, bottom);
        rotation = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {titleX, titleY, maxWidth, rotation};
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.R)(opts.align),
      textBaseline: 'middle',
      translation: [titleX, titleY],
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: 'title',
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: 'center',
    display: false,
    font: {
      weight: 'bold',
    },
    fullSize: true,
    padding: 10,
    position: 'top',
    text: '',
    weight: 2000
  },
  defaultRoutes: {
    color: 'color'
  },
  descriptors: {
    _scriptable: true,
    _indexable: false,
  },
};

const map = new WeakMap();
var plugin_subtitle = {
  id: 'subtitle',
  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map.set(chart, title);
  },
  stop(chart) {
    layouts.removeBox(chart, map.get(chart));
    map.delete(chart);
  },
  beforeUpdate(chart, _args, options) {
    const title = map.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: 'center',
    display: false,
    font: {
      weight: 'normal',
    },
    fullSize: true,
    padding: 0,
    position: 'top',
    text: '',
    weight: 1500
  },
  defaultRoutes: {
    color: 'color'
  },
  descriptors: {
    _scriptable: true,
    _indexable: false,
  },
};

const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i, len;
    let x = 0;
    let y = 0;
    let count = 0;
    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;
      if (el && el.hasValue()) {
        const pos = el.tooltipPosition();
        x += pos.x;
        y += pos.y;
        ++count;
      }
    }
    return {
      x: x / count,
      y: y / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x = eventPosition.x;
    let y = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i, len, nearestElement;
    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;
      if (el && el.hasValue()) {
        const center = el.getCenterPoint();
        const d = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aG)(eventPosition, center);
        if (d < minDistance) {
          minDistance = d;
          nearestElement = el;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x = tp.x;
      y = tp.y;
    }
    return {
      x,
      y
    };
  }
};
function pushOrConcat(base, toPush) {
  if (toPush) {
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }
  return base;
}
function splitNewlines(str) {
  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    return str.split('\n');
  }
  return str;
}
function createTooltipItem(chart, item) {
  const {element, datasetIndex, index} = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const {label, value} = controller.getLabelAndValue(index);
  return {
    chart,
    label,
    parsed: controller.getParsed(index),
    raw: chart.data.datasets[datasetIndex].data[index],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index,
    datasetIndex,
    element
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip.chart.ctx;
  const {body, footer, title} = tooltip;
  const {boxWidth, boxHeight} = options;
  const bodyFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.bodyFont);
  const titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.titleFont);
  const footerFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight
			+ (titleLineCount - 1) * options.titleSpacing
			+ options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight
			+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight
			+ (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop
			+ footerLineCount * footerFont.lineHeight
			+ (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;
  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(body, (bodyItem) => {
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.before, maxLineWidth);
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.lines, maxLineWidth);
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {width, height};
}
function determineYAlign(chart, size) {
  const {y, height} = size;
  if (y < height / 2) {
    return 'top';
  } else if (y > (chart.height - height / 2)) {
    return 'bottom';
  }
  return 'center';
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
  const {x, width} = size;
  const caret = options.caretSize + options.caretPadding;
  if (xAlign === 'left' && x + width + caret > chart.width) {
    return true;
  }
  if (xAlign === 'right' && x - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size, yAlign) {
  const {x, width} = size;
  const {width: chartWidth, chartArea: {left, right}} = chart;
  let xAlign = 'center';
  if (yAlign === 'center') {
    xAlign = x <= (left + right) / 2 ? 'left' : 'right';
  } else if (x <= width / 2) {
    xAlign = 'left';
  } else if (x >= chartWidth - width / 2) {
    xAlign = 'right';
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = 'center';
  }
  return xAlign;
}
function determineAlignment(chart, options, size) {
  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let {x, width} = size;
  if (xAlign === 'right') {
    x -= width;
  } else if (xAlign === 'center') {
    x -= (width / 2);
  }
  return x;
}
function alignY(size, yAlign, paddingAndSize) {
  let {y, height} = size;
  if (yAlign === 'top') {
    y += paddingAndSize;
  } else if (yAlign === 'bottom') {
    y -= height + paddingAndSize;
  } else {
    y -= (height / 2);
  }
  return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
  const {caretSize, caretPadding, cornerRadius} = options;
  const {xAlign, yAlign} = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const {topLeft, topRight, bottomLeft, bottomRight} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(cornerRadius);
  let x = alignX(size, xAlign);
  const y = alignY(size, yAlign, paddingAndSize);
  if (yAlign === 'center') {
    if (xAlign === 'left') {
      x += paddingAndSize;
    } else if (xAlign === 'right') {
      x -= paddingAndSize;
    }
  } else if (xAlign === 'left') {
    x -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === 'right') {
    x += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(x, 0, chart.width - size.width),
    y: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(y, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options) {
  const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);
  return align === 'center'
    ? tooltip.x + tooltip.width / 2
    : align === 'right'
      ? tooltip.x + tooltip.width - padding.right
      : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback) {
  return pushOrConcat([], splitNewlines(callback));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {
    tooltip,
    tooltipItems,
    type: 'tooltip'
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
class Tooltip extends Element {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = undefined;
    this._size = undefined;
    this._cachedAnimations = undefined;
    this._tooltipItems = [];
    this.$animations = undefined;
    this.$context = undefined;
    this.chart = config.chart || config._chart;
    this._chart = this.chart;
    this.options = config.options;
    this.dataPoints = undefined;
    this.title = undefined;
    this.beforeBody = undefined;
    this.body = undefined;
    this.afterBody = undefined;
    this.footer = undefined;
    this.xAlign = undefined;
    this.yAlign = undefined;
    this.x = undefined;
    this.y = undefined;
    this.height = undefined;
    this.width = undefined;
    this.caretX = undefined;
    this.caretY = undefined;
    this.labelColors = undefined;
    this.labelPointStyles = undefined;
    this.labelTextColors = undefined;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = undefined;
    this.$context = undefined;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options = this.options.setContext(this.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations);
    }
    return animations;
  }
  getContext() {
    return this.$context ||
			(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context, options) {
    const {callbacks} = options;
    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);
    const title = callbacks.title.apply(this, [context]);
    const afterTitle = callbacks.afterTitle.apply(this, [context]);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));
  }
  getBody(tooltipItems, options) {
    const {callbacks} = options;
    const bodyItems = [];
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));
      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));
      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));
  }
  getFooter(tooltipItems, options) {
    const {callbacks} = options;
    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);
    const footer = callbacks.footer.apply(this, [tooltipItems]);
    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i, len;
    for (i = 0, len = active.length; i < len; ++i) {
      tooltipItems.push(createTooltipItem(this.chart, active[i]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));
    }
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(scoped.labelColor.call(this, context));
      labelPointStyles.push(scoped.labelPointStyle.call(this, context));
      labelTextColors.push(scoped.labelTextColor.call(this, context));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options);
      this.title = this.getTitle(tooltipItems, options);
      this.beforeBody = this.getBeforeBody(tooltipItems, options);
      this.body = this.getBody(tooltipItems, options);
      this.afterBody = this.getAfterBody(tooltipItems, options);
      this.footer = this.getFooter(tooltipItems, options);
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(this.chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = undefined;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options.external) {
      options.external.call(this, {chart: this.chart, tooltip: this, replay});
    }
  }
  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options) {
    const {xAlign, yAlign} = this;
    const {caretSize, cornerRadius} = options;
    const {topLeft, topRight, bottomLeft, bottomRight} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(cornerRadius);
    const {x: ptX, y: ptY} = tooltipPoint;
    const {width, height} = size;
    let x1, x2, x3, y1, y2, y3;
    if (yAlign === 'center') {
      y2 = ptY + (height / 2);
      if (xAlign === 'left') {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y2 - caretSize;
        y3 = y2 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === 'left') {
        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);
      } else if (xAlign === 'right') {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === 'top') {
        y1 = ptY;
        y2 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {x1, x2, x3, y1, y2, y3};
  }
  drawTitle(pt, ctx, options) {
    const title = this.title;
    const length = title.length;
    let titleFont, titleSpacing, i;
    if (length) {
      const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = 'middle';
      titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i, rtlHelper, options) {
    const labelColors = this.labelColors[i];
    const labelPointStyle = this.labelPointStyles[i];
    const {boxHeight, boxWidth, boxPadding} = options;
    const bodyFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.bodyFont);
    const colorX = getAlignedX(this, 'left', options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColors.borderColor;
      ctx.fillStyle = labelColors.backgroundColor;
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1);
      ctx.strokeStyle = labelColors.borderColor;
      ctx.setLineDash(labelColors.borderDash || []);
      ctx.lineDashOffset = labelColors.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
      const borderRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(labelColors.borderRadius);
      if (Object.values(borderRadius).some(v => v !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius,
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.beginPath();
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius,
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i];
  }
  drawBody(pt, ctx, options) {
    const {body} = this;
    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;
    const bodyFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(options.rtl, this.x, this.width);
    const fillLineOfText = function(line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = 'middle';
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'
      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)
      : 0;
    for (i = 0, ilen = body.length; i < ilen; ++i) {
      bodyItem = body[i];
      textColor = this.labelTextColors[i];
      ctx.fillStyle = textColor;
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const footer = this.footer;
    const length = footer.length;
    let footerFont, i;
    if (length) {
      const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = 'middle';
      footerFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const {xAlign, yAlign} = this;
    const {x, y} = pt;
    const {width, height} = tooltipSize;
    const {topLeft, topRight, bottomLeft, bottomRight} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(options.cornerRadius);
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x + topLeft, y);
    if (yAlign === 'top') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + width - topRight, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
    if (yAlign === 'center' && xAlign === 'right') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + width, y + height - bottomRight);
    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
    if (yAlign === 'bottom') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + bottomLeft, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
    if (yAlign === 'center' && xAlign === 'left') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x, y + topLeft);
    ctx.quadraticCurveTo(x, y, x + topLeft, y);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position = positioners[options.position].call(this, this._active, this._eventPosition);
      if (!position) {
        return;
      }
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, this._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size.width;
        this.height = size.height;
        this.caretX = position.x;
        this.caretY = position.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options);
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aB)(ctx, options.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options);
      this.drawBody(pt, ctx, options);
      this.drawFooter(pt, ctx, options);
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aD)(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({datasetIndex, index}) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error('Cannot find a dataset at index ' + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index],
        index,
      };
    });
    const changed = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e);
    const changed = replay || !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options.enabled || options.external) {
        this._eventPosition = {
          x: e.x,
          y: e.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e, lastActive, replay, inChartArea) {
    const options = this.options;
    if (e.type === 'mouseout') {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
    if (options.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e) {
    const {caretX, caretY, options} = this;
    const position = positioners[options.position].call(this, active, e);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }
}
Tooltip.positioners = positioners;
var plugin_tooltip = {
  id: 'tooltip',
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({chart, options});
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins('afterTooltipDraw', args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: 'average',
    backgroundColor: 'rgba(0,0,0,0.8)',
    titleColor: '#fff',
    titleFont: {
      weight: 'bold',
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: 'left',
    bodyColor: '#fff',
    bodySpacing: 2,
    bodyFont: {
    },
    bodyAlign: 'left',
    footerColor: '#fff',
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: 'bold',
    },
    footerAlign: 'left',
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: '#fff',
    displayColors: true,
    boxPadding: 0,
    borderColor: 'rgba(0,0,0,0)',
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: 'easeOutQuart',
    },
    animations: {
      numbers: {
        type: 'number',
        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],
      },
      opacity: {
        easing: 'linear',
        duration: 200
      }
    },
    callbacks: {
      beforeTitle: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      title(tooltipItems) {
        if (tooltipItems.length > 0) {
          const item = tooltipItems[0];
          const labels = item.chart.data.labels;
          const labelCount = labels ? labels.length : 0;
          if (this && this.options && this.options.mode === 'dataset') {
            return item.dataset.label || '';
          } else if (item.label) {
            return item.label;
          } else if (labelCount > 0 && item.dataIndex < labelCount) {
            return labels[item.dataIndex];
          }
        }
        return '';
      },
      afterTitle: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      beforeBody: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      beforeLabel: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      label(tooltipItem) {
        if (this && this.options && this.options.mode === 'dataset') {
          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
        }
        let label = tooltipItem.dataset.label || '';
        if (label) {
          label += ': ';
        }
        const value = tooltipItem.formattedValue;
        if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {
          label += value;
        }
        return label;
      },
      labelColor(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          borderColor: options.borderColor,
          backgroundColor: options.backgroundColor,
          borderWidth: options.borderWidth,
          borderDash: options.borderDash,
          borderDashOffset: options.borderDashOffset,
          borderRadius: 0,
        };
      },
      labelTextColor() {
        return this.options.bodyColor;
      },
      labelPointStyle(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          pointStyle: options.pointStyle,
          rotation: options.rotation,
        };
      },
      afterLabel: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      afterBody: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      beforeFooter: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      footer: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,
      afterFooter: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF
    }
  },
  defaultRoutes: {
    bodyFont: 'font',
    footerFont: 'font',
    titleFont: 'font'
  },
  descriptors: {
    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false,
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: 'animation'
    }
  },
  additionalOptionScopes: ['interaction']
};

var plugins = /*#__PURE__*/Object.freeze({
__proto__: null,
Decimation: plugin_decimation,
Filler: index,
Legend: plugin_legend,
SubTitle: plugin_subtitle,
Title: plugin_title,
Tooltip: plugin_tooltip
});

const addIfString = (labels, raw, index, addedLabels) => {
  if (typeof raw === 'string') {
    index = labels.push(raw) - 1;
    addedLabels.unshift({index, label: raw});
  } else if (isNaN(raw)) {
    index = null;
  }
  return index;
};
function findOrAddLabel(labels, raw, index, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index : first;
}
const validIndex = (index, max) => index === null ? null : (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(Math.round(index), 0, max);
class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = undefined;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const {index, label} of added) {
        if (labels[index] === label) {
          labels.splice(index, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index) {
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index = isFinite(index) && labels[index] === raw ? index
      : findOrAddLabel(labels, raw, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(index, raw), this._addedLabels);
    return validIndex(index, labels.length - 1);
  }
  determineDataLimits() {
    const {minDefined, maxDefined} = this.getUserBounds();
    let {min, max} = this.getMinMax(true);
    if (this.options.bounds === 'ticks') {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = this.getLabels().length - 1;
      }
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const min = this.min;
    const max = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({value});
    }
    return ticks;
  }
  getLabelForValue(value) {
    const labels = this.getLabels();
    if (value >= 0 && value < labels.length) {
      return labels[value];
    }
    return value;
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== 'number') {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index) {
    const ticks = this.ticks;
    if (index < 0 || index > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
CategoryScale.id = 'category';
CategoryScale.defaults = {
  ticks: {
    callback: CategoryScale.prototype.getLabelForValue
  }
};

function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const {min: rmin, max: rmax} = dataRange;
  const minDefined = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(min);
  const maxDefined = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(max);
  const countDefined = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aI)((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [{value: rmin}, {value: rmax}];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aI)(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === 'ticks') {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aJ)((max - min) / step, spacing / 1000)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aK)(numSpaces, Math.round(numSpaces), spacing / 1000)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aL)(spacing),
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aL)(niceMin)
  );
  factor = Math.pow(10, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({value: min});
      if (niceMin < min) {
        j++;
      }
      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aK)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if (ticks.length && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aK)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({value: max});
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({value: niceMax});
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {
  const rad = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
  const length = 0.75 * minSpacing * ('' + value).length;
  return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = undefined;
    this.end = undefined;
    this._startValue = undefined;
    this._endValue = undefined;
    this._valueRange = 0;
  }
  parse(raw, index) {
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(raw)) {
      return null;
    }
    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const {beginAtZero} = this.options;
    const {minDefined, maxDefined} = this.getUserBounds();
    let {min, max} = this;
    const setMin = v => (min = minDefined ? min : v);
    const setMax = v => (max = maxDefined ? max : v);
    if (beginAtZero) {
      const minSign = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(min);
      const maxSign = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = 1;
      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {
        offset = Math.abs(max * 0.05);
      }
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    this.min = min;
    this.max = max;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let {maxTicksLimit, stepSize} = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1000) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1000;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === 'ticks') {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aH)(ticks, this, 'value');
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(value, this.chart.options.locale, this.options.ticks.format);
  }
}

class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const {min, max} = this.getMinMax(true);
    this.min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? min : 0;
    this.max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? max : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length = horizontal ? this.width : this.height;
    const minRotation = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
LinearScale.id = 'linear';
LinearScale.defaults = {
  ticks: {
    callback: Ticks.formatters.numeric
  }
};

function isMajor(tickVal) {
  const remain = tickVal / (Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(tickVal))));
  return remain === 1;
}
function generateTicks(generationOptions, dataRange) {
  const endExp = Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(dataRange.max));
  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
  const ticks = [];
  let tickVal = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(generationOptions.min, Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(dataRange.min))));
  let exp = Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(tickVal));
  let significand = Math.floor(tickVal / Math.pow(10, exp));
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  do {
    ticks.push({value: tickVal, major: isMajor(tickVal)});
    ++significand;
    if (significand === 10) {
      significand = 1;
      ++exp;
      precision = exp >= 0 ? 1 : precision;
    }
    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
  } while (exp < endExp || (exp === endExp && significand < endSignificand));
  const lastTick = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(generationOptions.max, tickVal);
  ticks.push({value: lastTick, major: isMajor(tickVal)});
  return ticks;
}
class LogarithmicScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = undefined;
    this.end = undefined;
    this._startValue = undefined;
    this._valueRange = 0;
  }
  parse(raw, index) {
    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);
    if (value === 0) {
      this._zero = true;
      return undefined;
    }
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const {min, max} = this.getMinMax(true);
    this.min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? Math.max(0, min) : null;
    this.max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? Math.max(0, max) : null;
    if (this.options.beginAtZero) {
      this._zero = true;
    }
    this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const {minDefined, maxDefined} = this.getUserBounds();
    let min = this.min;
    let max = this.max;
    const setMin = v => (min = minDefined ? min : v);
    const setMax = v => (max = maxDefined ? max : v);
    const exp = (v, m) => Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(v)) + m);
    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(exp(min, -1));
        setMax(exp(max, +1));
      }
    }
    if (min <= 0) {
      setMin(exp(max, -1));
    }
    if (max <= 0) {
      setMax(exp(min, +1));
    }
    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {
      setMin(exp(min, -1));
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const opts = this.options;
    const generationOptions = {
      min: this._userMin,
      max: this._userMax
    };
    const ticks = generateTicks(generationOptions, this);
    if (opts.bounds === 'ticks') {
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aH)(ticks, this, 'value');
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === undefined
      ? '0'
      : (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(value, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const start = this.min;
    super.configure();
    this._startValue = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(start);
    this._valueRange = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(this.max) - (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(start);
  }
  getPixelForValue(value) {
    if (value === undefined || value === 0) {
      value = this.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return this.getPixelForDecimal(value === this.min
      ? 0
      : ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(value) - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    const decimal = this.getDecimalForPixel(pixel);
    return Math.pow(10, this._startValue + decimal * this._valueRange);
  }
}
LogarithmicScale.id = 'logarithmic';
LogarithmicScale.defaults = {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
};

function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(tickOpts.backdropPadding);
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(tickOpts.font && tickOpts.font.size, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label : [label];
  return {
    w: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aM)(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - (size / 2),
      end: pos + (size / 2)
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  const orig = {
    l: scale.left + scale._padding.left,
    r: scale.right - scale._padding.right,
    t: scale.top + scale._padding.top,
    b: scale.bottom - scale._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale._pointLabels.length;
  const pointLabelOpts = scale.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P / valueCount : 0;
  for (let i = 0; i < valueCount; i++) {
    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
    padding[i] = opts.padding;
    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
    const plFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
    labelSizes[i] = textSize;
    const angleRadians = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(scale.getIndexAngle(i) + additionalAngle);
    const angle = Math.round((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.F)(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale.setCenterPoint(
    orig.l - limits.l,
    limits.r - orig.r,
    orig.t - limits.t,
    limits.b - orig.b
  );
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x = 0;
  let y = 0;
  if (hLimits.start < orig.l) {
    x = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x);
  } else if (hLimits.end > orig.r) {
    x = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x);
  }
  if (vLimits.start < orig.t) {
    y = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y);
  } else if (vLimits.end > orig.b) {
    y = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y);
  }
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale._pointLabels.length;
  const opts = scale.options;
  const extra = getTickBackdropHeight(opts) / 2;
  const outerDistance = scale.drawingArea;
  const additionalAngle = opts.pointLabels.centerPointLabels ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P / valueCount : 0;
  for (let i = 0; i < valueCount; i++) {
    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);
    const angle = Math.round((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.F)((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(pointLabelPosition.angle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H)));
    const size = labelSizes[i];
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    items.push({
      x: pointLabelPosition.x,
      y,
      textAlign,
      left,
      top: y,
      right: left + size.w,
      bottom: y + size.h
    });
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return 'center';
  } else if (angle < 180) {
    return 'left';
  }
  return 'right';
}
function leftForTextAlign(x, w, align) {
  if (align === 'right') {
    x -= w;
  } else if (align === 'center') {
    x -= (w / 2);
  }
  return x;
}
function yForAngle(y, h, angle) {
  if (angle === 90 || angle === 270) {
    y -= (h / 2);
  } else if (angle > 270 || angle < 90) {
    y -= h;
  }
  return y;
}
function drawPointLabels(scale, labelCount) {
  const {ctx, options: {pointLabels}} = scale;
  for (let i = labelCount - 1; i >= 0; i--) {
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
    const plFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(optsAtIndex.font);
    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];
    const {backdropColor} = optsAtIndex;
    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(backdropColor)) {
      const borderRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(optsAtIndex.borderRadius);
      const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(optsAtIndex.backdropPadding);
      ctx.fillStyle = backdropColor;
      const backdropLeft = left - padding.left;
      const backdropTop = top - padding.top;
      const backdropWidth = right - left + padding.width;
      const backdropHeight = bottom - top + padding.height;
      if (Object.values(borderRadius).some(v => v !== 0)) {
        ctx.beginPath();
        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {
          x: backdropLeft,
          y: backdropTop,
          w: backdropWidth,
          h: backdropHeight,
          radius: borderRadius,
        });
        ctx.fill();
      } else {
        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
      }
    }
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(
      ctx,
      scale._pointLabels[i],
      x,
      y + (plFont.lineHeight / 2),
      plFont,
      {
        color: optsAtIndex.color,
        textAlign: textAlign,
        textBaseline: 'middle'
      }
    );
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const {ctx} = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i = 1; i < labelCount; i++) {
      pointPosition = scale.getPointPosition(i, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const {color, lineWidth} = gridLineOpts;
  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(gridLineOpts.borderDash);
  ctx.lineDashOffset = gridLineOpts.borderDashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index, label) {
  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {
    label,
    index,
    type: 'pointLabel'
  });
}
class RadialLinearScale extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = undefined;
    this.yCenter = undefined;
    this.drawingArea = undefined;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const padding = this._padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(getTickBackdropHeight(this.options) / 2);
    const w = this.width = this.maxWidth - padding.width;
    const h = this.height = this.maxHeight - padding.height;
    this.xCenter = Math.floor(this.left + w / 2 + padding.left);
    this.yCenter = Math.floor(this.top + h / 2 + padding.top);
    this.drawingArea = Math.floor(Math.min(w, h) / 2);
  }
  determineDataLimits() {
    const {min, max} = this.getMinMax(false);
    this.min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : 0;
    this.max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : 0;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
    this._pointLabels = this.getLabels()
      .map((value, index) => {
        const label = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.pointLabels.callback, [value, index], this);
        return label || label === 0 ? label : '';
      })
      .filter((v, i) => this.chart.getDataVisibility(i));
  }
  fit() {
    const opts = this.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(this);
    } else {
      this.setCenterPoint(0, 0, 0, 0);
    }
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
  }
  getIndexAngle(index) {
    const angleMultiplier = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T / (this._pointLabels.length || 1);
    const startAngle = this.options.startAngle || 0;
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(index * angleMultiplier + (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {
      return NaN;
    }
    const scalingFactor = this.drawingArea / (this.max - this.min);
    if (this.options.reverse) {
      return (this.max - value) * scalingFactor;
    }
    return (value - this.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance) {
    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(distance)) {
      return NaN;
    }
    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
  }
  getPointLabelContext(index) {
    const pointLabels = this._pointLabels || [];
    if (index >= 0 && index < pointLabels.length) {
      const pointLabel = pointLabels[index];
      return createPointLabelContext(this.getContext(), index, pointLabel);
    }
  }
  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
    const angle = this.getIndexAngle(index) - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H + additionalAngle;
    return {
      x: Math.cos(angle) * distanceFromCenter + this.xCenter,
      y: Math.sin(angle) * distanceFromCenter + this.yCenter,
      angle
    };
  }
  getPointPositionForValue(index, value) {
    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index) {
    return this.getPointPositionForValue(index || 0, this.getBaseValue());
  }
  getPointLabelPosition(index) {
    const {left, top, right, bottom} = this._pointLabelItems[index];
    return {
      left,
      top,
      right,
      bottom,
    };
  }
  drawBackground() {
    const {backgroundColor, grid: {circular}} = this.options;
    if (backgroundColor) {
      const ctx = this.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const ctx = this.ctx;
    const opts = this.options;
    const {angleLines, grid} = opts;
    const labelCount = this._pointLabels.length;
    let i, offset, position;
    if (opts.pointLabels.display) {
      drawPointLabels(this, labelCount);
    }
    if (grid.display) {
      this.ticks.forEach((tick, index) => {
        if (index !== 0) {
          offset = this.getDistanceFromCenterForValue(tick.value);
          const optsAtIndex = grid.setContext(this.getContext(index - 1));
          drawRadiusLine(this, optsAtIndex, offset, labelCount);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i = labelCount - 1; i >= 0; i--) {
        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
        const {color, lineWidth} = optsAtIndex;
        if (!lineWidth || !color) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
        position = this.getPointPosition(i, offset);
        ctx.beginPath();
        ctx.moveTo(this.xCenter, this.yCenter);
        ctx.lineTo(position.x, position.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {}
  drawLabels() {
    const ctx = this.ctx;
    const opts = this.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = this.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(this.xCenter, this.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    this.ticks.forEach((tick, index) => {
      if (index === 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(this.getContext(index));
      const tickFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(optsAtIndex.font);
      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(optsAtIndex.backdropPadding);
        ctx.fillRect(
          -width / 2 - padding.left,
          -offset - tickFont.size / 2 - padding.top,
          width + padding.width,
          tickFont.size + padding.height
        );
      }
      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color,
      });
    });
    ctx.restore();
  }
  drawTitle() {}
}
RadialLinearScale.id = 'radialLinear';
RadialLinearScale.defaults = {
  display: true,
  animate: true,
  position: 'chartArea',
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0.0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: undefined,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(label) {
      return label;
    },
    padding: 5,
    centerPointLabels: false
  }
};
RadialLinearScale.defaultRoutes = {
  'angleLines.color': 'borderColor',
  'pointLabels.color': 'color',
  'ticks.color': 'color'
};
RadialLinearScale.descriptors = {
  angleLines: {
    _fallback: 'grid'
  }
};

const INTERVALS = {
  millisecond: {common: true, size: 1, steps: 1000},
  second: {common: true, size: 1000, steps: 60},
  minute: {common: true, size: 60000, steps: 60},
  hour: {common: true, size: 3600000, steps: 24},
  day: {common: true, size: 86400000, steps: 30},
  week: {common: false, size: 604800000, steps: 4},
  month: {common: true, size: 2.628e9, steps: 12},
  quarter: {common: false, size: 7.884e9, steps: 4},
  year: {common: true, size: 3.154e10}
};
const UNITS = (Object.keys(INTERVALS));
function sorter(a, b) {
  return a - b;
}
function parse(scale, input) {
  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(input)) {
    return null;
  }
  const adapter = scale._adapter;
  const {parser, round, isoWeekday} = scale._parseOpts;
  let value = input;
  if (typeof parser === 'function') {
    value = parser(value);
  }
  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {
    value = typeof parser === 'string'
      ? adapter.parse(value, parser)
      : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round) {
    value = round === 'week' && ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(isoWeekday) || isoWeekday === true)
      ? adapter.startOf(value, 'isoWeek', isoWeekday)
      : adapter.startOf(value, round);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    const interval = INTERVALS[UNITS[i]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    const unit = UNITS[i];
    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const {lo, hi} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aO)(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index = map[major];
    if (index >= 0) {
      ticks[index].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map = {};
  const ilen = values.length;
  let i, value;
  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map[value] = i;
    ticks.push({
      value,
      major: false
    });
  }
  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = 'day';
    this._majorUnit = undefined;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = undefined;
  }
  init(scaleOpts, opts) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index) {
    if (raw === undefined) {
      return null;
    }
    return parse(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options = this.options;
    const adapter = this._adapter;
    const unit = options.time.unit || 'day';
    let {min, max, minDefined, maxDefined} = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
        _applyBounds(this.getMinMax(false));
      }
    }
    min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min, max - 1);
    this.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {min, max};
  }
  buildTicks() {
    const options = this.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
    if (options.bounds === 'ticks' && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min = this.min;
    const max = this.max;
    const ticks = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aN)(timestamps, min, max);
    this._unit = timeOpts.unit || (tickOpts.autoSkip
      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))
      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined
      : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map(tick => +tick.value));
    }
  }
  initOffsets(timestamps) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(start, 0, limit);
    end = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(end, 0, limit);
    this._offsets = {start, end, factor: 1 / (start + 1 + end)};
  }
  _generate() {
    const adapter = this._adapter;
    const min = this.min;
    const max = this.max;
    const options = this.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
    const stepSize = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(timeOpts.stepSize, 1);
    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
    const hasWeekday = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, 'isoWeek', weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
    if (adapter.diff(max, min, minor) > 100000 * stepSize) {
      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
    }
    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }
    if (time === max || options.bounds === 'ticks' || count === 1) {
      addTick(ticks, time, timestamps);
    }
    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  _tickFormatFunction(time, index, ticks, format) {
    const options = this.options;
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index];
    const major = majorUnit && majorFormat && tick && tick.major;
    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));
    const formatter = options.ticks.callback;
    return formatter ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(formatter, [label, index, ticks], this) : label;
  }
  generateTickLabels(ticks) {
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      tick.label = this._tickFormatFunction(tick.value, i, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);
    const size = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return (this._cache.data = metas[0].controller.getAllParsedValues(this));
    }
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
    }
    return (this._cache.data = this.normalize(timestamps));
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      timestamps.push(parse(this, labels[i]));
    }
    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));
  }
  normalize(values) {
    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__._)(values.sort(sorter));
  }
}
TimeScale.id = 'time';
TimeScale.defaults = {
  bounds: 'data',
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: 'millisecond',
    displayFormats: {}
  },
  ticks: {
    source: 'auto',
    major: {
      enabled: false
    }
  }
};

function interpolate(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({lo, hi} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(table, 'pos', val));
    }
    ({pos: prevSource, time: prevTarget} = table[lo]);
    ({pos: nextSource, time: nextTarget} = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({lo, hi} = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(table, 'time', val));
    }
    ({time: prevSource, pos: prevTarget} = table[lo]);
    ({time: nextSource, pos: nextTarget} = table[hi]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = undefined;
    this._tableRange = undefined;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate(table, this.min);
    this._tableRange = interpolate(table, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const {min, max} = this;
    const items = [];
    const table = [];
    let i, ilen, prev, curr, next;
    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
      curr = timestamps[i];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {time: min, pos: 0},
        {time: max, pos: 1}
      ];
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      next = items[i + 1];
      prev = items[i - 1];
      curr = items[i];
      if (Math.round((next + prev) / 2) !== curr) {
        table.push({time: curr, pos: i / (ilen - 1)});
      }
    }
    return table;
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
  }
}
TimeSeriesScale.id = 'timeseries';
TimeSeriesScale.defaults = TimeScale.defaults;

var scales = /*#__PURE__*/Object.freeze({
__proto__: null,
CategoryScale: CategoryScale,
LinearScale: LinearScale,
LogarithmicScale: LogarithmicScale,
RadialLinearScale: RadialLinearScale,
TimeScale: TimeScale,
TimeSeriesScale: TimeSeriesScale
});

const registerables = [
  controllers,
  elements,
  plugins,
  scales,
];




/***/ }),

/***/ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\node_modules\\chart.js\\dist\\chunks\\helpers.segment.mjs":
/*!*****************************************************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\node_modules\chart.js\dist\chunks\helpers.segment.mjs ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ _isPointInArea),
/* harmony export */   "A": () => (/* binding */ _factorize),
/* harmony export */   "B": () => (/* binding */ finiteOrDefault),
/* harmony export */   "C": () => (/* binding */ callback),
/* harmony export */   "D": () => (/* binding */ _addGrace),
/* harmony export */   "E": () => (/* binding */ _limitValue),
/* harmony export */   "F": () => (/* binding */ toDegrees),
/* harmony export */   "G": () => (/* binding */ _measureText),
/* harmony export */   "H": () => (/* binding */ HALF_PI),
/* harmony export */   "I": () => (/* binding */ _int16Range),
/* harmony export */   "J": () => (/* binding */ _alignPixel),
/* harmony export */   "K": () => (/* binding */ toPadding),
/* harmony export */   "L": () => (/* binding */ clipArea),
/* harmony export */   "M": () => (/* binding */ renderText),
/* harmony export */   "N": () => (/* binding */ unclipArea),
/* harmony export */   "O": () => (/* binding */ toFont),
/* harmony export */   "P": () => (/* binding */ PI),
/* harmony export */   "Q": () => (/* binding */ each),
/* harmony export */   "R": () => (/* binding */ _toLeftRightCenter),
/* harmony export */   "S": () => (/* binding */ _alignStartEnd),
/* harmony export */   "T": () => (/* binding */ TAU),
/* harmony export */   "U": () => (/* binding */ overrides),
/* harmony export */   "V": () => (/* binding */ merge),
/* harmony export */   "W": () => (/* binding */ _capitalize),
/* harmony export */   "X": () => (/* binding */ getRelativePosition),
/* harmony export */   "Y": () => (/* binding */ _rlookupByKey),
/* harmony export */   "Z": () => (/* binding */ _lookupByKey),
/* harmony export */   "_": () => (/* binding */ _arrayUnique),
/* harmony export */   "a": () => (/* binding */ resolve),
/* harmony export */   "a$": () => (/* binding */ toLineHeight),
/* harmony export */   "a0": () => (/* binding */ getAngleFromPoint),
/* harmony export */   "a1": () => (/* binding */ getMaximumSize),
/* harmony export */   "a2": () => (/* binding */ _getParentNode),
/* harmony export */   "a3": () => (/* binding */ readUsedSize),
/* harmony export */   "a4": () => (/* binding */ throttled),
/* harmony export */   "a5": () => (/* binding */ supportsEventListenerOptions),
/* harmony export */   "a6": () => (/* binding */ _isDomSupported),
/* harmony export */   "a7": () => (/* binding */ descriptors),
/* harmony export */   "a8": () => (/* binding */ isFunction),
/* harmony export */   "a9": () => (/* binding */ _attachContext),
/* harmony export */   "aA": () => (/* binding */ getRtlAdapter),
/* harmony export */   "aB": () => (/* binding */ overrideTextDirection),
/* harmony export */   "aC": () => (/* binding */ _textX),
/* harmony export */   "aD": () => (/* binding */ restoreTextDirection),
/* harmony export */   "aE": () => (/* binding */ drawPointLegend),
/* harmony export */   "aF": () => (/* binding */ noop),
/* harmony export */   "aG": () => (/* binding */ distanceBetweenPoints),
/* harmony export */   "aH": () => (/* binding */ _setMinAndMaxByKey),
/* harmony export */   "aI": () => (/* binding */ niceNum),
/* harmony export */   "aJ": () => (/* binding */ almostWhole),
/* harmony export */   "aK": () => (/* binding */ almostEquals),
/* harmony export */   "aL": () => (/* binding */ _decimalPlaces),
/* harmony export */   "aM": () => (/* binding */ _longestText),
/* harmony export */   "aN": () => (/* binding */ _filterBetween),
/* harmony export */   "aO": () => (/* binding */ _lookup),
/* harmony export */   "aP": () => (/* binding */ isPatternOrGradient),
/* harmony export */   "aQ": () => (/* binding */ getHoverColor),
/* harmony export */   "aR": () => (/* binding */ clone$1),
/* harmony export */   "aS": () => (/* binding */ _merger),
/* harmony export */   "aT": () => (/* binding */ _mergerIf),
/* harmony export */   "aU": () => (/* binding */ _deprecated),
/* harmony export */   "aV": () => (/* binding */ _splitKey),
/* harmony export */   "aW": () => (/* binding */ toFontString),
/* harmony export */   "aX": () => (/* binding */ splineCurve),
/* harmony export */   "aY": () => (/* binding */ splineCurveMonotone),
/* harmony export */   "aZ": () => (/* binding */ getStyle),
/* harmony export */   "a_": () => (/* binding */ fontString),
/* harmony export */   "aa": () => (/* binding */ _createResolver),
/* harmony export */   "ab": () => (/* binding */ _descriptors),
/* harmony export */   "ac": () => (/* binding */ mergeIf),
/* harmony export */   "ad": () => (/* binding */ uid),
/* harmony export */   "ae": () => (/* binding */ debounce),
/* harmony export */   "af": () => (/* binding */ retinaScale),
/* harmony export */   "ag": () => (/* binding */ clearCanvas),
/* harmony export */   "ah": () => (/* binding */ setsEqual),
/* harmony export */   "ai": () => (/* binding */ _elementsEqual),
/* harmony export */   "aj": () => (/* binding */ _isClickEvent),
/* harmony export */   "ak": () => (/* binding */ _isBetween),
/* harmony export */   "al": () => (/* binding */ _readValueToProps),
/* harmony export */   "am": () => (/* binding */ _updateBezierControlPoints),
/* harmony export */   "an": () => (/* binding */ _computeSegments),
/* harmony export */   "ao": () => (/* binding */ _boundSegments),
/* harmony export */   "ap": () => (/* binding */ _steppedInterpolation),
/* harmony export */   "aq": () => (/* binding */ _bezierInterpolation),
/* harmony export */   "ar": () => (/* binding */ _pointInLine),
/* harmony export */   "as": () => (/* binding */ _steppedLineTo),
/* harmony export */   "at": () => (/* binding */ _bezierCurveTo),
/* harmony export */   "au": () => (/* binding */ drawPoint),
/* harmony export */   "av": () => (/* binding */ addRoundedRectPath),
/* harmony export */   "aw": () => (/* binding */ toTRBL),
/* harmony export */   "ax": () => (/* binding */ toTRBLCorners),
/* harmony export */   "ay": () => (/* binding */ _boundSegment),
/* harmony export */   "az": () => (/* binding */ _normalizeAngle),
/* harmony export */   "b": () => (/* binding */ isArray),
/* harmony export */   "b0": () => (/* binding */ PITAU),
/* harmony export */   "b1": () => (/* binding */ INFINITY),
/* harmony export */   "b2": () => (/* binding */ RAD_PER_DEG),
/* harmony export */   "b3": () => (/* binding */ QUARTER_PI),
/* harmony export */   "b4": () => (/* binding */ TWO_THIRDS_PI),
/* harmony export */   "b5": () => (/* binding */ _angleDiff),
/* harmony export */   "c": () => (/* binding */ color),
/* harmony export */   "d": () => (/* binding */ defaults),
/* harmony export */   "e": () => (/* binding */ effects),
/* harmony export */   "f": () => (/* binding */ resolveObjectKey),
/* harmony export */   "g": () => (/* binding */ isNumberFinite),
/* harmony export */   "h": () => (/* binding */ createContext),
/* harmony export */   "i": () => (/* binding */ isObject),
/* harmony export */   "j": () => (/* binding */ defined),
/* harmony export */   "k": () => (/* binding */ isNullOrUndef),
/* harmony export */   "l": () => (/* binding */ listenArrayEvents),
/* harmony export */   "m": () => (/* binding */ toPercentage),
/* harmony export */   "n": () => (/* binding */ toDimension),
/* harmony export */   "o": () => (/* binding */ formatNumber),
/* harmony export */   "p": () => (/* binding */ _angleBetween),
/* harmony export */   "q": () => (/* binding */ _getStartAndCountOfVisiblePoints),
/* harmony export */   "r": () => (/* binding */ requestAnimFrame),
/* harmony export */   "s": () => (/* binding */ sign),
/* harmony export */   "t": () => (/* binding */ toRadians),
/* harmony export */   "u": () => (/* binding */ unlistenArrayEvents),
/* harmony export */   "v": () => (/* binding */ valueOrDefault),
/* harmony export */   "w": () => (/* binding */ _scaleRangesChanged),
/* harmony export */   "x": () => (/* binding */ isNumber),
/* harmony export */   "y": () => (/* binding */ _parseObjectDataRadialScale),
/* harmony export */   "z": () => (/* binding */ log10)
/* harmony export */ });
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */
function noop() {}
const uid = (function() {
  let id = 0;
  return function() {
    return id++;
  };
}());
function isNullOrUndef(value) {
  return value === null || typeof value === 'undefined';
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === '[object Object]';
}
const isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === 'undefined' ? defaultValue : value;
}
const toPercentage = (value, dimension) =>
  typeof value === 'string' && value.endsWith('%') ?
    parseFloat(value) / 100
    : value / dimension;
const toDimension = (value, dimension) =>
  typeof value === 'string' && value.endsWith('%') ?
    parseFloat(value) / 100 * dimension
    : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === 'function') {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i = len - 1; i >= 0; i--) {
        fn.call(thisArg, loopable[i], i);
      }
    } else {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone$1(source) {
  if (isArray(source)) {
    return source.map(clone$1);
  }
  if (isObject(source)) {
    const target = Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k = 0;
    for (; k < klen; ++k) {
      target[keys[k]] = clone$1(source[keys[k]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone$1(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [source];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  for (let i = 0; i < ilen; ++i) {
    source = sources[i];
    if (!isObject(source)) {
      continue;
    }
    const keys = Object.keys(source);
    for (let k = 0, klen = keys.length; k < klen; ++k) {
      merger(keys[k], target, source, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {merger: _mergerIf});
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone$1(sval);
  }
}
function _deprecated(scope, value, previous, current) {
  if (value !== undefined) {
    console.warn(scope + ': "' + previous +
			'" is deprecated. Please use "' + current + '" instead');
  }
}
const keyResolvers = {
  '': v => v,
  x: o => o.x,
  y: o => o.y
};
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _getKeyResolver(key) {
  const keys = _splitKey(key);
  return obj => {
    for (const k of keys) {
      if (k === '') {
        break;
      }
      obj = obj && obj[k];
    }
    return obj;
  };
}
function _splitKey(key) {
  const parts = key.split('.');
  const keys = [];
  let tmp = '';
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith('\\')) {
      tmp = tmp.slice(0, -1) + '.';
    } else {
      keys.push(tmp);
      tmp = '';
    }
  }
  return keys;
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== 'undefined';
const isFunction = (value) => typeof value === 'function';
const setsEqual = (a, b) => {
  if (a.size !== b.size) {
    return false;
  }
  for (const item of a) {
    if (!b.has(item)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e) {
  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
}

const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i;
  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a, b) => a - b).pop();
  return result;
}
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostEquals(x, y, epsilon) {
  return Math.abs(x - y) < epsilon;
}
function almostWhole(x, epsilon) {
  const rounded = Math.round(x);
  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
}
function _setMinAndMaxByKey(array, target, property) {
  let i, ilen, value;
  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x) {
  if (!isNumberFinite(x)) {
    return;
  }
  let e = 1;
  let p = 0;
  while (Math.round(x * e) / e !== x) {
    e *= 10;
    p++;
  }
  return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < (-0.5 * PI)) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a, b) {
  return (a - b + PITAU) % TAU - PI;
}
function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a = _normalizeAngle(angle);
  const s = _normalizeAngle(start);
  const e = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s - a);
  const angleToEnd = _normalizeAngle(e - a);
  const startToAngle = _normalizeAngle(a - s);
  const endToAngle = _normalizeAngle(a - e);
  return a === s || a === e || (sameAngleIsFullCircle && s === e)
    || (angleToStart > angleToEnd && startToAngle < endToAngle);
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}

function _lookup(table, value, cmp) {
  cmp = cmp || ((index) => table[index] < value);
  let hi = table.length - 1;
  let lo = 0;
  let mid;
  while (hi - lo > 1) {
    mid = (lo + hi) >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {lo, hi};
}
const _lookupByKey = (table, key, value, last) =>
  _lookup(table, value, last
    ? index => table[index][key] <= value
    : index => table[index][key] < value);
const _rlookupByKey = (table, key, value) =>
  _lookup(table, value, index => table[index][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length
    ? values.slice(start, end)
    : values;
}
const arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, '_chartjs', {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [listener]
    }
  });
  arrayEvents.forEach((key) => {
    const method = '_onData' + _capitalize(key);
    const base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === 'function') {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index = listeners.indexOf(listener);
  if (index !== -1) {
    listeners.splice(index, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set = new Set();
  let i, ilen;
  for (i = 0, ilen = items.length; i < ilen; ++i) {
    set.add(items[i]);
  }
  if (set.size === ilen) {
    return items;
  }
  return Array.from(set);
}

function fontString(pixelSize, fontStyle, fontFamily) {
  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
}
const requestAnimFrame = (function() {
  if (typeof window === 'undefined') {
    return function(callback) {
      return callback();
    };
  }
  return window.requestAnimationFrame;
}());
function throttled(fn, thisArg, updateFn) {
  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));
  let ticking = false;
  let args = [];
  return function(...rest) {
    args = updateArgs(rest);
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, args);
      });
    }
  };
}
function debounce(fn, delay) {
  let timeout;
  return function(...args) {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay, args);
    } else {
      fn.apply(this, args);
    }
    return delay;
  };
}
const _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
const _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
const _textX = (align, left, right, rtl) => {
  const check = rtl ? 'left' : 'right';
  return align === check ? right : align === 'center' ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const {iScale, _parsed} = meta;
    const axis = iScale.axis;
    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
    if (minDefined) {
      start = _limitValue(Math.min(
        _lookupByKey(_parsed, iScale.axis, min).lo,
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),
      0, pointCount - 1);
    }
    if (maxDefined) {
      count = _limitValue(Math.max(
        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),
      start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {start, count};
}
function _scaleRangesChanged(meta) {
  const {xScale, yScale, _scaleRanges} = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min
		|| _scaleRanges.xmax !== xScale.max
		|| _scaleRanges.ymin !== yScale.min
		|| _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}

const atEdge = (t) => t === 0 || t === 1;
const elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
const elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
const effects = {
  linear: t => t,
  easeInQuad: t => t * t,
  easeOutQuad: t => -t * (t - 2),
  easeInOutQuad: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t
    : -0.5 * ((--t) * (t - 2) - 1),
  easeInCubic: t => t * t * t,
  easeOutCubic: t => (t -= 1) * t * t + 1,
  easeInOutCubic: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t * t
    : 0.5 * ((t -= 2) * t * t + 2),
  easeInQuart: t => t * t * t * t,
  easeOutQuart: t => -((t -= 1) * t * t * t - 1),
  easeInOutQuart: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t * t * t
    : -0.5 * ((t -= 2) * t * t * t - 2),
  easeInQuint: t => t * t * t * t * t,
  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,
  easeInOutQuint: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t * t * t * t
    : 0.5 * ((t -= 2) * t * t * t * t + 2),
  easeInSine: t => -Math.cos(t * HALF_PI) + 1,
  easeOutSine: t => Math.sin(t * HALF_PI),
  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),
  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),
  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,
  easeInOutExpo: t => atEdge(t) ? t : t < 0.5
    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))
    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),
  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),
  easeInOutCirc: t => ((t /= 0.5) < 1)
    ? -0.5 * (Math.sqrt(1 - t * t) - 1)
    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
  easeInOutElastic(t) {
    const s = 0.1125;
    const p = 0.45;
    return atEdge(t) ? t :
      t < 0.5
        ? 0.5 * elasticIn(t * 2, s, p)
        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
  },
  easeInBack(t) {
    const s = 1.70158;
    return t * t * ((s + 1) * t - s);
  },
  easeOutBack(t) {
    const s = 1.70158;
    return (t -= 1) * t * ((s + 1) * t + s) + 1;
  },
  easeInOutBack(t) {
    let s = 1.70158;
    if ((t /= 0.5) < 1) {
      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
    }
    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
  },
  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),
  easeOutBounce(t) {
    const m = 7.5625;
    const d = 2.75;
    if (t < (1 / d)) {
      return m * t * t;
    }
    if (t < (2 / d)) {
      return m * (t -= (1.5 / d)) * t + 0.75;
    }
    if (t < (2.5 / d)) {
      return m * (t -= (2.25 / d)) * t + 0.9375;
    }
    return m * (t -= (2.625 / d)) * t + 0.984375;
  },
  easeInOutBounce: t => (t < 0.5)
    ? effects.easeInBounce(t * 2) * 0.5
    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,
};

/*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */
function round(v) {
  return v + 0.5 | 0;
}
const lim = (v, l, h) => Math.max(Math.min(v, h), l);
function p2b(v) {
  return lim(round(v * 2.55), 0, 255);
}
function n2b(v) {
  return lim(round(v * 255), 0, 255);
}
function b2n(v) {
  return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
  return lim(round(v * 100), 0, 100);
}
const map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
const hex = [...'0123456789ABCDEF'];
const h1 = b => hex[b & 0xF];
const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = b => ((b & 0xF0) >> 4) === (b & 0xF);
const isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === '#') {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255
      };
    }
  }
  return ret;
}
const alpha = (a, f) => a < 255 ? f(a) : '';
function hexString(v) {
  var f = isShort(v) ? h1 : h2;
  return v
    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)
    : undefined;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h, s, v) {
  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h, w, b) {
  const rgb = hsl2rgbn(h, 1, 0.5);
  let i;
  if (w + b > 1) {
    i = 1 / (w + b);
    w *= i;
    b *= i;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w - b;
    rgb[i] += w;
  }
  return rgb;
}
function hueValue(r, g, b, d, max) {
  if (r === max) {
    return ((g - b) / d) + (g < b ? 6 : 0);
  }
  if (g === max) {
    return (b - r) / d + 2;
  }
  return (r - g) / d + 4;
}
function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b = v.b / range;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  const l = (max + min) / 2;
  let h, s, d;
  if (max !== min) {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    h = hueValue(r, g, b, d, max);
    h = h * 60 + 0.5;
  }
  return [h | 0, s || 0, l];
}
function calln(f, a, b, c) {
  return (
    Array.isArray(a)
      ? f(a[0], a[1], a[2])
      : f(a, b, c)
  ).map(n2b);
}
function hsl2rgb(h, s, l) {
  return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
  return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
  return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
  return (h % 360 + 360) % 360;
}
function hueParse(str) {
  const m = HUE_RE.exec(str);
  let a = 255;
  let v;
  if (!m) {
    return;
  }
  if (m[5] !== v) {
    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
  }
  const h = hue(+m[2]);
  const p1 = +m[3] / 100;
  const p2 = +m[4] / 100;
  if (m[1] === 'hwb') {
    v = hwb2rgb(h, p1, p2);
  } else if (m[1] === 'hsv') {
    v = hsv2rgb(h, p1, p2);
  } else {
    v = hsl2rgb(h, p1, p2);
  }
  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a: a
  };
}
function rotate(v, deg) {
  var h = rgb2hsl(v);
  h[0] = hue(h[0] + deg);
  h = hsl2rgb(h);
  v.r = h[0];
  v.g = h[1];
  v.b = h[2];
}
function hslString(v) {
  if (!v) {
    return;
  }
  const a = rgb2hsl(v);
  const h = a[0];
  const s = n2p(a[1]);
  const l = n2p(a[2]);
  return v.a < 255
    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
    : `hsl(${h}, ${s}%, ${l}%)`;
}
const map = {
  x: 'dark',
  Z: 'light',
  Y: 're',
  X: 'blu',
  W: 'gr',
  V: 'medium',
  U: 'slate',
  A: 'ee',
  T: 'ol',
  S: 'or',
  B: 'ra',
  C: 'lateg',
  D: 'ights',
  R: 'in',
  Q: 'turquois',
  E: 'hi',
  P: 'ro',
  O: 'al',
  N: 'le',
  M: 'de',
  L: 'yello',
  F: 'en',
  K: 'ch',
  G: 'arks',
  H: 'ea',
  I: 'ightg',
  J: 'wh'
};
const names$1 = {
  OiceXe: 'f0f8ff',
  antiquewEte: 'faebd7',
  aqua: 'ffff',
  aquamarRe: '7fffd4',
  azuY: 'f0ffff',
  beige: 'f5f5dc',
  bisque: 'ffe4c4',
  black: '0',
  blanKedOmond: 'ffebcd',
  Xe: 'ff',
  XeviTet: '8a2be2',
  bPwn: 'a52a2a',
  burlywood: 'deb887',
  caMtXe: '5f9ea0',
  KartYuse: '7fff00',
  KocTate: 'd2691e',
  cSO: 'ff7f50',
  cSnflowerXe: '6495ed',
  cSnsilk: 'fff8dc',
  crimson: 'dc143c',
  cyan: 'ffff',
  xXe: '8b',
  xcyan: '8b8b',
  xgTMnPd: 'b8860b',
  xWay: 'a9a9a9',
  xgYF: '6400',
  xgYy: 'a9a9a9',
  xkhaki: 'bdb76b',
  xmagFta: '8b008b',
  xTivegYF: '556b2f',
  xSange: 'ff8c00',
  xScEd: '9932cc',
  xYd: '8b0000',
  xsOmon: 'e9967a',
  xsHgYF: '8fbc8f',
  xUXe: '483d8b',
  xUWay: '2f4f4f',
  xUgYy: '2f4f4f',
  xQe: 'ced1',
  xviTet: '9400d3',
  dAppRk: 'ff1493',
  dApskyXe: 'bfff',
  dimWay: '696969',
  dimgYy: '696969',
  dodgerXe: '1e90ff',
  fiYbrick: 'b22222',
  flSOwEte: 'fffaf0',
  foYstWAn: '228b22',
  fuKsia: 'ff00ff',
  gaRsbSo: 'dcdcdc',
  ghostwEte: 'f8f8ff',
  gTd: 'ffd700',
  gTMnPd: 'daa520',
  Way: '808080',
  gYF: '8000',
  gYFLw: 'adff2f',
  gYy: '808080',
  honeyMw: 'f0fff0',
  hotpRk: 'ff69b4',
  RdianYd: 'cd5c5c',
  Rdigo: '4b0082',
  ivSy: 'fffff0',
  khaki: 'f0e68c',
  lavFMr: 'e6e6fa',
  lavFMrXsh: 'fff0f5',
  lawngYF: '7cfc00',
  NmoncEffon: 'fffacd',
  ZXe: 'add8e6',
  ZcSO: 'f08080',
  Zcyan: 'e0ffff',
  ZgTMnPdLw: 'fafad2',
  ZWay: 'd3d3d3',
  ZgYF: '90ee90',
  ZgYy: 'd3d3d3',
  ZpRk: 'ffb6c1',
  ZsOmon: 'ffa07a',
  ZsHgYF: '20b2aa',
  ZskyXe: '87cefa',
  ZUWay: '778899',
  ZUgYy: '778899',
  ZstAlXe: 'b0c4de',
  ZLw: 'ffffe0',
  lime: 'ff00',
  limegYF: '32cd32',
  lRF: 'faf0e6',
  magFta: 'ff00ff',
  maPon: '800000',
  VaquamarRe: '66cdaa',
  VXe: 'cd',
  VScEd: 'ba55d3',
  VpurpN: '9370db',
  VsHgYF: '3cb371',
  VUXe: '7b68ee',
  VsprRggYF: 'fa9a',
  VQe: '48d1cc',
  VviTetYd: 'c71585',
  midnightXe: '191970',
  mRtcYam: 'f5fffa',
  mistyPse: 'ffe4e1',
  moccasR: 'ffe4b5',
  navajowEte: 'ffdead',
  navy: '80',
  Tdlace: 'fdf5e6',
  Tive: '808000',
  TivedBb: '6b8e23',
  Sange: 'ffa500',
  SangeYd: 'ff4500',
  ScEd: 'da70d6',
  pOegTMnPd: 'eee8aa',
  pOegYF: '98fb98',
  pOeQe: 'afeeee',
  pOeviTetYd: 'db7093',
  papayawEp: 'ffefd5',
  pHKpuff: 'ffdab9',
  peru: 'cd853f',
  pRk: 'ffc0cb',
  plum: 'dda0dd',
  powMrXe: 'b0e0e6',
  purpN: '800080',
  YbeccapurpN: '663399',
  Yd: 'ff0000',
  Psybrown: 'bc8f8f',
  PyOXe: '4169e1',
  saddNbPwn: '8b4513',
  sOmon: 'fa8072',
  sandybPwn: 'f4a460',
  sHgYF: '2e8b57',
  sHshell: 'fff5ee',
  siFna: 'a0522d',
  silver: 'c0c0c0',
  skyXe: '87ceeb',
  UXe: '6a5acd',
  UWay: '708090',
  UgYy: '708090',
  snow: 'fffafa',
  sprRggYF: 'ff7f',
  stAlXe: '4682b4',
  tan: 'd2b48c',
  teO: '8080',
  tEstN: 'd8bfd8',
  tomato: 'ff6347',
  Qe: '40e0d0',
  viTet: 'ee82ee',
  JHt: 'f5deb3',
  wEte: 'ffffff',
  wEtesmoke: 'f5f5f5',
  Lw: 'ffff00',
  LwgYF: '9acd32'
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map);
  let i, j, k, ok, nk;
  for (i = 0; i < keys.length; i++) {
    ok = nk = keys[i];
    for (j = 0; j < tkeys.length; j++) {
      k = tkeys[j];
      nk = nk.replace(k, map[k]);
    }
    k = parseInt(names$1[ok], 16);
    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
  }
  return unpacked;
}
let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a = names[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m = RGB_RE.exec(str);
  let a = 255;
  let r, g, b;
  if (!m) {
    return;
  }
  if (m[7] !== r) {
    const v = +m[7];
    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
  }
  r = +m[1];
  g = +m[3];
  b = +m[5];
  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
  return {
    r: r,
    g: g,
    b: b,
    a: a
  };
}
function rgbString(v) {
  return v && (
    v.a < 255
      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
      : `rgb(${v.r}, ${v.g}, ${v.b})`
  );
}
const to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
const from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate(rgb1, rgb2, t) {
  const r = from(b2n(rgb1.r));
  const g = from(b2n(rgb1.g));
  const b = from(b2n(rgb1.b));
  return {
    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
    a: rgb1.a + t * (rgb2.a - rgb1.a)
  };
}
function modHSL(v, i, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}
function clone(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
  var v = {r: 0, g: 0, b: 0, a: 255};
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = {r: input[0], g: input[1], b: input[2], a: 255};
      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone(input, {r: 0, g: 0, b: 0, a: 1});
    v.a = n2b(v.a);
  }
  return v;
}
function functionParse(str) {
  if (str.charAt(0) === 'r') {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v;
    if (type === 'object') {
      v = fromObject(input);
    } else if (type === 'string') {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v;
    this._valid = !!v;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v = clone(this._rgb);
    if (v) {
      v.a = b2n(v.a);
    }
    return v;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : undefined;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : undefined;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : undefined;
  }
  mix(color, weight) {
    if (color) {
      const c1 = this.rgb;
      const c2 = color.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w = 2 * p - 1;
      const a = c1.a - c2.a;
      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      w2 = 1 - w1;
      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color, t) {
    if (color) {
      this._rgb = interpolate(this._rgb, color._rgb, t);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
function index_esm(input) {
  return new Color(input);
}

function isPatternOrGradient(value) {
  if (value && typeof value === 'object') {
    const type = value.toString();
    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : index_esm(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value)
    ? value
    : index_esm(value).saturate(0.5).darken(0.1).hexString();
}

const overrides = Object.create(null);
const descriptors = Object.create(null);
function getScope$1(node, key) {
  if (!key) {
    return node;
  }
  const keys = key.split('.');
  for (let i = 0, n = keys.length; i < n; ++i) {
    const k = keys[i];
    node = node[k] || (node[k] = Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === 'string') {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ''), scope);
}
class Defaults {
  constructor(_descriptors) {
    this.animation = undefined;
    this.backgroundColor = 'rgba(0,0,0,0.1)';
    this.borderColor = 'rgba(0,0,0,0.1)';
    this.color = '#666';
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      'mousemove',
      'mouseout',
      'click',
      'touchstart',
      'touchmove'
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: 'normal',
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = 'x';
    this.interaction = {
      mode: 'nearest',
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = undefined;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = '_' + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
}
var defaults = new Defaults({
  _scriptable: (name) => !name.startsWith('on'),
  _indexable: (name) => name !== 'events',
  hover: {
    _fallback: 'interaction'
  },
  interaction: {
    _scriptable: false,
    _indexable: false,
  }
});

function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + ' ' : '')
		+ (font.weight ? font.weight + ' ' : '')
		+ font.size + 'px '
		+ font.family;
}
function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i, j, jlen, thing, nestedThing;
  for (i = 0; i < ilen; i++) {
    thing = arrayOfThings[i];
    if (thing !== undefined && thing !== null && isArray(thing) !== true) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i = 0; i < gcLen; i++) {
      delete data[gc[i]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext('2d');
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x, y) {
  drawPointLegend(ctx, options, x, y, null);
}
function drawPointLegend(ctx, options, x, y, w) {
  let type, xOffset, yOffset, size, cornerRadius, width;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === 'object') {
    type = style.toString();
    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
  default:
    if (w) {
      ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
    } else {
      ctx.arc(x, y, radius, 0, TAU);
    }
    ctx.closePath();
    break;
  case 'triangle':
    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    rad += TWO_THIRDS_PI;
    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    rad += TWO_THIRDS_PI;
    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    ctx.closePath();
    break;
  case 'rectRounded':
    cornerRadius = radius * 0.516;
    size = radius - cornerRadius;
    xOffset = Math.cos(rad + QUARTER_PI) * size;
    yOffset = Math.sin(rad + QUARTER_PI) * size;
    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
    ctx.closePath();
    break;
  case 'rect':
    if (!rotation) {
      size = Math.SQRT1_2 * radius;
      width = w ? w / 2 : size;
      ctx.rect(x - width, y - size, 2 * width, 2 * size);
      break;
    }
    rad += QUARTER_PI;
  case 'rectRot':
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + yOffset, y - xOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    ctx.closePath();
    break;
  case 'crossRot':
    rad += QUARTER_PI;
  case 'cross':
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x + yOffset, y - xOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    break;
  case 'star':
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x + yOffset, y - xOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    rad += QUARTER_PI;
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x + yOffset, y - xOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    break;
  case 'line':
    xOffset = w ? w / 2 : Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    break;
  case 'dash':
    ctx.moveTo(x, y);
    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
    break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&
		point.y > area.top - margin && point.y < area.bottom + margin);
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === 'middle') {
    const midpoint = (previous.x + target.x) / 2.0;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === 'after' !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(
    flip ? previous.cp1x : previous.cp2x,
    flip ? previous.cp1y : previous.cp2y,
    flip ? target.cp2x : target.cp1x,
    flip ? target.cp2y : target.cp1y,
    target.x,
    target.y);
}
function renderText(ctx, text, x, y, font, opts = {}) {
  const lines = isArray(text) ? text : [text];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
  let i, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i = 0; i < lines.length; ++i) {
    line = lines[i];
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x, y, opts.maxWidth);
    }
    ctx.fillText(line, x, y, opts.maxWidth);
    decorateText(ctx, x, y, line, opts);
    y += font.lineHeight;
  }
  ctx.restore();
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x, y, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x - metrics.actualBoundingBoxLeft;
    const right = x + metrics.actualBoundingBoxRight;
    const top = y - metrics.actualBoundingBoxAscent;
    const bottom = y + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function addRoundedRectPath(ctx, rect) {
  const {x, y, w, h, radius} = rect;
  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
  ctx.lineTo(x, y + h - radius.bottomLeft);
  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x + w - radius.bottomRight, y + h);
  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x + w, y + radius.topRight);
  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x + radius.topLeft, y);
}

const LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
const FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
function toLineHeight(value, size) {
  const matches = ('' + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === 'normal') {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
  case 'px':
    return value;
  case '%':
    value /= 100;
    break;
  }
  return size * value;
}
const numberOrZero = v => +v || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value)
    ? objProps
      ? prop => valueOrDefault(value[prop], value[props[prop]])
      : prop => value[prop]
    : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});
}
function toTRBLCorners(value) {
  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);
  if (typeof size === 'string') {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !('' + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = '';
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ''
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index, info) {
  let cacheable = true;
  let i, ilen, value;
  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];
    if (value === undefined) {
      continue;
    }
    if (context !== undefined && typeof value === 'function') {
      value = value(context);
      cacheable = false;
    }
    if (index !== undefined && isArray(value)) {
      value = value[index % value.length];
      cacheable = false;
    }
    if (value !== undefined) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const {min, max} = minmax;
  const change = toDimension(grace, (max - min) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min, -Math.abs(change)),
    max: keepZero(max, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}

function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {
  if (!defined(fallback)) {
    fallback = _resolve('_fallback', scopes);
  }
  const cache = {
    [Symbol.toStringTag]: 'Object',
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: rootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },
    get(target, prop) {
      return _cached(target, prop,
        () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    get(target, prop, receiver) {
      return _cached(target, prop,
        () => _resolveWithContext(target, prop, receiver));
    },
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys
        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined
        : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {
  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&
  (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve) {
  if (Object.prototype.hasOwnProperty.call(target, prop)) {
    return target[prop];
  }
  const value = resolve();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
  }
  return value;
}
function _resolveScriptable(prop, value, target, receiver) {
  const {_proxy, _context, _subProxy, _stack} = target;
  if (_stack.has(prop)) {
    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
  }
  _stack.add(prop);
  value = value(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
  if (defined(_context.index) && isIndexable(prop)) {
    value = value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes = _proxy._scopes.filter(s => s !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent
  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
function addScopes(set, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [...parentScopes, ...rootScopes];
  const set = new Set();
  set.add(value);
  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (defined(fallback) && fallback !== prop) {
    key = addScopesFromKey(set, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set), [''], rootScopes, fallback,
    () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set, allScopes, key, fallback, item) {
  while (key) {
    key = addScopes(set, allScopes, key, fallback, item);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target;
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes);
    if (defined(value)) {
      return needsSubResolver(prop, value)
        ? createSubResolver(scopes, proxy, prop, value)
        : value;
    }
  }
}
function _resolve(key, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (defined(value)) {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes) {
  const set = new Set();
  for (const scope of scopes) {
    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {
      set.add(key);
    }
  }
  return Array.from(set);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
  const {iScale} = meta;
  const {key = 'r'} = this._parsing;
  const parsed = new Array(count);
  let i, ilen, index, item;
  for (i = 0, ilen = count; i < ilen; ++i) {
    index = i + start;
    item = data[index];
    parsed[i] = {
      r: iScale.parse(resolveObjectKey(item, key), index)
    };
  }
  return parsed;
}

const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa = t * s01;
  const fb = t * s12;
  return {
    previous: {
      x: current.x - fa * (next.x - previous.x),
      y: current.y - fa * (next.y - previous.y)
    },
    next: {
      x: current.x + fb * (next.x - previous.x),
      y: current.y + fb * (next.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i], 0, EPSILON)) {
      mK[i] = mK[i + 1] = 0;
      continue;
    }
    alphaK = mK[i] / deltaK[i];
    betaK = mK[i + 1] / deltaK[i];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i] = alphaK * tauK * deltaK[i];
    mK[i + 1] = betaK * tauK * deltaK[i];
  }
}
function monotoneCompute(points, mK, indexAxis = 'x') {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
    }
  }
}
function splineCurveMonotone(points, indexAxis = 'x') {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i] = !pointBefore ? deltaK[i]
      : !pointAfter ? deltaK[i - 1]
      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0
      : (deltaK[i - 1] + deltaK[i]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  let i, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i = 0, ilen = points.length; i < ilen; ++i) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
  let i, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options.cubicInterpolationMode === 'monotone') {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev = loop ? points[points.length - 1] : points[0];
    for (i = 0, ilen = points.length; i < ilen; ++i) {
      point = points[i];
      controlPoints = splineCurve(
        prev,
        point,
        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],
        options.tension
      );
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}

function _isDomSupported() {
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === '[object ShadowRoot]') {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === 'string') {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf('%') !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle = (element) => window.getComputedStyle(element, null);
function getStyle(el, property) {
  return getComputedStyle(el).getPropertyValue(property);
}
const positions = ['top', 'right', 'bottom', 'left'];
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? '-' + suffix : '';
  for (let i = 0; i < 4; i++) {
    const pos = positions[i];
    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e, canvas) {
  const touches = e.touches;
  const source = touches && touches.length ? touches[0] : e;
  const {offsetX, offsetY} = source;
  let box = false;
  let x, y;
  if (useOffsetPos(offsetX, offsetY, e.target)) {
    x = offsetX;
    y = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x = source.clientX - rect.left;
    y = source.clientY - rect.top;
    box = true;
  }
  return {x, y, box};
}
function getRelativePosition(evt, chart) {
  if ('native' in evt) {
    return evt;
  }
  const {canvas, currentDevicePixelRatio} = chart;
  const style = getComputedStyle(canvas);
  const borderBox = style.boxSizing === 'border-box';
  const paddings = getPositionedStyle(style, 'padding');
  const borders = getPositionedStyle(style, 'border', 'width');
  const {x, y, box} = getCanvasPosition(evt, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let {width, height} = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === undefined || height === undefined) {
    const container = _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle(container);
      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
      const containerPadding = getPositionedStyle(containerStyle, 'padding');
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = v => Math.round(v * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle(canvas);
  const margins = getPositionedStyle(style, 'margin');
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let {width, height} = containerSize;
  if (style.boxSizing === 'content-box') {
    const borders = getPositionedStyle(style, 'border', 'width');
    const paddings = getPositionedStyle(style, 'padding');
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = deviceHeight / pixelRatio;
  chart.width = deviceWidth / pixelRatio;
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio
      || canvas.height !== deviceHeight
      || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = (function() {
  let passiveSupported = false;
  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    window.addEventListener('test', null, options);
    window.removeEventListener('test', null, options);
  } catch (e) {
  }
  return passiveSupported;
}());
function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : undefined;
}

function _pointInLine(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: p1.y + t * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y
    : mode === 'after' ? t < 1 ? p1.y : p2.y
    : t > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t, mode) {
  const cp1 = {x: p1.cp2x, y: p1.cp2y};
  const cp2 = {x: p2.cp1x, y: p2.cp1y};
  const a = _pointInLine(p1, cp1, t);
  const b = _pointInLine(cp1, cp2, t);
  const c = _pointInLine(cp2, p2, t);
  const d = _pointInLine(a, b, t);
  const e = _pointInLine(b, c, t);
  return _pointInLine(d, e, t);
}

const intlCache = new Map();
function getNumberFormat(locale, options) {
  options = options || {};
  const cacheKey = locale + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale, options) {
  return getNumberFormat(locale, options).format(num);
}

const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x) {
      return rectX + rectX + width - x;
    },
    setWidth(w) {
      width = w;
    },
    textAlign(align) {
      if (align === 'center') {
        return align;
      }
      return align === 'right' ? 'left' : 'right';
    },
    xPlus(x, value) {
      return x - value;
    },
    leftForLtr(x, itemWidth) {
      return x - itemWidth;
    },
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x) {
      return x;
    },
    setWidth(w) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x, value) {
      return x + value;
    },
    leftForLtr(x, _itemWidth) {
      return x;
    },
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === 'ltr' || direction === 'rtl') {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue('direction'),
      style.getPropertyPriority('direction'),
    ];
    style.setProperty('direction', direction, 'important');
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== undefined) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty('direction', original[0], original[1]);
  }
}

function propertyFn(property) {
  if (property === 'angle') {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle,
    };
  }
  return {
    between: _isBetween,
    compare: (a, b) => a - b,
    normalize: x => x
  };
}
function normalizeSegment({start, end, count, loop, style}) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const {property, start: startBound, end: endBound} = bounds;
  const {between, normalize} = propertyFn(property);
  const count = points.length;
  let {start, end, loop} = segment;
  let i, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i = 0, ilen = count; i < ilen; ++i) {
      if (!between(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {start, end, loop, style: segment.style};
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [segment];
  }
  const {property, start: startBound, end: endBound} = bounds;
  const count = points.length;
  const {compare, between, normalize} = propertyFn(property);
  const {start, end, loop, style} = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i = start, prev = start; i <= end; ++i) {
    point = points[i % count];
    if (point.skip) {
      continue;
    }
    value = normalize(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i : prev;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));
      subStart = null;
    }
    prev = i;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({start: subStart, end, loop, count, style}));
  }
  return result;
}
function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;
  for (let i = 0; i < segments.length; i++) {
    const sub = _boundSegment(segments[i], line.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {start, end};
}
function solidSegments(points, start, max, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev = points[start];
  let end;
  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop = false;
        result.push({start: start % count, end: (end - 1) % count, loop});
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev.skip) {
        start = end;
      }
    }
    prev = cur;
  }
  if (last !== null) {
    result.push({start: start % count, end: last % count, loop});
  }
  return result;
}
function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line._loop;
  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);
  }
  const max = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
  const chartContext = line._chart.getContext();
  const baseStyle = readStyle(line.options);
  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle;
  let start = segments[0].start;
  let i = start;
  function addStyle(s, e, l, st) {
    const dir = spanGaps ? -1 : 1;
    if (s === e) {
      return;
    }
    s += count;
    while (points[s % count].skip) {
      s -= dir;
    }
    while (points[e % count].skip) {
      e += dir;
    }
    if (s % count !== e % count) {
      result.push({start: s % count, end: e % count, loop: l, style: st});
      prevStyle = st;
      start = e % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev = points[start % count];
    let style;
    for (i = start + 1; i <= segment.end; i++) {
      const pt = points[i % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: 'segment',
        p0: prev,
        p1: pt,
        p0DataIndex: (i - 1) % count,
        p1DataIndex: i % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i - 1, segment.loop, prevStyle);
      }
      prev = pt;
      prevStyle = style;
    }
    if (start < i - 1) {
      addStyle(start, i - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}
function styleChanged(style, prevStyle) {
  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!************************************************************!*\
  !*** D:\Users\lvfd\nodejs\dovepay-freight-ui\src\Entry.js ***!
  \************************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Global */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Global.js");
/* harmony import */ var _Login__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Login */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\Login.js");
/* harmony import */ var _SystemPages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SystemPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\SystemPages.js");
/* harmony import */ var _AgentPages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AgentPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\AgentPages.js");
/* harmony import */ var _StationPages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StationPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\StationPages.js");
/* harmony import */ var _DiscountPages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DiscountPages */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\DiscountPages.js");
/* harmony import */ var _dataStatistic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dataStatistic */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\dataStatistic.js");
/* harmony import */ var _initJqueryAjax__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./initJqueryAjax */ "D:\\Users\\lvfd\\nodejs\\dovepay-freight-ui\\src\\initJqueryAjax.js");








$(document).ready(function () {
  try {
    EntryJS();
  } catch (error) {
    _Global__WEBPACK_IMPORTED_MODULE_0__["default"].errorHandler(error);
    return;
  }
});
function EntryJS() {
  // readonly禁用backspace:
  document.onkeydown = _Global__WEBPACK_IMPORTED_MODULE_0__["default"].banBackSpace;

  // Login page:
  if (document.querySelector('input[data-pageId=dovepay-freight_login]')) {
    (0,_Login__WEBPACK_IMPORTED_MODULE_1__.initLogin_page)();
  }

  // Init Main:
  if (document.getElementById('dpfMain')) {
    _Global__WEBPACK_IMPORTED_MODULE_0__["default"].initMain();
  }

  // Init navbar:
  if (document.getElementById('dpfNav')) {
    _Global__WEBPACK_IMPORTED_MODULE_0__["default"].initNav();
  }

  // Init header:
  if (document.getElementById('dpfHeader')) {
    (0,_Login__WEBPACK_IMPORTED_MODULE_1__.initLogin_initQuirBtn)();
    if (document.getElementById('agentNameInHeader')) (0,_AgentPages__WEBPACK_IMPORTED_MODULE_3__.initAgent_userName)();
  }

  // 初始化系统商：用户查询：
  if (document.querySelector('input[data-pageId=system_getAllConsumer]')) {
    (0,_SystemPages__WEBPACK_IMPORTED_MODULE_2__.initSystem_getAllConsumer)();
  }
  // 初始化系统商：账单查询：
  // if (document.querySelector('input[data-pageId=system_systemQueryBill]')) {
  //   initSystem_systemQueryBill();
  // }
  // 初始化系统商：查询账单：新需求
  if (document.querySelector('input[data-pageId=system_systemQueryBill_new]')) {
    (0,_SystemPages__WEBPACK_IMPORTED_MODULE_2__.initSystem_systemQueryBill_new)();
  }
  // 初始化系统商：账单详情查询：
  // if (document.querySelector('input[data-pageId=system_systemQueryBillDetails]')) {
  //   initSystem_systemQueryBillDetails();
  // }
  // 初始化系统商：查询账单详情：新需求
  if (document.querySelector('input[data-pageId=system_systemQueryBillDetails_new]')) {
    (0,_SystemPages__WEBPACK_IMPORTED_MODULE_2__.initSystem_systemQueryBillDetails_new)();
  }
  // 初始化系统商：优惠政策管理：
  if (document.querySelector('input[data-pageId=system_getAllDiscountPolicy]')) {
    (0,_SystemPages__WEBPACK_IMPORTED_MODULE_2__.initSystem_getAllDiscountPolicy)();
  }
  // 初始化系统商：优惠政策详情：
  if (document.querySelector('input[data-pageId=system_getDiscountPolicy]')) {
    (0,_SystemPages__WEBPACK_IMPORTED_MODULE_2__.initSystem_getDiscountPolicy)();
  }
  // 初始化系统商: 账单汇总查询:
  if (document.querySelector('input[data-pageId=system_billMangement_queryBills]')) {
    (0,_SystemPages__WEBPACK_IMPORTED_MODULE_2__.initSystem_billMangement_queryBills)();
  }
  // 初始化系统商: 基础数据页面:
  if (document.querySelector('input[data-pageId=system_baseData]')) {
    (0,_SystemPages__WEBPACK_IMPORTED_MODULE_2__.initSystem_baseData)();
  }

  // 初始化agent：查询账单(旧需求)：
  // if (document.querySelector('input[data-pageId=consumer_consumerQueryBill]')) {
  //   initAgent_consumerQueryBill();
  // }
  // 初始化agent：查询账单(新需求)：
  if (document.querySelector('input[data-pageId=agent_billMangement_queryBills]')) {
    (0,_AgentPages__WEBPACK_IMPORTED_MODULE_3__.initAgent_consumerQueryBill_new)();
  }
  // 初始化agent：查询账单详情(旧需求)：
  // if (document.querySelector('input[data-pageId=consumer_consumerQueryBillDetails]')) {
  //   initAgent_consumerQueryBillDetails();
  // }
  // 初始化agent：查询账单详情(新需求)：
  if (document.querySelector('input[data-pageId=consumer_consumerQueryBillDetails_new]')) {
    (0,_AgentPages__WEBPACK_IMPORTED_MODULE_3__.initAgent_consumerQueryBillDetails_new)();
  }
  // 初始化agent：绑定账户：
  if (document.querySelector('input[data-pageId=consumer_getBindConsumer]')) {
    (0,_AgentPages__WEBPACK_IMPORTED_MODULE_3__.initAgent_getBindConsumer)();
  }

  // 初始化station：查询账单：旧需求
  // if (document.querySelector('input[data-pageId=station_stationQueryBill]')) {
  //   initStation_stationQueryBill();
  // }
  // 初始化station：查询账单：新需求
  if (document.querySelector('input[data-pageId=station_stationQueryBill_new]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_stationQueryBill_new)();
  }
  // 初始化station：查询账单详情：旧需求
  // if (document.querySelector('input[data-pageId=station_stationQueryBillDetails]')) {
  //   initStation_stationQueryBillDetails();
  // }
  // 初始化station：查询账单详情：新需求
  if (document.querySelector('input[data-pageId=station_stationQueryBillDetails_new]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_stationQueryBillDetails_new)();
  }
  // 初始化station：用户信息管理：
  if (document.querySelector('input[data-pageId=station_getStationAllConsumer]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_getStationAllConsumer)();
  }
  // 初始化station: 优惠政策管理：
  if (document.querySelector('input[data-pageId=station_getAllDiscountPolicy]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_getAllDiscountPolicy)();
  }
  // 初始化station:优惠: 设置页面选项卡
  if (document.querySelector('input[data-pageId=station_createDiscountPolicy]')) {
    (0,_DiscountPages__WEBPACK_IMPORTED_MODULE_5__.initStation_initTabs)();
  }
  // 初始化station:优惠：政策名细页面：
  if (document.querySelector('input[data-pageId=discountPoliciesManagementDetails]')) {
    (0,_DiscountPages__WEBPACK_IMPORTED_MODULE_5__.initStation_discountPoliciesManagementDetails)();
  }
  // 初始化station: 基础数据页面:
  if (document.querySelector('input[data-pageId=station_baseData]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_baseData)();
  }
  // 初始化station: 账单规则查询页面:
  if (document.querySelector('input[data-pageId=station_billsSetting]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_billsSetting)();
  }
  // 初始化station: 新增账单规则页面:
  if (document.querySelector('input[data-pageId=station_billsSetting_addRule]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_billsSetting_addRule)();
  }
  // 初始化station: 账单汇总查询:
  if (document.querySelector('input[data-pageId=station_billMangement_queryBills]')) {
    (0,_StationPages__WEBPACK_IMPORTED_MODULE_4__.initStation_billMangement_queryBills)();
  }
  // 初始化station: 数据统计:
  if (document.querySelector('input[data-pageId=dataStatisticIndex]')) {
    _dataStatistic__WEBPACK_IMPORTED_MODULE_6__.dsIndex();
  }
  // 初始化station: 数据统计明细:
  if (document.querySelector('input[data-pageId=dataStatisticDetails]')) {
    _dataStatistic__WEBPACK_IMPORTED_MODULE_6__.dsDetails();
  }
}
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,